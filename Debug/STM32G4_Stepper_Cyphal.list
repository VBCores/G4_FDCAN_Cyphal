
STM32G4_Stepper_Cyphal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a9c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001130  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adac  0800adac  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800adac  0800adac  0000bdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb4  0800adb4  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800adb4  0800adb4  0000bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800adc0  0800adc0  0000bdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800adcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  0800ae34  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800ae34  0000c328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002689f  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000552f  00000000  00000000  00032937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001074  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd64  00000000  00000000  0003a454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001953b  00000000  00000000  000671b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001033d2  00000000  00000000  000806f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  00183b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018a05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  0018a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c64 	.word	0x08009c64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08009c64 	.word	0x08009c64

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2f>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000640:	bf24      	itt	cs
 8000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800064a:	d90d      	bls.n	8000668 <__aeabi_d2f+0x30>
 800064c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000658:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000660:	bf08      	it	eq
 8000662:	f020 0001 	biceq.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800066c:	d121      	bne.n	80006b2 <__aeabi_d2f+0x7a>
 800066e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000672:	bfbc      	itt	lt
 8000674:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000678:	4770      	bxlt	lr
 800067a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000682:	f1c2 0218 	rsb	r2, r2, #24
 8000686:	f1c2 0c20 	rsb	ip, r2, #32
 800068a:	fa10 f30c 	lsls.w	r3, r0, ip
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	bf18      	it	ne
 8000694:	f040 0001 	orrne.w	r0, r0, #1
 8000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006a4:	ea40 000c 	orr.w	r0, r0, ip
 80006a8:	fa23 f302 	lsr.w	r3, r3, r2
 80006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006b0:	e7cc      	b.n	800064c <__aeabi_d2f+0x14>
 80006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006b6:	d107      	bne.n	80006c8 <__aeabi_d2f+0x90>
 80006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006bc:	bf1e      	ittt	ne
 80006be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006c6:	4770      	bxne	lr
 80006c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006de:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <MX_FDCAN1_Init+0x8c>)
 80006e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80006ee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 80006fe:	2201      	movs	r2, #1
 8000700:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 800070a:	2204      	movs	r2, #4
 800070c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000710:	2201      	movs	r2, #1
 8000712:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000716:	221d      	movs	r2, #29
 8000718:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 800071c:	220a      	movs	r2, #10
 800071e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000722:	2204      	movs	r2, #4
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000728:	2201      	movs	r2, #1
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 800072e:	2202      	movs	r2, #2
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000734:	2202      	movs	r2, #2
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_FDCAN1_Init+0x88>)
 800074c:	f003 fe6e 	bl	800442c <HAL_FDCAN_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000756:	f000 f99a 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40006400 	.word	0x40006400

08000768 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09e      	sub	sp, #120	@ 0x78
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2254      	movs	r2, #84	@ 0x54
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f008 fcae 	bl	80090ea <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <HAL_FDCAN_MspInit+0xac>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d138      	bne.n	800080a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800079e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f999 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80007b4:	f000 f96b 	bl	8000a8e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007bc:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d4:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_FDCAN_MspInit+0xb0>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007fa:	2309      	movs	r3, #9
 80007fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <HAL_FDCAN_MspInit+0xb4>)
 8000806:	f004 fa0d 	bl	8004c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3778      	adds	r7, #120	@ 0x78
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40006400 	.word	0x40006400
 8000818:	40021000 	.word	0x40021000
 800081c:	48000400 	.word	0x48000400

08000820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a27      	ldr	r2, [pc, #156]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f004 fb43 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2104      	movs	r1, #4
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008a8:	f004 fb3e 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80008ac:	2320      	movs	r3, #32
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f004 f9ad 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008e2:	f004 f99f 	bl	8004c24 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000c00 	.word	0x48000c00

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f003 fc40 	bl	8004182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f879 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f7ff ff8b 	bl	8000820 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800090a:	f7ff fee5 	bl	80006d8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 800090e:	4838      	ldr	r0, [pc, #224]	@ (80009f0 <main+0xf8>)
 8000910:	f001 fb74 	bl	8001ffc <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8000914:	4836      	ldr	r0, [pc, #216]	@ (80009f0 <main+0xf8>)
 8000916:	f001 fb03 	bl	8001f20 <setup_cyphal>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_hbeat = HAL_GetTick();
 800091a:	f003 fc97 	bl	800424c <HAL_GetTick>
 800091e:	6178      	str	r0, [r7, #20]
  float pos = JOINT_N;
 8000920:	4b34      	ldr	r3, [pc, #208]	@ (80009f4 <main+0xfc>)
 8000922:	60fb      	str	r3, [r7, #12]
  float vel = JOINT_N;
 8000924:	4b33      	ldr	r3, [pc, #204]	@ (80009f4 <main+0xfc>)
 8000926:	60bb      	str	r3, [r7, #8]
  float eff = JOINT_N;
 8000928:	4b32      	ldr	r3, [pc, #200]	@ (80009f4 <main+0xfc>)
 800092a:	607b      	str	r3, [r7, #4]
  while (1)
  {
      cyphal_loop();
 800092c:	f001 fb58 	bl	8001fe0 <cyphal_loop>
      uint32_t now = HAL_GetTick();
 8000930:	f003 fc8c 	bl	800424c <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]
      if ( (now - last_hbeat) >= 100) {
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b63      	cmp	r3, #99	@ 0x63
 800093e:	d9f5      	bls.n	800092c <main+0x34>
          last_hbeat = now;
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	617b      	str	r3, [r7, #20]
          heartbeat();
 8000944:	f001 fac6 	bl	8001ed4 <heartbeat>
          pos += 0.01;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe1c 	bl	8000588 <__aeabi_f2d>
 8000950:	a325      	add	r3, pc, #148	@ (adr r3, 80009e8 <main+0xf0>)
 8000952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000956:	f7ff fcb9 	bl	80002cc <__adddf3>
 800095a:	4602      	mov	r2, r0
 800095c:	460b      	mov	r3, r1
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff fe69 	bl	8000638 <__aeabi_d2f>
 8000966:	4603      	mov	r3, r0
 8000968:	60fb      	str	r3, [r7, #12]
          vel += 0.01;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe0b 	bl	8000588 <__aeabi_f2d>
 8000972:	a31d      	add	r3, pc, #116	@ (adr r3, 80009e8 <main+0xf0>)
 8000974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000978:	f7ff fca8 	bl	80002cc <__adddf3>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	4610      	mov	r0, r2
 8000982:	4619      	mov	r1, r3
 8000984:	f7ff fe58 	bl	8000638 <__aeabi_d2f>
 8000988:	4603      	mov	r3, r0
 800098a:	60bb      	str	r3, [r7, #8]
          eff += 0.01;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdfa 	bl	8000588 <__aeabi_f2d>
 8000994:	a314      	add	r3, pc, #80	@ (adr r3, 80009e8 <main+0xf0>)
 8000996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099a:	f7ff fc97 	bl	80002cc <__adddf3>
 800099e:	4602      	mov	r2, r0
 80009a0:	460b      	mov	r3, r1
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	f7ff fe47 	bl	8000638 <__aeabi_d2f>
 80009aa:	4603      	mov	r3, r0
 80009ac:	607b      	str	r3, [r7, #4]
          send_JS(&pos, &vel, &eff);
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	f107 0108 	add.w	r1, r7, #8
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fa65 	bl	8001e88 <send_JS>
          if(pos > 1.5)
 80009be:	edd7 7a03 	vldr	s15, [r7, #12]
 80009c2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80009c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	dd08      	ble.n	80009e2 <main+0xea>
          {
        	  pos = 0.0;
 80009d0:	f04f 0300 	mov.w	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
        	  vel = 0.0;
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
        	  eff = 0.0;
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  {
 80009e2:	e7a3      	b.n	800092c <main+0x34>
 80009e4:	f3af 8000 	nop.w
 80009e8:	47ae147b 	.word	0x47ae147b
 80009ec:	3f847ae1 	.word	0x3f847ae1
 80009f0:	20000084 	.word	0x20000084
 80009f4:	40a00000 	.word	0x40a00000

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	@ 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	2238      	movs	r2, #56	@ 0x38
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f008 fb6f 	bl	80090ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f004 fab6 	bl	8004f8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a28:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a36:	2328      	movs	r3, #40	@ 0x28
 8000a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fb52 	bl	80050f4 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a56:	f000 f81a 	bl	8000a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2104      	movs	r1, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 fe4e 	bl	8005718 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a82:	f000 f804 	bl	8000a8e <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	@ 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
}
 8000a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <Error_Handler+0x8>

08000a9a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d019      	beq.n	8000b28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3308      	adds	r3, #8
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	330c      	adds	r3, #12
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
        }
    }
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2203      	movs	r2, #3
 8000b76:	4798      	blx	r3
    }
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffd4 	bl	8000b5c <_ZNSt14_Function_baseD1Ev>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZNSt8functionIFvvEED1Ev>:
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffc7 	bl	8000b5c <_ZNSt14_Function_baseD1Ev>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fa68 	bl	80020be <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fa8d 	bl	8002114 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	0800a70c 	.word	0x0800a70c

08000c30 <_Z7alloc_fP14CanardInstancej>:
#include "cyphal/definitions.h"
#include "libcanard/canard.h"

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <_Z7alloc_fP14CanardInstancej+0x40>)
 8000c3c:	f001 fa95 	bl	800216a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f008 f84b 	bl	8008ce8 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <_Z7alloc_fP14CanardInstancej+0x40>)
 8000c54:	f001 fa9a 	bl	800218c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	6814      	ldr	r4, [r2, #0]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	47a0      	blx	r4
 8000c66:	4603      	mov	r3, r0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	200001d4 	.word	0x200001d4

08000c74 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <_Z6free_fP14CanardInstancePv+0x40>)
 8000c80:	f001 fa73 	bl	800216a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f083 0301 	eor.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f008 f829 	bl	8008ce8 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <_Z6free_fP14CanardInstancePv+0x40>)
 8000c98:	f001 fa78 	bl	800218c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	3204      	adds	r2, #4
 8000ca2:	6814      	ldr	r4, [r2, #0]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	47a0      	blx	r4
 8000cac:	bf00      	nop
}
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	200001d4 	.word	0x200001d4

08000cb8 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	603b      	str	r3, [r7, #0]
        WIRE_MTU(wire_mtu),
        CANARD_MTU(canard_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	6839      	ldr	r1, [r7, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 fcf4 	bl	80086d0 <canardTxInit>
        utilities(utilities)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800a6f0 	.word	0x0800a6f0

08000cfc <_ZN15CyphalInterfaceC1EhR13UtilityConfig>:

class CyphalInterface {
private:
    const CanardNodeID node_id;
    std::unique_ptr<AbstractCANProvider> provider;
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config) : node_id(node_id), utilities(config) {};
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	460b      	mov	r3, r1
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	72fb      	strb	r3, [r7, #11]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	7afa      	ldrb	r2, [r7, #11]
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3304      	adds	r3, #4
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fa5f 	bl	80021d8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2248      	movs	r2, #72	@ 0x48
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	f7ff ffb7 	bl	8000cb8 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800a87c 	.word	0x0800a87c

08000d64 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include "../allocator.h"

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff44 	bl	8000c04 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8000d7c:	4a03      	ldr	r2, [pc, #12]	@ (8000d8c <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	0800a760 	.word	0x0800a760

08000d90 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d201      	bcs.n	8000da6 <nunavutChooseMin+0x16>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	e000      	b.n	8000da8 <nunavutChooseMin+0x18>
 8000da6:	683b      	ldr	r3, [r7, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff ffe1 	bl	8000d90 <nunavutChooseMin>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8000dd6:	6939      	ldr	r1, [r7, #16]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffd9 	bl	8000d90 <nunavutChooseMin>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b092      	sub	sp, #72	@ 0x48
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8000df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d145      	bne.n	8000e8c <nunavutCopyBits+0xa4>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d140      	bne.n	8000e8c <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000e28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e2a:	f008 f944 	bl	80090b6 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8000e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 808a 	beq.w	8000f58 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e48:	4413      	add	r3, r2
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000e4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e50:	4413      	add	r3, r2
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8000e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e58:	2201      	movs	r2, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	3b01      	subs	r3, #1
 8000e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8000e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e68:	781a      	ldrb	r2, [r3, #0]
 8000e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4013      	ands	r3, r2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	7819      	ldrb	r1, [r3, #0]
 8000e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e7e:	400b      	ands	r3, r1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e88:	701a      	strb	r2, [r3, #0]
        }
    }
 8000e8a:	e065      	b.n	8000f58 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8000e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e96:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8000e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8000ea4:	e053      	b.n	8000f4e <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8000ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8000eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8000eba:	7dfa      	ldrb	r2, [r7, #23]
 8000ebc:	7dbb      	ldrb	r3, [r7, #22]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d901      	bls.n	8000ec6 <nunavutCopyBits+0xde>
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	e000      	b.n	8000ec8 <nunavutCopyBits+0xe0>
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8000eca:	7d7b      	ldrb	r3, [r7, #21]
 8000ecc:	f1c3 0008 	rsb	r0, r3, #8
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff ff5a 	bl	8000d90 <nunavutChooseMin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8000ee0:	7d3b      	ldrb	r3, [r7, #20]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	7dbb      	ldrb	r3, [r7, #22]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8000ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	7dbb      	ldrb	r3, [r7, #22]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8000f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8000f24:	7cba      	ldrb	r2, [r7, #18]
 8000f26:	7cfb      	ldrb	r3, [r7, #19]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	4413      	add	r3, r2
 8000f34:	7c79      	ldrb	r1, [r7, #17]
 8000f36:	7c3a      	ldrb	r2, [r7, #16]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8000f3e:	7d3b      	ldrb	r3, [r7, #20]
 8000f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f42:	4413      	add	r3, r2
 8000f44:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8000f46:	7d3b      	ldrb	r3, [r7, #20]
 8000f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f4a:	4413      	add	r3, r2
 8000f4c:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d8a7      	bhi.n	8000ea6 <nunavutCopyBits+0xbe>
        }

    }
}
 8000f56:	e000      	b.n	8000f5a <nunavutCopyBits+0x172>
    }
 8000f58:	bf00      	nop
}
 8000f5a:	bf00      	nop
 8000f5c:	3748      	adds	r7, #72	@ 0x48
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b088      	sub	sp, #32
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	440b      	add	r3, r1
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d202      	bcs.n	8000f84 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000f7e:	f06f 0302 	mvn.w	r3, #2
 8000f82:	e010      	b.n	8000fa6 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8000f84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f88:	2140      	movs	r1, #64	@ 0x40
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff00 	bl	8000d90 <nunavutChooseMin>
 8000f90:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ff22 	bl	8000de8 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b088      	sub	sp, #32
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fee5 	bl	8000d90 <nunavutChooseMin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f7ff fef1 	bl	8000db4 <nunavutSaturateBufferFragmentBitLength>
 8000fd2:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8000fd8:	f107 0010 	add.w	r0, r7, #16
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f7ff feff 	bl	8000de8 <nunavutCopyBits>
    return val;
 8000fea:	693b      	ldr	r3, [r7, #16]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8001000:	2320      	movs	r3, #32
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff ffd1 	bl	8000fae <nunavutGetU32>
 800100c:	4603      	mov	r3, r0
 800100e:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	ee07 3a90 	vmov	s15, r3
}
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af04      	add	r7, sp, #16
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <uavcan_node_Health_1_0_serialize_+0x1e>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <uavcan_node_Health_1_0_serialize_+0x1e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800103e:	f06f 0301 	mvn.w	r3, #1
 8001042:	e048      	b.n	80010d6 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	2b07      	cmp	r3, #7
 8001050:	d802      	bhi.n	8001058 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001052:	f06f 0302 	mvn.w	r3, #2
 8001056:	e03e      	b.n	80010d6 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8001062:	7efb      	ldrb	r3, [r7, #27]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d901      	bls.n	800106c <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8001068:	2303      	movs	r3, #3
 800106a:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4413      	add	r3, r2
 8001074:	7efa      	ldrb	r2, [r7, #27]
 8001076:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3302      	adds	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	2b00      	cmp	r3, #0
 8001086:	d021      	beq.n	80010cc <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f1c3 0308 	rsb	r3, r3, #8
 8001096:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9cd 2300 	strd	r2, r3, [sp]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f7ff ff58 	bl	8000f62 <nunavutSetUxx>
 80010b2:	4603      	mov	r3, r0
 80010b4:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80010b6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da02      	bge.n	80010c4 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 80010be:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80010c2:	e008      	b.n	80010d6 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4413      	add	r3, r2
 80010ca:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <uavcan_node_Health_1_0_deserialize_+0x26>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <uavcan_node_Health_1_0_deserialize_+0x26>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <uavcan_node_Health_1_0_deserialize_+0x2c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001106:	f06f 0301 	mvn.w	r3, #1
 800110a:	e030      	b.n	800116e <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8001114:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3302      	adds	r3, #2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	429a      	cmp	r2, r3
 800112e:	d30a      	bcc.n	8001146 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e002      	b.n	800114c <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3302      	adds	r3, #2
 8001150:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3307      	adds	r3, #7
 8001156:	f023 0307 	bic.w	r3, r3, #7
 800115a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff fe16 	bl	8000d90 <nunavutChooseMin>
 8001164:	4603      	mov	r3, r0
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	0800a67c 	.word	0x0800a67c

0800117c <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af04      	add	r7, sp, #16
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <uavcan_node_Mode_1_0_serialize_+0x1e>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <uavcan_node_Mode_1_0_serialize_+0x1e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800119a:	f06f 0301 	mvn.w	r3, #1
 800119e:	e048      	b.n	8001232 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d802      	bhi.n	80011b4 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80011ae:	f06f 0302 	mvn.w	r3, #2
 80011b2:	e03e      	b.n	8001232 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 80011be:	7efb      	ldrb	r3, [r7, #27]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d901      	bls.n	80011c8 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 80011c4:	2307      	movs	r3, #7
 80011c6:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08db      	lsrs	r3, r3, #3
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	7efa      	ldrb	r2, [r7, #27]
 80011d2:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3303      	adds	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d021      	beq.n	8001228 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f1c3 0308 	rsb	r3, r3, #8
 80011f2:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9cd 2300 	strd	r2, r3, [sp]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	6979      	ldr	r1, [r7, #20]
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f7ff feaa 	bl	8000f62 <nunavutSetUxx>
 800120e:	4603      	mov	r3, r0
 8001210:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001212:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da02      	bge.n	8001220 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 800121a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800121e:	e008      	b.n	8001232 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4413      	add	r3, r2
 8001226:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <uavcan_node_Mode_1_0_deserialize_+0x26>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001262:	f06f 0301 	mvn.w	r3, #1
 8001266:	e030      	b.n	80012ca <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8001270:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3303      	adds	r3, #3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	429a      	cmp	r2, r3
 800128a:	d30a      	bcc.n	80012a2 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e002      	b.n	80012a8 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3303      	adds	r3, #3
 80012ac:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3307      	adds	r3, #7
 80012b2:	f023 0307 	bic.w	r3, r3, #7
 80012b6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff fd68 	bl	8000d90 <nunavutChooseMin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800a67c 	.word	0x0800a67c

080012d8 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80012f6:	f06f 0301 	mvn.w	r3, #1
 80012fa:	e0cf      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	2b37      	cmp	r3, #55	@ 0x37
 8001308:	d802      	bhi.n	8001310 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800130a:	f06f 0302 	mvn.w	r3, #2
 800130e:	e0c5      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	4413      	add	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	3320      	adds	r3, #32
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	2b00      	cmp	r3, #0
 8001330:	d021      	beq.n	8001376 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f1c3 0308 	rsb	r3, r3, #8
 8001340:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9cd 2300 	strd	r2, r3, [sp]
 8001352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001354:	6a39      	ldr	r1, [r7, #32]
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff fe03 	bl	8000f62 <nunavutSetUxx>
 800135c:	4603      	mov	r3, r0
 800135e:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8001360:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da02      	bge.n	800136e <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8001368:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800136c:	e096      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001372:	4413      	add	r3, r2
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	f107 0214 	add.w	r2, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fe48 	bl	8001020 <uavcan_node_Health_1_0_serialize_>
 8001390:	4603      	mov	r3, r0
 8001392:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8001394:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da02      	bge.n	80013a2 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 800139c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80013a0:	e07c      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a8:	4413      	add	r3, r2
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d021      	beq.n	80013fa <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f1c3 0308 	rsb	r3, r3, #8
 80013c4:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80013c6:	7f3b      	ldrb	r3, [r7, #28]
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9cd 2300 	strd	r2, r3, [sp]
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	6a39      	ldr	r1, [r7, #32]
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f7ff fdc1 	bl	8000f62 <nunavutSetUxx>
 80013e0:	4603      	mov	r3, r0
 80013e2:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 80013e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da02      	bge.n	80013f2 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 80013ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80013f0:	e054      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 80013f2:	7f3b      	ldrb	r3, [r7, #28]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f6:	4413      	add	r3, r2
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 80013fa:	2301      	movs	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	f107 0210 	add.w	r2, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff feb4 	bl	800117c <uavcan_node_Mode_1_0_serialize_>
 8001414:	4603      	mov	r3, r0
 8001416:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8001418:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800141c:	2b00      	cmp	r3, #0
 800141e:	da02      	bge.n	8001426 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8001420:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001424:	e03a      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	4413      	add	r3, r2
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	7992      	ldrb	r2, [r2, #6]
 800143c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	3308      	adds	r3, #8
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	2b00      	cmp	r3, #0
 800144c:	d021      	beq.n	8001492 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f1c3 0308 	rsb	r3, r3, #8
 800145c:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800145e:	7e7b      	ldrb	r3, [r7, #25]
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9cd 2300 	strd	r2, r3, [sp]
 800146e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001470:	6a39      	ldr	r1, [r7, #32]
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f7ff fd75 	bl	8000f62 <nunavutSetUxx>
 8001478:	4603      	mov	r3, r0
 800147a:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 800147c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da02      	bge.n	800148a <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8001484:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001488:	e008      	b.n	800149c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 800148a:	7e7b      	ldrb	r3, [r7, #25]
 800148c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148e:	4413      	add	r3, r2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d009      	beq.n	80014ca <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80014ca:	f06f 0301 	mvn.w	r3, #1
 80014ce:	e089      	b.n	80015e4 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80014d6:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 80014d8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 80014ea:	2320      	movs	r3, #32
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f7ff fd5c 	bl	8000fae <nunavutGetU32>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3320      	adds	r3, #32
 8001500:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3307      	adds	r3, #7
 8001506:	f023 0307 	bic.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc3c 	bl	8000d90 <nunavutChooseMin>
 8001518:	4602      	mov	r2, r0
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4413      	add	r3, r2
 800152c:	f107 0214 	add.w	r2, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fdd5 	bl	80010e0 <uavcan_node_Health_1_0_deserialize_>
 8001536:	4603      	mov	r3, r0
 8001538:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 800153a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da02      	bge.n	8001548 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8001542:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001546:	e04d      	b.n	80015e4 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3307      	adds	r3, #7
 8001556:	f023 0307 	bic.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc14 	bl	8000d90 <nunavutChooseMin>
 8001568:	4602      	mov	r2, r0
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	f107 0210 	add.w	r2, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fe5b 	bl	800123c <uavcan_node_Mode_1_0_deserialize_>
 8001586:	4603      	mov	r3, r0
 8001588:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 800158a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da02      	bge.n	8001598 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8001592:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001596:	e025      	b.n	80015e4 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3308      	adds	r3, #8
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d307      	bcc.n	80015bc <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4413      	add	r3, r2
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	719a      	strb	r2, [r3, #6]
 80015ba:	e002      	b.n	80015c2 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3308      	adds	r3, #8
 80015c6:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3307      	adds	r3, #7
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80015d2:	6a39      	ldr	r1, [r7, #32]
 80015d4:	69f8      	ldr	r0, [r7, #28]
 80015d6:	f7ff fbdb 	bl	8000d90 <nunavutChooseMin>
 80015da:	4603      	mov	r3, r0
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800a67c 	.word	0x0800a67c

080015f0 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800160e:	f06f 0301 	mvn.w	r3, #1
 8001612:	e041      	b.n	8001698 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	2b1f      	cmp	r3, #31
 8001620:	d802      	bhi.n	8001628 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001622:	f06f 0302 	mvn.w	r3, #2
 8001626:	e037      	b.n	8001698 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3320      	adds	r3, #32
 800163e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	2b00      	cmp	r3, #0
 8001648:	d021      	beq.n	800168e <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f1c3 0308 	rsb	r3, r3, #8
 8001658:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9cd 2300 	strd	r2, r3, [sp]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	69b9      	ldr	r1, [r7, #24]
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f7ff fc77 	bl	8000f62 <nunavutSetUxx>
 8001674:	4603      	mov	r3, r0
 8001676:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8001678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da02      	bge.n	8001686 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8001680:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001684:	e008      	b.n	8001698 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80016c6:	f06f 0301 	mvn.w	r3, #1
 80016ca:	e027      	b.n	800171c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 80016d4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	69f9      	ldr	r1, [r7, #28]
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7ff fc82 	bl	8000ff4 <nunavutGetF32>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3320      	adds	r3, #32
 80016fe:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3307      	adds	r3, #7
 8001704:	f023 0307 	bic.w	r3, r3, #7
 8001708:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f7ff fb3f 	bl	8000d90 <nunavutChooseMin>
 8001712:	4603      	mov	r3, r0
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800a67c 	.word	0x0800a67c

08001728 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	@ 0x30
 800172c:	af04      	add	r7, sp, #16
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001746:	f06f 0301 	mvn.w	r3, #1
 800174a:	e041      	b.n	80017d0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	2b1f      	cmp	r3, #31
 8001758:	d802      	bhi.n	8001760 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800175a:	f06f 0302 	mvn.w	r3, #2
 800175e:	e037      	b.n	80017d0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3320      	adds	r3, #32
 8001776:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2b00      	cmp	r3, #0
 8001780:	d021      	beq.n	80017c6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f1c3 0308 	rsb	r3, r3, #8
 8001790:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9cd 2300 	strd	r2, r3, [sp]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7ff fbdb 	bl	8000f62 <nunavutSetUxx>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80017b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da02      	bge.n	80017be <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80017b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80017bc:	e008      	b.n	80017d0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80017fe:	f06f 0301 	mvn.w	r3, #1
 8001802:	e027      	b.n	8001854 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 800180c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	69f9      	ldr	r1, [r7, #28]
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f7ff fbe6 	bl	8000ff4 <nunavutGetF32>
 8001828:	eef0 7a40 	vmov.f32	s15, s0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3320      	adds	r3, #32
 8001836:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3307      	adds	r3, #7
 800183c:	f023 0307 	bic.w	r3, r3, #7
 8001840:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	6978      	ldr	r0, [r7, #20]
 8001846:	f7ff faa3 	bl	8000d90 <nunavutChooseMin>
 800184a:	4603      	mov	r3, r0
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0800a67c 	.word	0x0800a67c

08001860 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af04      	add	r7, sp, #16
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800187e:	f06f 0301 	mvn.w	r3, #1
 8001882:	e041      	b.n	8001908 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	2b1f      	cmp	r3, #31
 8001890:	d802      	bhi.n	8001898 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001892:	f06f 0302 	mvn.w	r3, #2
 8001896:	e037      	b.n	8001908 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3320      	adds	r3, #32
 80018ae:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d021      	beq.n	80018fe <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f1c3 0308 	rsb	r3, r3, #8
 80018c8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	69b9      	ldr	r1, [r7, #24]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f7ff fb3f 	bl	8000f62 <nunavutSetUxx>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80018e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da02      	bge.n	80018f6 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80018f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80018f4:	e008      	b.n	8001908 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001936:	f06f 0301 	mvn.w	r3, #1
 800193a:	e027      	b.n	800198c <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8001944:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f7ff fb4a 	bl	8000ff4 <nunavutGetF32>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3320      	adds	r3, #32
 800196e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3307      	adds	r3, #7
 8001974:	f023 0307 	bic.w	r3, r3, #7
 8001978:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	6978      	ldr	r0, [r7, #20]
 800197e:	f7ff fa07 	bl	8000d90 <nunavutChooseMin>
 8001982:	4603      	mov	r3, r0
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	0800a67c 	.word	0x0800a67c

08001998 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b090      	sub	sp, #64	@ 0x40
 800199c:	af04      	add	r7, sp, #16
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80019b6:	f06f 0301 	mvn.w	r3, #1
 80019ba:	e0e4      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80019c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	2b5f      	cmp	r3, #95	@ 0x5f
 80019c8:	d802      	bhi.n	80019d0 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80019ca:	f06f 0302 	mvn.w	r3, #2
 80019ce:	e0da      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 80019d4:	2304      	movs	r3, #4
 80019d6:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80019d8:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 80019da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019dc:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	f107 0218 	add.w	r2, r7, #24
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff fe02 	bl	80015f0 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 80019f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da02      	bge.n	8001a00 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80019fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80019fe:	e0c2      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a06:	4413      	add	r3, r2
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d025      	beq.n	8001a60 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f1c3 0308 	rsb	r3, r3, #8
 8001a22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001a26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9cd 2300 	strd	r2, r3, [sp]
 8001a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a3c:	68b8      	ldr	r0, [r7, #8]
 8001a3e:	f7ff fa90 	bl	8000f62 <nunavutSetUxx>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8001a48:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 8001a50:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001a54:	e097      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 8001a56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a5c:	4413      	add	r3, r2
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 8001a60:	2304      	movs	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f107 0214 	add.w	r2, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff fef3 	bl	8001860 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8001a80:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da02      	bge.n	8001a8e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8001a88:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8001a8c:	e07b      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a94:	4413      	add	r3, r2
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d025      	beq.n	8001aee <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f1c3 0308 	rsb	r3, r3, #8
 8001ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8001ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f7ff fa49 	bl	8000f62 <nunavutSetUxx>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 8001ad6:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da02      	bge.n	8001ae4 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 8001ade:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001ae2:	e050      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 8001ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aea:	4413      	add	r3, r2
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 8001aee:	2304      	movs	r3, #4
 8001af0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 8001af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afa:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	4413      	add	r3, r2
 8001b00:	f107 0210 	add.w	r2, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff fe0f 	bl	8001728 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 8001b10:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da02      	bge.n	8001b1e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 8001b18:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001b1c:	e033      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b24:	4413      	add	r3, r2
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d024      	beq.n	8001b7c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f1c3 0308 	rsb	r3, r3, #8
 8001b40:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8001b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9cd 2300 	strd	r2, r3, [sp]
 8001b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b5a:	68b8      	ldr	r0, [r7, #8]
 8001b5c:	f7ff fa01 	bl	8000f62 <nunavutSetUxx>
 8001b60:	4603      	mov	r3, r0
 8001b62:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8001b64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da02      	bge.n	8001b72 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8001b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b70:	e009      	b.n	8001b86 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 8001b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b78:	4413      	add	r3, r2
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3730      	adds	r7, #48	@ 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001bb6:	f06f 0301 	mvn.w	r3, #1
 8001bba:	e090      	b.n	8001cde <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001bc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8001bc4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t offset_bits = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f8d7 	bl	8000d90 <nunavutChooseMin>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8001bea:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f107 021c 	add.w	r2, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7ff fd51 	bl	80016a0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (_err6_ < 0)
 8001c04:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da02      	bge.n	8001c12 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8001c0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001c10:	e065      	b.n	8001cde <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c18:	4413      	add	r3, r2
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	3307      	adds	r3, #7
 8001c20:	f023 0307 	bic.w	r3, r3, #7
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8af 	bl	8000d90 <nunavutChooseMin>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	f107 0218 	add.w	r2, r7, #24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7ff fe60 	bl	8001910 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err7_ < 0)
 8001c56:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da02      	bge.n	8001c64 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8001c5e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001c62:	e03c      	b.n	8001cde <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6a:	4413      	add	r3, r2
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	3307      	adds	r3, #7
 8001c72:	f023 0307 	bic.w	r3, r3, #7
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f886 	bl	8000d90 <nunavutChooseMin>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f107 0214 	add.w	r2, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7ff fd9a 	bl	80017d8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err8_ < 0)
 8001caa:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8001cb2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001cb6:	e012      	b.n	8001cde <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbe:	4413      	add	r3, r2
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cd0:	f7ff f85e 	bl	8000d90 <nunavutChooseMin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3730      	adds	r7, #48	@ 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	0800a67c 	.word	0x0800a67c

08001cec <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fa9f 	bl	800223c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
      { }
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_Z13error_handlerv>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	f7fe feb1 	bl	8000a8e <Error_Handler>
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_Z9micros_64v>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	f002 fa8a 	bl	800424c <HAL_GetTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	2200      	movs	r2, #0
 8001d44:	461c      	mov	r4, r3
 8001d46:	4615      	mov	r5, r2
 8001d48:	4622      	mov	r2, r4
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}

08001d52 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 fad6 	bl	8002320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffdf 	bl	8001d52 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff9f 	bl	8001cec <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8001dc2:	687c      	ldr	r4, [r7, #4]
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffd7 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	f641 5255 	movw	r2, #7509	@ 0x1d55
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f000 fab7 	bl	800234e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ffda 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	0800a6c4 	.word	0x0800a6c4

08001e00 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e12:	f003 f8a1 	bl	8004f58 <HAL_GPIO_TogglePin>
    }
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8001e2a:	687c      	ldr	r4, [r7, #4]
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ffa3 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	f240 4265 	movw	r2, #1125	@ 0x465
 8001e40:	4619      	mov	r1, r3
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 faa1 	bl	800238a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffa6 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8001e52:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	0800a6a4 	.word	0x0800a6a4

08001e68 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001e74:	2104      	movs	r1, #4
 8001e76:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 8001e78:	f003 f86e 	bl	8004f58 <HAL_GPIO_TogglePin>
    }
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	48000c00 	.word	0x48000c00

08001e88 <send_JS>:



extern "C" {

void send_JS(float* pos, float* vel, float* eff) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	static uint8_t js_buffer[JS_msg::buffer_size];
	static CanardTransferID int_transfer_id = 0;
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = *pos,
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
			.angular_velocity = *vel,
			.angular_acceleration = *eff
	};
 8001e98:	617b      	str	r3, [r7, #20]
			.angular_velocity = *vel,
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	681b      	ldr	r3, [r3, #0]
	};
 8001e9e:	61bb      	str	r3, [r7, #24]
			.angular_acceleration = *eff
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
	};
 8001ea4:	61fb      	str	r3, [r7, #28]
    interface->send_cyphal_default_msg<JS_msg>(
 8001ea6:	4808      	ldr	r0, [pc, #32]	@ (8001ec8 <send_JS+0x40>)
 8001ea8:	f000 fa8d 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001eac:	f107 0114 	add.w	r1, r7, #20
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <send_JS+0x44>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 8001eb8:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <send_JS+0x48>)
 8001eba:	f000 fa90 	bl	80023de <_ZNK15CyphalInterface23send_cyphal_default_msgI6JS_msgEEvPNT_4TypeEPhtS5_>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000140 	.word	0x20000140
 8001ecc:	2000017c 	.word	0x2000017c
 8001ed0:	20000170 	.word	0x20000170

08001ed4 <heartbeat>:

void heartbeat() {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <heartbeat+0x3c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	603b      	str	r3, [r7, #0]
    interface->send_cyphal_default_msg<HBeat>(
 8001ee8:	480a      	ldr	r0, [pc, #40]	@ (8001f14 <heartbeat+0x40>)
 8001eea:	f000 fa6c 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001eee:	4639      	mov	r1, r7
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <heartbeat+0x44>)
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8001ef8:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <heartbeat+0x48>)
 8001efa:	f000 fa8a 	bl	8002412 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <heartbeat+0x3c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	4a02      	ldr	r2, [pc, #8]	@ (8001f10 <heartbeat+0x3c>)
 8001f06:	6013      	str	r3, [r2, #0]

}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000188 	.word	0x20000188
 8001f14:	20000140 	.word	0x20000140
 8001f18:	20000187 	.word	0x20000187
 8001f1c:	20000180 	.word	0x20000180

08001f20 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b08b      	sub	sp, #44	@ 0x2c
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <setup_cyphal+0xac>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	2105      	movs	r1, #5
 8001f34:	4826      	ldr	r0, [pc, #152]	@ (8001fd0 <setup_cyphal+0xb0>)
 8001f36:	f000 fa86 	bl	8002446 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fac0 	bl	80024c8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4821      	ldr	r0, [pc, #132]	@ (8001fd4 <setup_cyphal+0xb4>)
 8001f50:	f000 fac9 	bl	80024e6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff20 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8001f5e:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8001f62:	f006 fe7c 	bl	8008c5e <_Znwj>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461c      	mov	r4, r3
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	4919      	ldr	r1, [pc, #100]	@ (8001fd4 <setup_cyphal+0xb4>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff04 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff1b 	bl	8001db8 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <setup_cyphal+0xb8>)
 8001f84:	601c      	str	r4, [r3, #0]
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff07 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8001f90:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8001f94:	f006 fe63 	bl	8008c5e <_Znwj>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <setup_cyphal+0xb4>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff feeb 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4619      	mov	r1, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff ff36 	bl	8001e20 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <setup_cyphal+0xbc>)
 8001fb6:	601c      	str	r4, [r3, #0]
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff feee 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000148 	.word	0x20000148
 8001fd0:	200000e8 	.word	0x200000e8
 8001fd4:	20000140 	.word	0x20000140
 8001fd8:	20000168 	.word	0x20000168
 8001fdc:	2000016c 	.word	0x2000016c

08001fe0 <cyphal_loop>:

void cyphal_loop() {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    interface->loop();
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <cyphal_loop+0x18>)
 8001fe6:	f000 f9ee 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 f89b 	bl	8006128 <_ZN15CyphalInterface4loopEv>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000140 	.word	0x20000140

08001ffc <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_service = canardMakeFilterForServices(JOINT_N);
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	2105      	movs	r1, #5
 800200a:	4618      	mov	r0, r3
 800200c:	f006 fdd8 	bl	8008bc0 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	f240 4165 	movw	r1, #1125	@ 0x465
 8002018:	4618      	mov	r0, r3
 800201a:	f006 fdb1 	bl	8008b80 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter = canardConsolidateFilters(&cyphal_filter_for_service, &cyphal_filter_for_JS);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	f107 0210 	add.w	r2, r7, #16
 8002026:	f107 0118 	add.w	r1, r7, #24
 800202a:	4618      	mov	r0, r3
 800202c:	f006 fdea 	bl	8008c04 <canardConsolidateFilters>
//
//
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8002030:	2200      	movs	r2, #0
 8002032:	2105      	movs	r1, #5
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f002 fb53 	bl	80046e0 <HAL_FDCAN_ConfigTxDelayCompensation>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <cyphal_can_starter+0x52>
	  Error_Handler();
 800204a:	f7fe fd20 	bl	8000a8e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f002 fb68 	bl	8004724 <HAL_FDCAN_EnableTxDelayCompensation>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <cyphal_can_starter+0x6c>
	  Error_Handler();
 8002064:	f7fe fd13 	bl	8000a8e <Error_Handler>
	}
	HAL_FDCAN_Start(hfdcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f002 fb7c 	bl	8004766 <HAL_FDCAN_Start>
}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
      { delete this; }
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3304      	adds	r3, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	6053      	str	r3, [r2, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	6053      	str	r3, [r2, #4]
 80020d2:	6093      	str	r3, [r2, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffde 	bl	8002098 <_ZNSt14_Function_baseC1Ev>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f000 fa32 	bl	800254c <_ZNKSt8functionIFyvEEcvbEv>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
	  }
      }
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	461a      	mov	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	6053      	str	r3, [r2, #4]
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ffb3 	bl	8002098 <_ZNSt14_Function_baseC1Ev>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f000 fa17 	bl	800256c <_ZNKSt8functionIFvvEEcvbEv>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	2202      	movs	r2, #2
 800214e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
      }
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa0a 	bl	800258c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	return get();
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f9f9 	bl	800258c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800219a:	4603      	mov	r3, r0
      }
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f9f9 	bl	80025a6 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ffeb 	bl	80021a4 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1Ev>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	: _M_t()
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ffe8 	bl	80021be <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f9dc 	bl	80025c0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8002208:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9e1 	bl	80025da <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8002218:	4604      	mov	r4, r0
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9ea 	bl	80025f4 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 8002220:	4603      	mov	r3, r0
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	4620      	mov	r0, r4
 8002228:	f000 f9ef 	bl	800260a <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
      }
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}

0800223c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fc3d 	bl	8000ad0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	461a      	mov	r2, r3
 800226e:	2300      	movs	r3, #0
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	6053      	str	r3, [r2, #4]
 8002274:	6093      	str	r3, [r2, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff0d 	bl	8002098 <_ZNSt14_Function_baseC1Ev>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f000 f9d0 	bl	800262a <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8002290:	687c      	ldr	r4, [r7, #4]
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f000 f9d9 	bl	800264a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	f000 f9df 	bl	8002660 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 80022a6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 80022ac:	609a      	str	r2, [r3, #8]
	    }
	}
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd90      	pop	{r4, r7, pc}
 80022b8:	08002685 	.word	0x08002685
 80022bc:	080026a9 	.word	0x080026a9

080022c0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	6053      	str	r3, [r2, #4]
 80022d4:	6093      	str	r3, [r2, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fedd 	bl	8002098 <_ZNSt14_Function_baseC1Ev>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f000 f9fe 	bl	80026e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80022f0:	687c      	ldr	r4, [r7, #4]
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f000 fa07 	bl	8002706 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4619      	mov	r1, r3
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 fa0d 	bl	800271c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8002306:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a04      	ldr	r2, [pc, #16]	@ (800231c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 800230c:	609a      	str	r2, [r3, #8]
	}
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	08002741 	.word	0x08002741
 800231c:	0800275f 	.word	0x0800275f

08002320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fbb7 	bl	8000ab2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fd0b 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	f107 0110 	add.w	r1, r7, #16
 800236e:	2300      	movs	r3, #0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fa23 	bl	80027bc <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd0f 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fced 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	f107 0110 	add.w	r1, r7, #16
 80023aa:	2300      	movs	r3, #0
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa33 	bl	8002818 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fcf1 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return _M_get();
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa50 	bl	8002874 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80023d4:	4603      	mov	r3, r0
      }
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_ZNK15CyphalInterface23send_cyphal_default_msgI6JS_msgEEvPNT_4TypeEPhtS5_>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_cyphal_default_msg(
 80023de:	b580      	push	{r7, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af04      	add	r7, sp, #16
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	807b      	strh	r3, [r7, #2]
    typename TypeAlias::Type *obj,
    uint8_t buffer[],
    CanardPortID port,
    CanardTransferID *transfer_id
) const {
    send_cyphal<TypeAlias>(
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	23ff      	movs	r3, #255	@ 0xff
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	2304      	movs	r3, #4
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fa41 	bl	800288c <_ZNK15CyphalInterface11send_cyphalI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
        transfer_id,
        CanardPriorityNominal,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET
    );
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_ZNK15CyphalInterface23send_cyphal_default_msgI5HBeatEEvPNT_4TypeEPhtS5_>:
inline void CyphalInterface::send_cyphal_default_msg(
 8002412:	b580      	push	{r7, lr}
 8002414:	b088      	sub	sp, #32
 8002416:	af04      	add	r7, sp, #16
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	807b      	strh	r3, [r7, #2]
    send_cyphal<TypeAlias>(
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	23ff      	movs	r3, #255	@ 0xff
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	2300      	movs	r3, #0
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2304      	movs	r3, #4
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fa75 	bl	8002928 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_ZN15CyphalInterface6createI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    UtilityConfig& utilities;
public:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create(
 8002446:	b590      	push	{r4, r7, lr}
 8002448:	b08b      	sub	sp, #44	@ 0x2c
 800244a:	af02      	add	r7, sp, #8
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	61fb      	str	r3, [r7, #28]
        auto provider  = std::unique_ptr<Provider>(Provider::template create<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config));
 800245c:	7afa      	ldrb	r2, [r7, #11]
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	69f8      	ldr	r0, [r7, #28]
 8002468:	f000 faac 	bl	80029c4 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 800246c:	4602      	mov	r2, r0
 800246e:	f107 0310 	add.w	r3, r7, #16
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 faf2 	bl	8002a5e <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>
    
        std::byte* interface_ptr = *inout_buffer;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config);
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4619      	mov	r1, r3
 8002484:	200c      	movs	r0, #12
 8002486:	f7fe fb08 	bl	8000a9a <_ZnwjPv>
 800248a:	4604      	mov	r4, r0
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002490:	4619      	mov	r1, r3
 8002492:	4620      	mov	r0, r4
 8002494:	f7fe fc32 	bl	8000cfc <_ZN15CyphalInterfaceC1EhR13UtilityConfig>
 8002498:	617c      	str	r4, [r7, #20]

        interface->provider = std::move(provider);
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fb0e 	bl	8002ac0 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80024a4:	4602      	mov	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fb12 	bl	8002ad6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
        return interface;
 80024b2:	697c      	ldr	r4, [r7, #20]
    }
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fadf 	bl	8002a7c <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>
        return interface;
 80024be:	4623      	mov	r3, r4
    }
 80024c0:	4618      	mov	r0, r3
 80024c2:	3724      	adds	r7, #36	@ 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb20 	bl	8002b1c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 80024e6:	b590      	push	{r4, r7, lr}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80024f0:	687c      	ldr	r4, [r7, #4]
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	f000 fb2a 	bl	8002b4c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4619      	mov	r1, r3
 80024fc:	4620      	mov	r0, r4
 80024fe:	f000 fb30 	bl	8002b62 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8002502:	687b      	ldr	r3, [r7, #4]
      }
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
      { }
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	0800a724 	.word	0x0800a724

0800252c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
      { }
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffe9 	bl	800250c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800253a:	210c      	movs	r1, #12
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f006 fb8c 	bl	8008c5a <_ZdlPvj>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fb13 	bl	8000b82 <_ZNKSt14_Function_base8_M_emptyEv>
 800255c:	4603      	mov	r3, r0
 800255e:	f083 0301 	eor.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fb03 	bl	8000b82 <_ZNKSt14_Function_base8_M_emptyEv>
 800257c:	4603      	mov	r3, r0
 800257e:	f083 0301 	eor.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fb02 	bl	8002ba0 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800259c:	4603      	mov	r3, r0
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fb03 	bl	8002bbc <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fb06 	bl	8002bdc <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fb06 	bl	8002bf6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x18>
 800261a:	2140      	movs	r1, #64	@ 0x40
 800261c:	4618      	mov	r0, r3
 800261e:	f006 fb1c 	bl	8008c5a <_ZdlPvj>
      }
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f7ff ffed 	bl	800264a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002670:	4603      	mov	r3, r0
 8002672:	4622      	mov	r2, r4
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 faca 	bl	8002c10 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fad7 	bl	8002c40 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002692:	4603      	mov	r3, r0
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fae3 	bl	8002c60 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
      }
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d109      	bne.n	80026d0 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80026bc:	68b8      	ldr	r0, [r7, #8]
 80026be:	f000 fabf 	bl	8002c40 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80026c2:	4604      	mov	r4, r0
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fade 	bl	8002c86 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80026ca:	4603      	mov	r3, r0
 80026cc:	601c      	str	r4, [r3, #0]
	    break;
 80026ce:	e005      	b.n	80026dc <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fae2 	bl	8002ca0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80026dc:	2300      	movs	r3, #0
      }
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}

080026e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f7ff ffed 	bl	8002706 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800272c:	4603      	mov	r3, r0
 800272e:	4622      	mov	r2, r4
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 faee 	bl	8002d14 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}

08002740 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fafb 	bl	8002d44 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800274e:	4603      	mov	r3, r0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fb07 	bl	8002d64 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8002756:	bf00      	nop
      }
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800275e:	b590      	push	{r4, r7, lr}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d109      	bne.n	8002786 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002772:	68b8      	ldr	r0, [r7, #8]
 8002774:	f000 fae6 	bl	8002d44 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002778:	4604      	mov	r4, r0
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb02 	bl	8002d84 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8002780:	4603      	mov	r3, r0
 8002782:	601c      	str	r4, [r3, #0]
	    break;
 8002784:	e005      	b.n	8002792 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	461a      	mov	r2, r3
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fb05 	bl	8002d9c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8002792:	2300      	movs	r3, #0
      }
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	0800a6e4 	.word	0x0800a6e4

080027bc <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	460b      	mov	r3, r1
 80027cc:	80fb      	strh	r3, [r7, #6]
 80027ce:	4613      	mov	r3, r2
 80027d0:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface) {
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ffe1 	bl	800279c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3308      	adds	r3, #8
 80027e4:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f006 fc7d 	bl	80090ea <memset>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fac0 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80027fe:	797a      	ldrb	r2, [r7, #5]
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4619      	mov	r1, r3
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fb03 	bl	8002e10 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	0800a6d4 	.word	0x0800a6d4

08002818 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	460b      	mov	r3, r1
 8002828:	80fb      	strh	r3, [r7, #6]
 800282a:	4613      	mov	r3, r2
 800282c:	717b      	strb	r3, [r7, #5]
    ): interface(interface) {
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ffb3 	bl	800279c <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8002836:	4a0e      	ldr	r2, [pc, #56]	@ (8002870 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x58>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3308      	adds	r3, #8
 8002840:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f006 fc4f 	bl	80090ea <memset>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fa92 	bl	8001d7e <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 800285a:	797a      	ldrb	r2, [r7, #5]
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	4619      	mov	r1, r3
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 faf3 	bl	8002e4c <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	0800a6b4 	.word	0x0800a6b4

08002874 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb03 	bl	8002e88 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZNK15CyphalInterface11send_cyphalI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800289a:	230c      	movs	r3, #12
 800289c:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	461a      	mov	r2, r3
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	f7ff f876 	bl	8001998 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	09db      	lsrs	r3, r3, #7
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <_ZNK15CyphalInterface11send_cyphalI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	3310      	adds	r3, #16
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 faee 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80028c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028c8:	753b      	strb	r3, [r7, #20]
 80028ca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80028ce:	757b      	strb	r3, [r7, #21]
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	82fb      	strh	r3, [r7, #22]
 80028d4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80028d8:	763b      	strb	r3, [r7, #24]
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 faf1 	bl	8002ecc <_ZNKSt8functionIFyvEEclEv>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
    push(
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <_ZNK15CyphalInterface11send_cyphalI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 80028f0:	1854      	adds	r4, r2, r1
 80028f2:	f143 0500 	adc.w	r5, r3, #0
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4622      	mov	r2, r4
 8002906:	462b      	mov	r3, r5
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f003 fb9f 	bl	800604c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	701a      	strb	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bdb0      	pop	{r4, r5, r7, pc}
 8002922:	bf00      	nop
 8002924:	000f4240 	.word	0x000f4240

08002928 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh>:
inline void CyphalInterface::send_cyphal(
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af04      	add	r7, sp, #16
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8002936:	2307      	movs	r3, #7
 8002938:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800293a:	f107 031c 	add.w	r3, r7, #28
 800293e:	461a      	mov	r2, r3
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68b8      	ldr	r0, [r7, #8]
 8002944:	f7fe fcc8 	bl	80012d8 <uavcan_node_Heartbeat_1_0_serialize_>
 8002948:	4603      	mov	r3, r0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	09db      	lsrs	r3, r3, #7
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x38>
        utilities.error_handler();
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	3310      	adds	r3, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f000 faa0 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8002960:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002964:	753b      	strb	r3, [r7, #20]
 8002966:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800296a:	757b      	strb	r3, [r7, #21]
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	82fb      	strh	r3, [r7, #22]
 8002970:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002974:	763b      	strb	r3, [r7, #24]
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + DEFAULT_TIMEOUT_MICROS,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 faa3 	bl	8002ecc <_ZNKSt8functionIFyvEEclEv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
    push(
 800298a:	490d      	ldr	r1, [pc, #52]	@ (80029c0 <_ZNK15CyphalInterface11send_cyphalI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindh+0x98>)
 800298c:	1854      	adds	r4, r2, r1
 800298e:	f143 0500 	adc.w	r5, r3, #0
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	9202      	str	r2, [sp, #8]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4622      	mov	r2, r4
 80029a2:	462b      	mov	r3, r5
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f003 fb51 	bl	800604c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	701a      	strb	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	bf00      	nop
 80029c0:	000f4240 	.word	0x000f4240

080029c4 <_ZN5G4CAN6createI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create(
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem), args..., utilities);
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4619      	mov	r1, r3
 80029de:	2008      	movs	r0, #8
 80029e0:	f7fe f85b 	bl	8000a9a <_ZnwjPv>
 80029e4:	4604      	mov	r4, r0
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fe f9b5 	bl	8000d64 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 80029fa:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3308      	adds	r3, #8
 8002a00:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len / 2, utilities);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	4619      	mov	r1, r3
 8002a06:	2044      	movs	r0, #68	@ 0x44
 8002a08:	f7fe f847 	bl	8000a9a <_ZnwjPv>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	085a      	lsrs	r2, r3, #1
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe f988 	bl	8000d2c <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 8002a1c:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fa6b 	bl	8002f00 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]
        return ptr;
 8002a34:	693b      	ldr	r3, [r7, #16]
    }
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}

08002a3e <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fa9a 	bl	8002f88 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ffe6 	bl	8002a3e <_ZNSt15__uniq_ptr_dataI5G4CANSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fa92 	bl	8002fb0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8002a8c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa97 	bl	8002fca <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 faa0 	bl	8002fe4 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f000 faa5 	bl	8002ffa <_ZNKSt14default_deleteI5G4CANEclEPS0_>
	__ptr = pointer();
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
      }
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <_ZSt4moveIRSt10unique_ptrI5G4CANSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEaSI5G4CANS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8002ae0:	6838      	ldr	r0, [r7, #0]
 8002ae2:	f000 faae 	bl	8003042 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa95 	bl	800301a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8002af0:	6838      	ldr	r0, [r7, #0]
 8002af2:	f000 fa6a 	bl	8002fca <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 faaf 	bl	800305c <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002afe:	4602      	mov	r2, r0
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fab3 	bl	8003072 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fd64 	bl	80025da <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8002b12:	687b      	ldr	r3, [r7, #4]
	}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4622      	mov	r2, r4
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 faa8 	bl	800308a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fab3 	bl	80030a8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}

08002b4c <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f000 faa6 	bl	80030be <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8002b72:	4602      	mov	r2, r0
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 faaa 	bl	80030d4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fac2 	bl	8003110 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f8ab 	bl	8001cec <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8002b96:	687b      	ldr	r3, [r7, #4]
      }
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fac7 	bl	800313e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fac7 	bl	8003158 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 facf 	bl	8003170 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fad0 	bl	800318c <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 facf 	bl	80031a4 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7fd ff87 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	2004      	movs	r0, #4
 8002c28:	f7fd ff37 	bl	8000a9a <_ZnwjPv>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f7ff fd0b 	bl	800264a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c34:	4603      	mov	r3, r0
 8002c36:	6023      	str	r3, [r4, #0]
	  }
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fab7 	bl	80031bc <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8002c4e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fabf 	bl	80031d4 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8002c56:	4603      	mov	r3, r0
	}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fabe 	bl	80031ea <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4619      	mov	r1, r3
 8002c72:	4620      	mov	r0, r4
 8002c74:	f000 fac4 	bl	8003200 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}

08002c86 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd ff4e 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d82a      	bhi.n	8002d0a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8002cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cdb 	.word	0x08002cdb
 8002cc4:	08002cef 	.word	0x08002cef
 8002cc8:	08002d01 	.word	0x08002d01
	      __dest._M_access<const type_info*>() = nullptr;
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 faa9 	bl	8003224 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
	      break;
 8002cd8:	e017      	b.n	8002d0a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002cda:	68b8      	ldr	r0, [r7, #8]
 8002cdc:	f7ff ffb0 	bl	8002c40 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff ffcf 	bl	8002c86 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	601c      	str	r4, [r3, #0]
	      break;
 8002cec:	e00d      	b.n	8002d0a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002cee:	68b8      	ldr	r0, [r7, #8]
 8002cf0:	f7ff ffa6 	bl	8002c40 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002cf4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fa9f 	bl	800323c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8002cfe:	e004      	b.n	8002d0a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002d00:	4621      	mov	r1, r4
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 faac 	bl	8003260 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002d08:	bf00      	nop
	  return false;
 8002d0a:	2300      	movs	r3, #0
	}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7fd ff05 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	2004      	movs	r0, #4
 8002d2c:	f7fd feb5 	bl	8000a9a <_ZnwjPv>
 8002d30:	4604      	mov	r4, r0
 8002d32:	68b8      	ldr	r0, [r7, #8]
 8002d34:	f7ff fce7 	bl	8002706 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6023      	str	r3, [r4, #0]
	  }
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa93 	bl	8003278 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8002d52:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fa9b 	bl	8003290 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8002d5a:	4603      	mov	r3, r0
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa9a 	bl	80032a6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4619      	mov	r1, r3
 8002d76:	4620      	mov	r0, r4
 8002d78:	f000 faa0 	bl	80032bc <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}

08002d84 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7fd fecf 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d82a      	bhi.n	8002e06 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd7 	.word	0x08002dd7
 8002dc0:	08002deb 	.word	0x08002deb
 8002dc4:	08002dfd 	.word	0x08002dfd
	      __dest._M_access<const type_info*>() = nullptr;
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa2b 	bl	8003224 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
	      break;
 8002dd4:	e017      	b.n	8002e06 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002dd6:	68b8      	ldr	r0, [r7, #8]
 8002dd8:	f7ff ffb4 	bl	8002d44 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ffd0 	bl	8002d84 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8002de4:	4603      	mov	r3, r0
 8002de6:	601c      	str	r4, [r3, #0]
	      break;
 8002de8:	e00d      	b.n	8002e06 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f7ff ffaa 	bl	8002d44 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002df0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002df2:	4619      	mov	r1, r3
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fa70 	bl	80032da <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8002dfa:	e004      	b.n	8002e06 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa7d 	bl	80032fe <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002e04:	bf00      	nop
	  return false;
 8002e06:	2300      	movs	r3, #0
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}

08002e10 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff faca 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3308      	adds	r3, #8
 8002e36:	787a      	ldrb	r2, [r7, #1]
 8002e38:	8879      	ldrh	r1, [r7, #2]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	220c      	movs	r2, #12
 8002e40:	f003 f93e 	bl	80060c0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff faac 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3308      	adds	r3, #8
 8002e72:	787a      	ldrb	r2, [r7, #1]
 8002e74:	8879      	ldrh	r1, [r7, #2]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	f003 f920 	bl	80060c0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fe69 	bl	8000b82 <_ZNKSt14_Function_base8_M_emptyEv>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8002eb6:	f005 fee3 	bl	8008c80 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4798      	blx	r3
 8002ec4:	bf00      	nop
      }
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fe53 	bl	8000b82 <_ZNKSt14_Function_base8_M_emptyEv>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8002ee2:	f005 fecd 	bl	8008c80 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
      }
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b08e      	sub	sp, #56	@ 0x38
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002f08:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8002f10:	481a      	ldr	r0, [pc, #104]	@ (8002f7c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8002f12:	f7ff f92a 	bl	800216a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	3310      	adds	r3, #16
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffbc 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8002f28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa01 	bl	8003336 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8002f34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4810      	ldr	r0, [pc, #64]	@ (8002f7c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8002f3c:	f000 fa2c 	bl	8003398 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8002f40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fa05 	bl	8003354 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 8002f4a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f80 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8002f50:	490c      	ldr	r1, [pc, #48]	@ (8002f84 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f005 fb7e 	bl	8008654 <canardInit>
 8002f58:	3420      	adds	r4, #32
 8002f5a:	463d      	mov	r5, r7
 8002f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8002f72:	bf00      	nop
 8002f74:	3738      	adds	r7, #56	@ 0x38
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001d4 	.word	0x200001d4
 8002f80:	08000c75 	.word	0x08000c75
 8002f84:	08000c31 	.word	0x08000c31

08002f88 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa22 	bl	80033de <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8002f9a:	683c      	ldr	r4, [r7, #0]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f807 	bl	8002fb0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	601c      	str	r4, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa1c 	bl	80033f8 <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa1c 	bl	8003412 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_ZSt4moveIRP5G4CANEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_ZNKSt14default_deleteI5G4CANEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <_ZNKSt14default_deleteI5G4CANEclEPS0_+0x18>
 800300a:	2144      	movs	r1, #68	@ 0x44
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fe24 	bl	8008c5a <_ZdlPvj>
      }
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 800301a:	b590      	push	{r4, r7, lr}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8003024:	687c      	ldr	r4, [r7, #4]
 8003026:	463b      	mov	r3, r7
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fae3 	bl	80025f4 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 800302e:	4603      	mov	r3, r0
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4620      	mov	r0, r4
 8003036:	f000 f9f9 	bl	800342c <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>
      }
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}

08003042 <_ZNSt10unique_ptrI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa0d 	bl	800346c <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <_ZSt7forwardISt14default_deleteI5G4CANEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZNSt14default_deleteI19AbstractCANProviderEC1I5G4CANvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa0a 	bl	80034b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	{ }
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe0c 	bl	8001d08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1d1a      	adds	r2, r3, #4
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f000 f9f1 	bl	80034e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
      }
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f9f3 	bl	800350c <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	1d1a      	adds	r2, r3, #4
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f000 f9d6 	bl	80034e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f9fe 	bl	800354a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800314e:	4603      	mov	r3, r0
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f9fe 	bl	8003562 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9ef 	bl	8003578 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 800319a:	4603      	mov	r3, r0
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9f0 	bl	8003592 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fd fcbe 	bl	8000b46 <_ZNKSt9_Any_data9_M_accessEv>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	7138      	strb	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f7ff ffed 	bl	80031ea <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003210:	4603      	mov	r3, r0
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4798      	blx	r3
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fc7f 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	f000 f9af 	bl	80035aa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800324c:	4603      	mov	r3, r0
 800324e:	4622      	mov	r2, r4
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9b4 	bl	80035c0 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}

08003260 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9c1 	bl	80035f2 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fc60 	bl	8000b46 <_ZNKSt9_Any_data9_M_accessEv>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	7138      	strb	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	f7ff ffed 	bl	80032a6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80032cc:	4603      	mov	r3, r0
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4798      	blx	r3
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f000 f990 	bl	800360a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4622      	mov	r2, r4
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f995 	bl	8003620 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f9a2 	bl	8003652 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f99f 	bl	800366a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ffe6 	bl	8003316 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f997 	bl	8003692 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003364:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f99c 	bl	80036ac <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8003374:	4604      	mov	r4, r0
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f9a5 	bl	80036c6 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800337c:	4603      	mov	r3, r0
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4619      	mov	r1, r3
 8003382:	4620      	mov	r0, r4
 8003384:	f000 f9aa 	bl	80036dc <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
      }
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}

08003398 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	f000 f9bf 	bl	8003726 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f9a6 	bl	80036fe <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f000 f97a 	bl	80036ac <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f9cd 	bl	800375a <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f9d1 	bl	8003770 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9b6 	bl	8003740 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 80033d4:	687b      	ldr	r3, [r7, #4]
	}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <_ZNSt5tupleIJP5G4CANSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9cd 	bl	8003788 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZSt3getILj0EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f9d0 	bl	80037a8 <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f9cf 	bl	80037c0 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003422:	4603      	mov	r3, r0
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff f8c2 	bl	80025c0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800343c:	4603      	mov	r3, r0
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8003442:	683c      	ldr	r4, [r7, #0]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff f8bb 	bl	80025c0 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800344a:	4603      	mov	r3, r0
 800344c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fbce 	bl	8002bf6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 800345a:	4603      	mov	r3, r0
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f8d3 	bl	800260a <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
      }
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fd9b 	bl	8002fb0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 800347a:	4603      	mov	r3, r0
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fd95 	bl	8002fb0 <_ZNSt15__uniq_ptr_implI5G4CANSt14default_deleteIS0_EE6_M_ptrEv>
 8003486:	4603      	mov	r3, r0
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
	return __p;
 800348c:	68fb      	ldr	r3, [r7, #12]
      }
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fea8 	bl	80021f8 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80034b2:	b590      	push	{r4, r7, lr}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80034c2:	2010      	movs	r0, #16
 80034c4:	f005 fbcb 	bl	8008c5e <_Znwj>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461c      	mov	r4, r3
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 f982 	bl	80037d8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	601c      	str	r4, [r3, #0]
	}
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}

080034e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]
      }
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f974 	bl	8003804 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800351c:	4603      	mov	r3, r0
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003522:	6838      	ldr	r0, [r7, #0]
 8003524:	f000 f96e 	bl	8003804 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8003528:	4603      	mov	r3, r0
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f965 	bl	8003804 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800353a:	4603      	mov	r3, r0
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	601a      	str	r2, [r3, #0]
    }
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f961 	bl	800381a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003558:	4603      	mov	r3, r0
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f956 	bl	8003834 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8003588:	4603      	mov	r3, r0
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f955 	bl	800384a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7fd faaf 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4619      	mov	r1, r3
 80035d6:	2004      	movs	r0, #4
 80035d8:	f7fd fa5f 	bl	8000a9a <_ZnwjPv>
 80035dc:	4604      	mov	r4, r0
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f7ff ffe3 	bl	80035aa <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80035e4:	4603      	mov	r3, r0
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6023      	str	r3, [r4, #0]
	  }
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fa98 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8003600:	4603      	mov	r3, r0
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7fd fa7f 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8003632:	4603      	mov	r3, r0
 8003634:	4619      	mov	r1, r3
 8003636:	2004      	movs	r0, #4
 8003638:	f7fd fa2f 	bl	8000a9a <_ZnwjPv>
 800363c:	4604      	mov	r4, r0
 800363e:	68b8      	ldr	r0, [r7, #8]
 8003640:	f7ff ffe3 	bl	800360a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003644:	4603      	mov	r3, r0
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6023      	str	r3, [r4, #0]
	  }
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}

08003652 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fa68 	bl	8000b30 <_ZNSt9_Any_data9_M_accessEv>
 8003660:	4603      	mov	r3, r0
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800366a:	b590      	push	{r4, r7, lr}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f8f3 	bl	8003862 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800367c:	683c      	ldr	r4, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f807 	bl	8003692 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003684:	4603      	mov	r3, r0
 8003686:	601c      	str	r4, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}

08003692 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f8ed 	bl	800387c <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f8ed 	bl	8003896 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80036bc:	4603      	mov	r3, r0
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	320c      	adds	r2, #12
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	4790      	blx	r2
      }
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 80036fe:	b590      	push	{r4, r7, lr}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 8003708:	687c      	ldr	r4, [r7, #4]
 800370a:	463b      	mov	r3, r7
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f8cf 	bl	80038b0 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8003712:	4603      	mov	r3, r0
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4620      	mov	r0, r4
 800371a:	f000 f8d4 	bl	80038c6 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bd90      	pop	{r4, r7, pc}

08003726 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f8e8 	bl	8003906 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8003736:	4603      	mov	r3, r0
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f8f0 	bl	8003930 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8003750:	4603      	mov	r3, r0
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8da 	bl	800394a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f8e2 	bl	8003962 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZSt12__get_helperILj0EP5G4CANJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8e4 	bl	800397e <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_ZSt3getILj1EJP5G4CANSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8e5 	bl	8003998 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f8e3 	bl	80039b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80037ea:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800a688 	.word	0x0800a688

08003804 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f8d9 	bl	80039dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 800382a:	4603      	mov	r3, r0
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8cd 	bl	80039f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8003858:	4603      	mov	r3, r0
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f8cb 	bl	8003a08 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f8ce 	bl	8003a28 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8cd 	bl	8003a40 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80038c6:	b590      	push	{r4, r7, lr}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8c1 	bl	8003a58 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80038dc:	683c      	ldr	r4, [r7, #0]
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8ba 	bl	8003a58 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80038e4:	4603      	mov	r3, r0
 80038e6:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f81e 	bl	8003930 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f8ba 	bl	8003a72 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}

08003906 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff febf 	bl	8003692 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003914:	4603      	mov	r3, r0
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff feb9 	bl	8003692 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8003920:	4603      	mov	r3, r0
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	return __p;
 8003926:	68fb      	ldr	r3, [r7, #12]
      }
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f8aa 	bl	8003a94 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003940:	4603      	mov	r3, r0
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEEC1Ev>:
      _Tuple_impl()
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8aa 	bl	8003aac <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNSt10_Head_baseILj0EP5G4CANLb0EEC1Ev>:
      constexpr _Head_base()
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZNSt11_Tuple_implILj0EJP5G4CANSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f89a 	bl	8003ac2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>
 800398e:	4603      	mov	r3, r0
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZSt12__get_helperILj1ESt14default_deleteI5G4CANEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f899 	bl	8003ad8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80039b8:	4a07      	ldr	r2, [pc, #28]	@ (80039d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	0800a724 	.word	0x0800a724

080039dc <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f86d 	bl	8003af0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f875 	bl	8003b08 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f877 	bl	8003b24 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f878 	bl	8003b3e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f877 	bl	8003b56 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	320c      	adds	r2, #12
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4790      	blx	r2
      }
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f867 	bl	8003b70 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EEC1Ev>:
      constexpr _Head_base()
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_ZNSt10_Head_baseILj0EP5G4CANLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5G4CANEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f851 	bl	8003b88 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f850 	bl	8003b9e <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f840 	bl	8003bb4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f83f 	bl	8003bca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f83e 	bl	8003be2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f83e 	bl	8003bfa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_ZNSt10_Head_baseILj1ESt14default_deleteI5G4CANELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f81d 	bl	8003c12 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f81c 	bl	8003c28 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f81d 	bl	8003c42 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f810 	bl	8003c58 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	4a05      	ldr	r2, [pc, #20]	@ (8003c90 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fc43 	bl	800250c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0800a688 	.word	0x0800a688

08003c94 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe7 	bl	8003c70 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f004 ffd8 	bl	8008c5a <_ZdlPvj>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc ff7c 	bl	8000bbe <_ZNSt8functionIFvvEED1Ev>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc ff6b 	bl	8000ba4 <_ZNSt8functionIFyvEED1Ev>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_Z41__static_initialization_and_destruction_0ii>:

}
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	@ 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d122      	bne.n	8003d2e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d11d      	bne.n	8003d2e <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	4917      	ldr	r1, [pc, #92]	@ (8003d54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fab1 	bl	8002260 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8003cfe:	f107 0318 	add.w	r3, r7, #24
 8003d02:	4915      	ldr	r1, [pc, #84]	@ (8003d58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fadb 	bl	80022c0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8003d0a:	f107 0218 	add.w	r2, r7, #24
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	4811      	ldr	r0, [pc, #68]	@ (8003d5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003d16:	f7fc ff5f 	bl	8000bd8 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8003d1a:	f107 0318 	add.w	r3, r7, #24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc ff4d 	bl	8000bbe <_ZNSt8functionIFvvEED1Ev>
 8003d24:	f107 0308 	add.w	r3, r7, #8
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc ff3b 	bl	8000ba4 <_ZNSt8functionIFyvEED1Ev>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d105      	bne.n	8003d4a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003d3e:	4807      	ldr	r0, [pc, #28]	@ (8003d5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003d40:	f7ff ffb8 	bl	8003cb4 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8003d44:	4806      	ldr	r0, [pc, #24]	@ (8003d60 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d46:	f7fe f82a 	bl	8001d9e <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8003d4a:	bf00      	nop
 8003d4c:	3728      	adds	r7, #40	@ 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	08001d31 	.word	0x08001d31
 8003d58:	08001d25 	.word	0x08001d25
 8003d5c:	20000148 	.word	0x20000148
 8003d60:	20000140 	.word	0x20000140

08003d64 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68dc      	ldr	r4, [r3, #12]
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d006      	beq.n	8003d82 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8003d74:	4620      	mov	r0, r4
 8003d76:	f7ff fb8e 	bl	8003496 <_ZN15CyphalInterfaceD1Ev>
 8003d7a:	210c      	movs	r1, #12
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f004 ff6c 	bl	8008c5a <_ZdlPvj>
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}

08003d8a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
      { delete this; }
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff7b 	bl	8003c94 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8003db0:	2300      	movs	r3, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:

    void accept(CanardRxTransfer* transfer) {
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
        Type object;
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe faf9 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f000 f82b 	bl	8003e36 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f107 010c 	add.w	r1, r7, #12
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
    }
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
        interface->cyphal_deserialize_transfer<T>(&object, transfer);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fadb 	bl	80023c6 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	f000 f82d 	bl	8003e76 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3304      	adds	r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f107 0108 	add.w	r1, r7, #8
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    }
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
        buffer
    );
}

template <typename TypeAlias>
inline void CyphalInterface::cyphal_deserialize_transfer(
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8003e42:	230c      	movs	r3, #12
 8003e44:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f107 0214 	add.w	r2, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68b8      	ldr	r0, [r7, #8]
 8003e52:	f7fd fe9d 	bl	8001b90 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8003e56:	4603      	mov	r3, r0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	09db      	lsrs	r3, r3, #7
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <_ZNK15CyphalInterface27cyphal_deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	3310      	adds	r3, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f819 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::cyphal_deserialize_transfer(
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 8003e82:	230c      	movs	r3, #12
 8003e84:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj,(uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f107 0214 	add.w	r2, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68b8      	ldr	r0, [r7, #8]
 8003e92:	f7fd fb07 	bl	80014a4 <uavcan_node_Heartbeat_1_0_deserialize_>
 8003e96:	4603      	mov	r3, r0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	09db      	lsrs	r3, r3, #7
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <_ZNK15CyphalInterface27cyphal_deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe fff9 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_GLOBAL__sub_I_buffer>:
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7ff ff0a 	bl	8003cd8 <_Z41__static_initialization_and_destruction_0ii>
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_GLOBAL__sub_D_buffer>:
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7ff ff02 	bl	8003cd8 <_Z41__static_initialization_and_destruction_0ii>
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_MspInit+0x44>)
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f1c <HAL_MspInit+0x44>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eea:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_MspInit+0x44>)
 8003eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_MspInit+0x44>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <HAL_MspInit+0x44>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_MspInit+0x44>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f0e:	f001 f8e1 	bl	80050d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000

08003f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <NMI_Handler+0x4>

08003f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <HardFault_Handler+0x4>

08003f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <MemManage_Handler+0x4>

08003f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <BusFault_Handler+0x4>

08003f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <UsageFault_Handler+0x4>

08003f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f76:	f000 f957 	bl	8004228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  return 1;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_kill>:

int _kill(int pid, int sig)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f98:	f005 f94a 	bl	8009230 <__errno>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2216      	movs	r2, #22
 8003fa0:	601a      	str	r2, [r3, #0]
  return -1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_exit>:

void _exit (int status)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffe7 	bl	8003f8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <_exit+0x12>

08003fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e00a      	b.n	8003fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fd6:	f3af 8000 	nop.w
 8003fda:	4601      	mov	r1, r0
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	60ba      	str	r2, [r7, #8]
 8003fe2:	b2ca      	uxtb	r2, r1
 8003fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	dbf0      	blt.n	8003fd6 <_read+0x12>
  }

  return len;
 8003ff4:	687b      	ldr	r3, [r7, #4]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e009      	b.n	8004024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	60ba      	str	r2, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3301      	adds	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	dbf1      	blt.n	8004010 <_write+0x12>
  }
  return len;
 800402c:	687b      	ldr	r3, [r7, #4]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_close>:

int _close(int file)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800405e:	605a      	str	r2, [r3, #4]
  return 0;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_isatty>:

int _isatty(int file)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040a8:	4a14      	ldr	r2, [pc, #80]	@ (80040fc <_sbrk+0x5c>)
 80040aa:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <_sbrk+0x60>)
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <_sbrk+0x64>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <_sbrk+0x64>)
 80040be:	4a12      	ldr	r2, [pc, #72]	@ (8004108 <_sbrk+0x68>)
 80040c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <_sbrk+0x64>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d207      	bcs.n	80040e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040d0:	f005 f8ae 	bl	8009230 <__errno>
 80040d4:	4603      	mov	r3, r0
 80040d6:	220c      	movs	r2, #12
 80040d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e009      	b.n	80040f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040e0:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <_sbrk+0x64>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <_sbrk+0x64>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <_sbrk+0x64>)
 80040f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20020000 	.word	0x20020000
 8004100:	00000400 	.word	0x00000400
 8004104:	2000018c 	.word	0x2000018c
 8004108:	20000328 	.word	0x20000328

0800410c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <SystemInit+0x20>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	4a05      	ldr	r2, [pc, #20]	@ (800412c <SystemInit+0x20>)
 8004118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800411c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004130:	480d      	ldr	r0, [pc, #52]	@ (8004168 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004132:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004134:	f7ff ffea 	bl	800410c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004138:	480c      	ldr	r0, [pc, #48]	@ (800416c <LoopForever+0x6>)
  ldr r1, =_edata
 800413a:	490d      	ldr	r1, [pc, #52]	@ (8004170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800413c:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <LoopForever+0xe>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004140:	e002      	b.n	8004148 <LoopCopyDataInit>

08004142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004146:	3304      	adds	r3, #4

08004148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800414a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800414c:	d3f9      	bcc.n	8004142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414e:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004150:	4c0a      	ldr	r4, [pc, #40]	@ (800417c <LoopForever+0x16>)
  movs r3, #0
 8004152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004154:	e001      	b.n	800415a <LoopFillZerobss>

08004156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004158:	3204      	adds	r2, #4

0800415a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800415a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800415c:	d3fb      	bcc.n	8004156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800415e:	f005 f86d 	bl	800923c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004162:	f7fc fbc9 	bl	80008f8 <main>

08004166 <LoopForever>:

LoopForever:
    b LoopForever
 8004166:	e7fe      	b.n	8004166 <LoopForever>
  ldr   r0, =_estack
 8004168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800416c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004170:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004174:	0800adcc 	.word	0x0800adcc
  ldr r2, =_sbss
 8004178:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800417c:	20000328 	.word	0x20000328

08004180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004180:	e7fe      	b.n	8004180 <ADC1_2_IRQHandler>

08004182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800418c:	2003      	movs	r0, #3
 800418e:	f000 f91b 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004192:	200f      	movs	r0, #15
 8004194:	f000 f80e 	bl	80041b4 <HAL_InitTick>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	71fb      	strb	r3, [r7, #7]
 80041a2:	e001      	b.n	80041a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041a4:	f7ff fe98 	bl	8003ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041a8:	79fb      	ldrb	r3, [r7, #7]

}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80041c0:	4b16      	ldr	r3, [pc, #88]	@ (800421c <HAL_InitTick+0x68>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d022      	beq.n	800420e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041c8:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <HAL_InitTick+0x6c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_InitTick+0x68>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80041d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f918 	bl	8004412 <HAL_SYSTICK_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d809      	bhi.n	8004202 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ee:	2200      	movs	r2, #0
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	f000 f8f2 	bl	80043de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004224 <HAL_InitTick+0x70>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e007      	b.n	8004212 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e004      	b.n	8004212 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e001      	b.n	8004212 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000008 	.word	0x20000008
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_IncTick+0x1c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_IncTick+0x20>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4413      	add	r3, r2
 8004236:	4a03      	ldr	r2, [pc, #12]	@ (8004244 <HAL_IncTick+0x1c>)
 8004238:	6013      	str	r3, [r2, #0]
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20000190 	.word	0x20000190
 8004248:	20000008 	.word	0x20000008

0800424c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return uwTick;
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <HAL_GetTick+0x14>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000190 	.word	0x20000190

08004264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800428c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004296:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60d3      	str	r3, [r2, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db0a      	blt.n	80042f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	490c      	ldr	r1, [pc, #48]	@ (8004314 <__NVIC_SetPriority+0x4c>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f0:	e00a      	b.n	8004308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4908      	ldr	r1, [pc, #32]	@ (8004318 <__NVIC_SetPriority+0x50>)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3b04      	subs	r3, #4
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	440b      	add	r3, r1
 8004306:	761a      	strb	r2, [r3, #24]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf28      	it	cs
 800433a:	2304      	movcs	r3, #4
 800433c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	2b06      	cmp	r3, #6
 8004344:	d902      	bls.n	800434c <NVIC_EncodePriority+0x30>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3b03      	subs	r3, #3
 800434a:	e000      	b.n	800434e <NVIC_EncodePriority+0x32>
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	401a      	ands	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004364:	f04f 31ff 	mov.w	r1, #4294967295
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43d9      	mvns	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	4313      	orrs	r3, r2
         );
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	@ 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004394:	d301      	bcc.n	800439a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <SysTick_Config+0x40>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a2:	210f      	movs	r1, #15
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f7ff ff8e 	bl	80042c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <SysTick_Config+0x40>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b2:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <SysTick_Config+0x40>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff47 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043ec:	f7ff ff5e 	bl	80042ac <__NVIC_GetPriorityGrouping>
 80043f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f7ff ff90 	bl	800431c <NVIC_EncodePriority>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff5f 	bl	80042c8 <__NVIC_SetPriority>
}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffb2 	bl	8004384 <SysTick_Config>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e147      	b.n	80046ce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc f988 	bl	8000768 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0210 	bic.w	r2, r2, #16
 8004466:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004468:	f7ff fef0 	bl	800424c <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800446e:	e012      	b.n	8004496 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004470:	f7ff feec 	bl	800424c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b0a      	cmp	r3, #10
 800447c:	d90b      	bls.n	8004496 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e11b      	b.n	80046ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d0e5      	beq.n	8004470 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b4:	f7ff feca 	bl	800424c <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044ba:	e012      	b.n	80044e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044bc:	f7ff fec6 	bl	800424c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d90b      	bls.n	80044e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0f5      	b.n	80046ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0e5      	beq.n	80044bc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0202 	orr.w	r2, r2, #2
 80044fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a74      	ldr	r2, [pc, #464]	@ (80046d8 <HAL_FDCAN_Init+0x2ac>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d103      	bne.n	8004512 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800450a:	4a74      	ldr	r2, [pc, #464]	@ (80046dc <HAL_FDCAN_Init+0x2b0>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7c1b      	ldrb	r3, [r3, #16]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d108      	bne.n	800452c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004528:	619a      	str	r2, [r3, #24]
 800452a:	e007      	b.n	800453c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800453a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7c5b      	ldrb	r3, [r3, #17]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d108      	bne.n	8004556 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004552:	619a      	str	r2, [r3, #24]
 8004554:	e007      	b.n	8004566 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004564:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7c9b      	ldrb	r3, [r3, #18]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800457c:	619a      	str	r2, [r3, #24]
 800457e:	e007      	b.n	8004590 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800458e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80045b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0210 	bic.w	r2, r2, #16
 80045c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d108      	bne.n	80045e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0204 	orr.w	r2, r2, #4
 80045dc:	619a      	str	r2, [r3, #24]
 80045de:	e02c      	b.n	800463a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d028      	beq.n	800463a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d01c      	beq.n	800462a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0210 	orr.w	r2, r2, #16
 800460e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d110      	bne.n	800463a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0220 	orr.w	r2, r2, #32
 8004626:	619a      	str	r2, [r3, #24]
 8004628:	e007      	b.n	800463a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	3b01      	subs	r3, #1
 8004640:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	3b01      	subs	r3, #1
 8004648:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800464a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004652:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	3b01      	subs	r3, #1
 800465c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004662:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004664:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466e:	d115      	bne.n	800469c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	3b01      	subs	r3, #1
 800467c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800467e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	3b01      	subs	r3, #1
 8004686:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004688:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	3b01      	subs	r3, #1
 8004692:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004698:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800469a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9ce 	bl	8004a54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40006400 	.word	0x40006400
 80046dc:	40006500 	.word	0x40006500

080046e0 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d108      	bne.n	800470a <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	0219      	lsls	r1, r3, #8
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	430a      	orrs	r2, r1
 8004704:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e006      	b.n	8004718 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
  }
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d109      	bne.n	800474c <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004746:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e006      	b.n	800475a <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d110      	bne.n	800479c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e006      	b.n	80047aa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d12c      	bne.n	8004828 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e023      	b.n	8004836 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f991 	bl	8004b2c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	fa01 f202 	lsl.w	r2, r1, r2
 8004816:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800481a:	2201      	movs	r2, #1
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e006      	b.n	8004836 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	f043 0208 	orr.w	r2, r3, #8
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004840:	b480      	push	{r7}
 8004842:	b08b      	sub	sp, #44	@ 0x2c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004854:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	2b02      	cmp	r3, #2
 800485a:	f040 80bc 	bne.w	80049d6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d121      	bne.n	80048a8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004878:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0af      	b.n	80049e4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	e020      	b.n	80048ea <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e08d      	b.n	80049e4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	0c9b      	lsrs	r3, r3, #18
 8004904:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e005      	b.n	800491a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	3304      	adds	r3, #4
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	0e1b      	lsrs	r3, r3, #24
 800496c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0fda      	lsrs	r2, r3, #31
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	3304      	adds	r3, #4
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004988:	2300      	movs	r3, #0
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	e00a      	b.n	80049a4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	441a      	add	r2, r3
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	440b      	add	r3, r1
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	3301      	adds	r3, #1
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	4a11      	ldr	r2, [pc, #68]	@ (80049f0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80049ac:	5cd3      	ldrb	r3, [r2, r3]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d3eb      	bcc.n	800498e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d105      	bne.n	80049c8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80049c6:	e004      	b.n	80049d2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e006      	b.n	80049e4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049da:	f043 0208 	orr.w	r2, r3, #8
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	372c      	adds	r7, #44	@ 0x2c
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	0800a748 	.word	0x0800a748

080049f4 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d107      	bne.n	8004a14 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e006      	b.n	8004a22 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8004a22:	68fb      	ldr	r3, [r7, #12]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004a5c:	4b30      	ldr	r3, [pc, #192]	@ (8004b20 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004a5e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d103      	bne.n	8004a72 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004a70:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004a82:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a92:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9a:	041a      	lsls	r2, r3, #16
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	061a      	lsls	r2, r3, #24
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e005      	b.n	8004b06 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3304      	adds	r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d3f3      	bcc.n	8004afa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	4000a400 	.word	0x4000a400
 8004b24:	40006800 	.word	0x40006800
 8004b28:	40006c00 	.word	0x40006c00

08004b2c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004b4a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e00a      	b.n	8004b6e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004b60:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004b66:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b6c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b78:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004b7e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004b84:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e020      	b.n	8004c00 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3303      	adds	r3, #3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	440b      	add	r3, r1
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004bd6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	440b      	add	r3, r1
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004be4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	440a      	add	r2, r1
 8004bec:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004bee:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	4a06      	ldr	r2, [pc, #24]	@ (8004c20 <FDCAN_CopyMessageToRAM+0xf4>)
 8004c08:	5cd3      	ldrb	r3, [r2, r3]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d3d5      	bcc.n	8004bbe <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	3724      	adds	r7, #36	@ 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	0800a748 	.word	0x0800a748

08004c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c32:	e15a      	b.n	8004eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 814c 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d005      	beq.n	8004c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d130      	bne.n	8004cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0201 	and.w	r2, r3, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d017      	beq.n	8004d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d123      	bne.n	8004d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80a6 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d98:	4b5b      	ldr	r3, [pc, #364]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004da4:	4b58      	ldr	r3, [pc, #352]	@ (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db0:	4a56      	ldr	r2, [pc, #344]	@ (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	3302      	adds	r3, #2
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	220f      	movs	r2, #15
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dda:	d01f      	beq.n	8004e1c <HAL_GPIO_Init+0x1f8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a4c      	ldr	r2, [pc, #304]	@ (8004f10 <HAL_GPIO_Init+0x2ec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d019      	beq.n	8004e18 <HAL_GPIO_Init+0x1f4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a4b      	ldr	r2, [pc, #300]	@ (8004f14 <HAL_GPIO_Init+0x2f0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_GPIO_Init+0x1f0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a4a      	ldr	r2, [pc, #296]	@ (8004f18 <HAL_GPIO_Init+0x2f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00d      	beq.n	8004e10 <HAL_GPIO_Init+0x1ec>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a49      	ldr	r2, [pc, #292]	@ (8004f1c <HAL_GPIO_Init+0x2f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <HAL_GPIO_Init+0x1e8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a48      	ldr	r2, [pc, #288]	@ (8004f20 <HAL_GPIO_Init+0x2fc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_GPIO_Init+0x1e4>
 8004e04:	2305      	movs	r3, #5
 8004e06:	e00a      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e08:	2306      	movs	r3, #6
 8004e0a:	e008      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e006      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e10:	2303      	movs	r3, #3
 8004e12:	e004      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f002 0203 	and.w	r2, r2, #3
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	4093      	lsls	r3, r2
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e2e:	4937      	ldr	r1, [pc, #220]	@ (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e3c:	4b39      	ldr	r3, [pc, #228]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e66:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e8a:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e90:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ede:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <HAL_GPIO_Init+0x300>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f ae9d 	bne.w	8004c34 <HAL_GPIO_Init+0x10>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	48000400 	.word	0x48000400
 8004f14:	48000800 	.word	0x48000800
 8004f18:	48000c00 	.word	0x48000c00
 8004f1c:	48001000 	.word	0x48001000
 8004f20:	48001400 	.word	0x48001400
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f44:	e002      	b.n	8004f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	041a      	lsls	r2, r3, #16
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	43d9      	mvns	r1, r3
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	400b      	ands	r3, r1
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d141      	bne.n	800501e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d131      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa8:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fae:	4a46      	ldr	r2, [pc, #280]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb8:	4b43      	ldr	r3, [pc, #268]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fc0:	4a41      	ldr	r2, [pc, #260]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc8:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2232      	movs	r2, #50	@ 0x32
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80050d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fde:	e002      	b.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe6:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d102      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f2      	bne.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ffa:	4b33      	ldr	r3, [pc, #204]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d158      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e057      	b.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800500c:	4b2e      	ldr	r3, [pc, #184]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	4a2d      	ldr	r2, [pc, #180]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800501c:	e04d      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005024:	d141      	bne.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005026:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d131      	bne.n	8005098 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503a:	4a23      	ldr	r2, [pc, #140]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005044:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800504c:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005054:	4b1d      	ldr	r3, [pc, #116]	@ (80050cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2232      	movs	r2, #50	@ 0x32
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0c9b      	lsrs	r3, r3, #18
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506a:	e002      	b.n	8005072 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005072:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507e:	d102      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f2      	bne.n	800506c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005092:	d112      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e011      	b.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509e:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050a8:	e007      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050aa:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b2:	4a05      	ldr	r2, [pc, #20]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40007000 	.word	0x40007000
 80050cc:	20000000 	.word	0x20000000
 80050d0:	431bde83 	.word	0x431bde83

080050d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a04      	ldr	r2, [pc, #16]	@ (80050f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e2:	6093      	str	r3, [r2, #8]
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40007000 	.word	0x40007000

080050f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e2fe      	b.n	8005704 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d075      	beq.n	80051fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005112:	4b97      	ldr	r3, [pc, #604]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800511c:	4b94      	ldr	r3, [pc, #592]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d102      	bne.n	8005132 <HAL_RCC_OscConfig+0x3e>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d002      	beq.n	8005138 <HAL_RCC_OscConfig+0x44>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10b      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	4b8d      	ldr	r3, [pc, #564]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05b      	beq.n	80051fc <HAL_RCC_OscConfig+0x108>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d157      	bne.n	80051fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e2d9      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x74>
 800515a:	4b85      	ldr	r3, [pc, #532]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a84      	ldr	r2, [pc, #528]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e01d      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x98>
 8005172:	4b7f      	ldr	r3, [pc, #508]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7e      	ldr	r2, [pc, #504]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b7c      	ldr	r3, [pc, #496]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7b      	ldr	r2, [pc, #492]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 800518c:	4b78      	ldr	r3, [pc, #480]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a77      	ldr	r2, [pc, #476]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b75      	ldr	r3, [pc, #468]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a74      	ldr	r2, [pc, #464]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800519e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7ff f84e 	bl	800424c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b4:	f7ff f84a 	bl	800424c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e29e      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0xc0>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7ff f83a 	bl	800424c <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7ff f836 	bl	800424c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	@ 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e28a      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ee:	4b60      	ldr	r3, [pc, #384]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0xe8>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d075      	beq.n	80052f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520a:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005214:	4b56      	ldr	r3, [pc, #344]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d102      	bne.n	800522a <HAL_RCC_OscConfig+0x136>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d002      	beq.n	8005230 <HAL_RCC_OscConfig+0x13c>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d11f      	bne.n	8005270 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	4b4f      	ldr	r3, [pc, #316]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_OscConfig+0x154>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e25d      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	4b49      	ldr	r3, [pc, #292]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	4946      	ldr	r1, [pc, #280]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800525c:	4b45      	ldr	r3, [pc, #276]	@ (8005374 <HAL_RCC_OscConfig+0x280>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe ffa7 	bl	80041b4 <HAL_InitTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d043      	beq.n	80052f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e249      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d023      	beq.n	80052c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005278:	4b3d      	ldr	r3, [pc, #244]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3c      	ldr	r2, [pc, #240]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fe ffe2 	bl	800424c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528c:	f7fe ffde 	bl	800424c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e232      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800529e:	4b34      	ldr	r3, [pc, #208]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	061b      	lsls	r3, r3, #24
 80052b8:	492d      	ldr	r1, [pc, #180]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
 80052be:	e01a      	b.n	80052f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fe ffbe 	bl	800424c <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fe ffba 	bl	800424c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e20e      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e6:	4b22      	ldr	r3, [pc, #136]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1e0>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d041      	beq.n	8005386 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01c      	beq.n	8005344 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530a:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fe ff97 	bl	800424c <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fe ff93 	bl	800424c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1e7      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005334:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ef      	beq.n	8005322 <HAL_RCC_OscConfig+0x22e>
 8005342:	e020      	b.n	8005386 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534a:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fe ff7a 	bl	800424c <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800535a:	e00d      	b.n	8005378 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535c:	f7fe ff76 	bl	800424c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d906      	bls.n	8005378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1ca      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005378:	4b8c      	ldr	r3, [pc, #560]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800537a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ea      	bne.n	800535c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a6 	beq.w	80054e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005398:	4b84      	ldr	r3, [pc, #528]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_OscConfig+0x2b4>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x2b6>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	4b7f      	ldr	r3, [pc, #508]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ba:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d6:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e2:	f7fe ff33 	bl	800424c <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fe ff2f 	bl	800424c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e183      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053fc:	4b6c      	ldr	r3, [pc, #432]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d108      	bne.n	8005422 <HAL_RCC_OscConfig+0x32e>
 8005410:	4b66      	ldr	r3, [pc, #408]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005416:	4a65      	ldr	r2, [pc, #404]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005420:	e024      	b.n	800546c <HAL_RCC_OscConfig+0x378>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d110      	bne.n	800544c <HAL_RCC_OscConfig+0x358>
 800542a:	4b60      	ldr	r3, [pc, #384]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	4a5e      	ldr	r2, [pc, #376]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800543a:	4b5c      	ldr	r3, [pc, #368]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005440:	4a5a      	ldr	r2, [pc, #360]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800544a:	e00f      	b.n	800546c <HAL_RCC_OscConfig+0x378>
 800544c:	4b57      	ldr	r3, [pc, #348]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	4a56      	ldr	r2, [pc, #344]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800545c:	4b53      	ldr	r3, [pc, #332]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a52      	ldr	r2, [pc, #328]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fe feea 	bl	800424c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fe fee6 	bl	800424c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e138      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005492:	4b46      	ldr	r3, [pc, #280]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ed      	beq.n	800547c <HAL_RCC_OscConfig+0x388>
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fe fed3 	bl	800424c <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fe fecf 	bl	800424c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e121      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054c0:	4b3a      	ldr	r3, [pc, #232]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1ed      	bne.n	80054aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	4a34      	ldr	r2, [pc, #208]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03c      	beq.n	8005566 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f4:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054fa:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fe fea2 	bl	800424c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550c:	f7fe fe9e 	bl	800424c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0f2      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800551e:	4b23      	ldr	r3, [pc, #140]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCC_OscConfig+0x418>
 800552c:	e01b      	b.n	8005566 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800552e:	4b1f      	ldr	r3, [pc, #124]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005534:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fe fe85 	bl	800424c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005546:	f7fe fe81 	bl	800424c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e0d5      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005558:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800555a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ef      	bne.n	8005546 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80c9 	beq.w	8005702 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005570:	4b0e      	ldr	r3, [pc, #56]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b0c      	cmp	r3, #12
 800557a:	f000 8083 	beq.w	8005684 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d15e      	bne.n	8005644 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fe fe5b 	bl	800424c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005598:	e00c      	b.n	80055b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fe fe57 	bl	800424c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d905      	bls.n	80055b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0ab      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b4:	4b55      	ldr	r3, [pc, #340]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ec      	bne.n	800559a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c0:	4b52      	ldr	r3, [pc, #328]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	4b52      	ldr	r3, [pc, #328]	@ (8005710 <HAL_RCC_OscConfig+0x61c>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a11      	ldr	r1, [r2, #32]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055d0:	3a01      	subs	r2, #1
 80055d2:	0112      	lsls	r2, r2, #4
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80055da:	0212      	lsls	r2, r2, #8
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055e2:	0852      	lsrs	r2, r2, #1
 80055e4:	3a01      	subs	r2, #1
 80055e6:	0552      	lsls	r2, r2, #21
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0652      	lsls	r2, r2, #25
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055fa:	06d2      	lsls	r2, r2, #27
 80055fc:	430a      	orrs	r2, r1
 80055fe:	4943      	ldr	r1, [pc, #268]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005600:	4313      	orrs	r3, r2
 8005602:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005604:	4b41      	ldr	r3, [pc, #260]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a40      	ldr	r2, [pc, #256]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800560a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005610:	4b3e      	ldr	r3, [pc, #248]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a3d      	ldr	r2, [pc, #244]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800561a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fe fe16 	bl	800424c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fe fe12 	bl	800424c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e066      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005636:	4b35      	ldr	r3, [pc, #212]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x530>
 8005642:	e05e      	b.n	8005702 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005644:	4b31      	ldr	r3, [pc, #196]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a30      	ldr	r2, [pc, #192]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800564a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800564e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fe fdfc 	bl	800424c <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fe fdf8 	bl	800424c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e04c      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566a:	4b28      	ldr	r3, [pc, #160]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005676:	4b25      	ldr	r3, [pc, #148]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	4924      	ldr	r1, [pc, #144]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <HAL_RCC_OscConfig+0x620>)
 800567e:	4013      	ands	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
 8005682:	e03e      	b.n	8005702 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e039      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005690:	4b1e      	ldr	r3, [pc, #120]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0203 	and.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d12c      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d123      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d11b      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d113      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	3b01      	subs	r3, #1
 80056e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d109      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	3b01      	subs	r3, #1
 80056f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d001      	beq.n	8005702 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	019f800c 	.word	0x019f800c
 8005714:	feeefffc 	.word	0xfeeefffc

08005718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e11e      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005730:	4b91      	ldr	r3, [pc, #580]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d910      	bls.n	8005760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b8e      	ldr	r3, [pc, #568]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 020f 	bic.w	r2, r3, #15
 8005746:	498c      	ldr	r1, [pc, #560]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b8a      	ldr	r3, [pc, #552]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e106      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d073      	beq.n	8005854 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d129      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005774:	4b81      	ldr	r3, [pc, #516]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0f4      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005784:	f000 f966 	bl	8005a54 <RCC_GetSysClockFreqFromPLLSource>
 8005788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4a7c      	ldr	r2, [pc, #496]	@ (8005980 <HAL_RCC_ClockConfig+0x268>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d93f      	bls.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005792:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d033      	beq.n	8005812 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12f      	bne.n	8005812 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057b2:	4b72      	ldr	r3, [pc, #456]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ba:	4a70      	ldr	r2, [pc, #448]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057c2:	2380      	movs	r3, #128	@ 0x80
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e024      	b.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d0:	4b6a      	ldr	r3, [pc, #424]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0c6      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e0:	4b66      	ldr	r3, [pc, #408]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0be      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057f0:	f000 f8ce 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4a61      	ldr	r2, [pc, #388]	@ (8005980 <HAL_RCC_ClockConfig+0x268>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d909      	bls.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fe:	4b5f      	ldr	r3, [pc, #380]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005806:	4a5d      	ldr	r2, [pc, #372]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800580e:	2380      	movs	r3, #128	@ 0x80
 8005810:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005812:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4957      	ldr	r1, [pc, #348]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fe fd12 	bl	800424c <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	e00a      	b.n	8005842 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fe fd0e 	bl	800424c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e095      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	4b4e      	ldr	r3, [pc, #312]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 020c 	and.w	r2, r3, #12
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d1eb      	bne.n	800582c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d023      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800586c:	4b43      	ldr	r3, [pc, #268]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a42      	ldr	r2, [pc, #264]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005876:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005884:	4b3d      	ldr	r3, [pc, #244]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800588c:	4a3b      	ldr	r2, [pc, #236]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800588e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	4b39      	ldr	r3, [pc, #228]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4936      	ldr	r1, [pc, #216]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	e008      	b.n	80058ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b80      	cmp	r3, #128	@ 0x80
 80058ac:	d105      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ae:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	4a32      	ldr	r2, [pc, #200]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d21d      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 020f 	bic.w	r2, r3, #15
 80058d0:	4929      	ldr	r1, [pc, #164]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058d8:	f7fe fcb8 	bl	800424c <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fe fcb4 	bl	800424c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e03b      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d1ed      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4917      	ldr	r1, [pc, #92]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b13      	ldr	r3, [pc, #76]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	490f      	ldr	r1, [pc, #60]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005942:	f000 f825 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 8005946:	4602      	mov	r2, r0
 8005948:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	490c      	ldr	r1, [pc, #48]	@ (8005984 <HAL_RCC_ClockConfig+0x26c>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <HAL_RCC_ClockConfig+0x270>)
 8005960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <HAL_RCC_ClockConfig+0x274>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fc24 	bl	80041b4 <HAL_InitTick>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40022000 	.word	0x40022000
 800597c:	40021000 	.word	0x40021000
 8005980:	04c4b400 	.word	0x04c4b400
 8005984:	0800a738 	.word	0x0800a738
 8005988:	20000000 	.word	0x20000000
 800598c:	20000004 	.word	0x20000004

08005990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005996:	4b2c      	ldr	r3, [pc, #176]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d102      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059a2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e047      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059a8:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 030c 	and.w	r3, r3, #12
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e03e      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059ba:	4b23      	ldr	r3, [pc, #140]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d136      	bne.n	8005a34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059c6:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	3301      	adds	r3, #1
 80059dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ee:	68d2      	ldr	r2, [r2, #12]
 80059f0:	0a12      	lsrs	r2, r2, #8
 80059f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	617b      	str	r3, [r7, #20]
      break;
 80059fc:	e00c      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fe:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	4a10      	ldr	r2, [pc, #64]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a08:	68d2      	ldr	r2, [r2, #12]
 8005a0a:	0a12      	lsrs	r2, r2, #8
 8005a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
      break;
 8005a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	0e5b      	lsrs	r3, r3, #25
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e001      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	007a1200 	.word	0x007a1200

08005a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a64:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d10c      	bne.n	8005a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a78:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	4a14      	ldr	r2, [pc, #80]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a82:	68d2      	ldr	r2, [r2, #12]
 8005a84:	0a12      	lsrs	r2, r2, #8
 8005a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]
    break;
 8005a90:	e00c      	b.n	8005aac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a92:	4a12      	ldr	r2, [pc, #72]	@ (8005adc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a9c:	68d2      	ldr	r2, [r2, #12]
 8005a9e:	0a12      	lsrs	r2, r2, #8
 8005aa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    break;
 8005aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	0e5b      	lsrs	r3, r3, #25
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ac6:	687b      	ldr	r3, [r7, #4]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	007a1200 	.word	0x007a1200
 8005adc:	00f42400 	.word	0x00f42400

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aec:	2300      	movs	r3, #0
 8005aee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8098 	beq.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005afe:	2300      	movs	r3, #0
 8005b00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b02:	4b43      	ldr	r3, [pc, #268]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b0e:	4b40      	ldr	r3, [pc, #256]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	4a3f      	ldr	r2, [pc, #252]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b26:	2301      	movs	r3, #1
 8005b28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a39      	ldr	r2, [pc, #228]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b36:	f7fe fb89 	bl	800424c <HAL_GetTick>
 8005b3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3c:	e009      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b3e:	f7fe fb85 	bl	800424c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d902      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8005b50:	e005      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b52:	4b30      	ldr	r3, [pc, #192]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d159      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b64:	4b2a      	ldr	r3, [pc, #168]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01e      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d019      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b80:	4b23      	ldr	r3, [pc, #140]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b8c:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b92:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bac:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fe fb45 	bl	800424c <HAL_GetTick>
 8005bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc4:	e00b      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc6:	f7fe fb41 	bl	800424c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d902      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	74fb      	strb	r3, [r7, #19]
            break;
 8005bdc:	e006      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0ec      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	4903      	ldr	r1, [pc, #12]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c0a:	7cfb      	ldrb	r3, [r7, #19]
 8005c0c:	74bb      	strb	r3, [r7, #18]
 8005c0e:	e005      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c1c:	7c7b      	ldrb	r3, [r7, #17]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c22:	4ba7      	ldr	r3, [pc, #668]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	4aa6      	ldr	r2, [pc, #664]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f023 0203 	bic.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	499d      	ldr	r1, [pc, #628]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c5c:	4b98      	ldr	r3, [pc, #608]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f023 020c 	bic.w	r2, r3, #12
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4995      	ldr	r1, [pc, #596]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c7e:	4b90      	ldr	r3, [pc, #576]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	498c      	ldr	r1, [pc, #560]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ca0:	4b87      	ldr	r3, [pc, #540]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4984      	ldr	r1, [pc, #528]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	497b      	ldr	r1, [pc, #492]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce4:	4b76      	ldr	r3, [pc, #472]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	4973      	ldr	r1, [pc, #460]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d06:	4b6e      	ldr	r3, [pc, #440]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	496a      	ldr	r1, [pc, #424]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d28:	4b65      	ldr	r3, [pc, #404]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4962      	ldr	r1, [pc, #392]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	4959      	ldr	r1, [pc, #356]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d6c:	4b54      	ldr	r3, [pc, #336]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	4951      	ldr	r1, [pc, #324]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	4948      	ldr	r1, [pc, #288]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d015      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005db0:	4b43      	ldr	r3, [pc, #268]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbe:	4940      	ldr	r1, [pc, #256]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dce:	d105      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005de8:	4b35      	ldr	r3, [pc, #212]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	4932      	ldr	r1, [pc, #200]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e06:	d105      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e08:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e20:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	4924      	ldr	r1, [pc, #144]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e3e:	d105      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e40:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e58:	4b19      	ldr	r3, [pc, #100]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e66:	4916      	ldr	r1, [pc, #88]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e76:	d105      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a10      	ldr	r2, [pc, #64]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d019      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	4908      	ldr	r1, [pc, #32]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eae:	d109      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a02      	ldr	r2, [pc, #8]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ed0:	4b29      	ldr	r3, [pc, #164]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	4926      	ldr	r1, [pc, #152]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eee:	d105      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ef0:	4b21      	ldr	r3, [pc, #132]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f08:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f16:	4918      	ldr	r1, [pc, #96]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f26:	d105      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f28:	4b13      	ldr	r3, [pc, #76]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d015      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f40:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f4e:	490a      	ldr	r1, [pc, #40]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a04      	ldr	r2, [pc, #16]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000

08005f7c <_ZN17AbstractAllocatorD1Ev>:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	0800a70c 	.word	0x0800a70c

08005f9c <_ZN17AbstractAllocatorD0Ev>:
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ffe9 	bl	8005f7c <_ZN17AbstractAllocatorD1Ev>
 8005faa:	2108      	movs	r1, #8
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 fe54 	bl	8008c5a <_ZdlPvj>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include "sys_allocator.h"
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 fe9f 	bl	8008d0c <malloc>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	3310      	adds	r3, #16
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fc ff5e 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 8005fe4:	697b      	ldr	r3, [r7, #20]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fe8e 	bl	8008d1c <free>
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4a05      	ldr	r2, [pc, #20]	@ (8006028 <_ZN15SystemAllocatorD1Ev+0x20>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff ffaf 	bl	8005f7c <_ZN17AbstractAllocatorD1Ev>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	0800a760 	.word	0x0800a760

0800602c <_ZN15SystemAllocatorD0Ev>:
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ffe7 	bl	8006008 <_ZN15SystemAllocatorD1Ev>
 800603a:	2108      	movs	r1, #8
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f002 fe0c 	bl	8008c5a <_ZdlPvj>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b08b      	sub	sp, #44	@ 0x2c
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f876 	bl	800614e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8006062:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8006064:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3304      	adds	r3, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f000 f86e 	bl	800614e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8006072:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8006074:	f103 0120 	add.w	r1, r3, #32
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	9302      	str	r3, [sp, #8]
 800607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006088:	4620      	mov	r0, r4
 800608a:	f002 fb3f 	bl	800870c <canardTxPush>
 800608e:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f113 0f03 	cmn.w	r3, #3
 8006096:	d106      	bne.n	80060a6 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fc fefe 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 80060a4:	e008      	b.n	80060b8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da05      	bge.n	80060b8 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	3310      	adds	r3, #16
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fc fef4 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd90      	pop	{r4, r7, pc}
	...

080060c0 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b089      	sub	sp, #36	@ 0x24
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	461a      	mov	r2, r3
 80060cc:	460b      	mov	r3, r1
 80060ce:	817b      	strh	r3, [r7, #10]
 80060d0:	4613      	mov	r3, r2
 80060d2:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f838 	bl	800614e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 80060de:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 80060e0:	f103 0020 	add.w	r0, r3, #32
 80060e4:	897c      	ldrh	r4, [r7, #10]
 80060e6:	7a79      	ldrb	r1, [r7, #9]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	9302      	str	r3, [sp, #8]
 80060ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006124 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9cd 2300 	strd	r2, r3, [sp]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4622      	mov	r2, r4
 80060fa:	f002 fc57 	bl	80089ac <canardRxSubscribe>
 80060fe:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	3310      	adds	r3, #16
 8006114:	4618      	mov	r0, r3
 8006116:	f7fc fec3 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	001e8480 	.word	0x001e8480

08006128 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f000 f80a 	bl	800614e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800613a:	4603      	mov	r3, r0
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	3208      	adds	r2, #8
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	4790      	blx	r2
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
	return get();
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f805 	bl	8006166 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800615c:	4603      	mov	r3, r0
      }
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f805 	bl	8006180 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006176:	4603      	mov	r3, r0
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f806 	bl	800619c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8006190:	4603      	mov	r3, r0
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f805 	bl	80061b6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f805 	bl	80061ce <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f805 	bl	80061e8 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 80061de:	4603      	mov	r3, r0
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d801      	bhi.n	8006216 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	e009      	b.n	800622a <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d803      	bhi.n	8006224 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	3b06      	subs	r3, #6
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	e002      	b.n	800622a <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	3b0b      	subs	r3, #11
 8006228:	011b      	lsls	r3, r3, #4
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 8006238:	f1a0 0308 	sub.w	r3, r0, #8
 800623c:	4a07      	ldr	r2, [pc, #28]	@ (800625c <_ZL12delay_cyclest+0x24>)
 800623e:	fb82 1203 	smull	r1, r2, r2, r3
 8006242:	17db      	asrs	r3, r3, #31
 8006244:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 8006248:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800624c:	d004      	beq.n	8006258 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800624e:	bf00      	nop
    while (real_cycles--) {
 8006250:	3b01      	subs	r3, #1
 8006252:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8006256:	d1fa      	bne.n	800624e <_ZL12delay_cyclest+0x16>
    }
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	66666667 	.word	0x66666667

08006260 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include "FDCAN_generic.h"

uint32_t G4CAN::len_to_dlc(size_t len) {
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800626a:	4a05      	ldr	r2, [pc, #20]	@ (8006280 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	0800a770 	.word	0x0800a770

08006284 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800628e:	6838      	ldr	r0, [r7, #0]
 8006290:	f7ff ffb5 	bl	80061fe <_Z16fdcan_dlc_to_lenm>
 8006294:	4603      	mov	r3, r0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 80062a6:	e017      	b.n	80062d8 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f107 0208 	add.w	r2, r7, #8
 80062b4:	4611      	mov	r1, r2
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	f083 0301 	eor.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d115      	bne.n	80062f6 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f107 0208 	add.w	r2, r7, #8
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f8e2 	bl	800649c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	2140      	movs	r1, #64	@ 0x40
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fb88 	bl	80049f4 <HAL_FDCAN_GetRxFifoFillLevel>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1d9      	bne.n	80062a8 <_ZN5G4CAN8can_loopEv+0xa>
 80062f4:	e000      	b.n	80062f8 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 80062f6:	bf00      	nop
    }

    process_canard_tx();
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f92e 	bl	800655c <_ZN19AbstractCANProvider17process_canard_txEv>
}
 8006300:	bf00      	nop
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};

bool G4CAN::read_frame(CanardFrame* rxf) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b08e      	sub	sp, #56	@ 0x38
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
    // may want to check 2 FIFOs in the future
    uint32_t rx_fifo = -1;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295
 8006316:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	2140      	movs	r1, #64	@ 0x40
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fb68 	bl	80049f4 <HAL_FDCAN_GetRxFifoFillLevel>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 8006334:	2340      	movs	r3, #64	@ 0x40
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
 8006338:	e00f      	b.n	800635a <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	2141      	movs	r1, #65	@ 0x41
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fb57 	bl	80049f4 <HAL_FDCAN_GetRxFifoFillLevel>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 8006356:	2341      	movs	r3, #65	@ 0x41
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800635a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d101      	bne.n	8006366 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 8006362:	2300      	movs	r3, #0
 8006364:	e02e      	b.n	80063c4 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	2228      	movs	r2, #40	@ 0x28
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f002 febb 	bl	80090ea <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006378:	f107 020c 	add.w	r2, r7, #12
 800637c:	4b13      	ldr	r3, [pc, #76]	@ (80063cc <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800637e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006380:	f7fe fa5e 	bl	8004840 <HAL_FDCAN_GetRxMessage>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf14      	ite	ne
 800638a:	2301      	movne	r3, #1
 800638c:	2300      	moveq	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	3310      	adds	r3, #16
 800639a:	4618      	mov	r0, r3
 800639c:	f7fc fd80 	bl	8002ea0 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3304      	adds	r3, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4611      	mov	r1, r2
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	4602      	mov	r2, r0
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	4a03      	ldr	r2, [pc, #12]	@ (80063cc <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 80063c0:	609a      	str	r2, [r3, #8]
    return true;
 80063c2:	2301      	movs	r3, #1
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3738      	adds	r7, #56	@ 0x38
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000194 	.word	0x20000194

080063d0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 80063e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063e4:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006498 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 80063f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f4:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80063fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80063fe:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8006400:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006404:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8006406:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 800640c:	2300      	movs	r3, #0
 800640e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8006410:	2300      	movs	r3, #0
 8006412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006414:	e006      	b.n	8006424 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 8006416:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800641a:	f7ff ff0d 	bl	8006238 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	3301      	adds	r3, #1
 8006422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe fb01 	bl	8004a30 <HAL_FDCAN_GetTxFifoFreeLevel>
 800642e:	4603      	mov	r3, r0
 8006430:	2b03      	cmp	r3, #3
 8006432:	d004      	beq.n	800643e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	2b02      	cmp	r3, #2
 8006438:	dc01      	bgt.n	800643e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e8      	bne.n	8006416 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe faf1 	bl	8004a30 <HAL_FDCAN_GetTxFifoFreeLevel>
 800644e:	4603      	mov	r3, r0
 8006450:	2b03      	cmp	r3, #3
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	e014      	b.n	800648e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800646c:	f107 0308 	add.w	r3, r7, #8
 8006470:	4619      	mov	r1, r3
 8006472:	f7fe f9a0 	bl	80047b6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	e000      	b.n	800648e <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800648c:	697b      	ldr	r3, [r7, #20]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3730      	adds	r7, #48	@ 0x30
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	0800a770 	.word	0x0800a770

0800649c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b093      	sub	sp, #76	@ 0x4c
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 80064a6:	f107 0310 	add.w	r3, r7, #16
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
 80064b0:	609a      	str	r2, [r3, #8]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	611a      	str	r2, [r3, #16]
 80064b6:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
    void (*processor)(CanardRxTransfer*) = nullptr;
 80064bc:	2300      	movs	r3, #0
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
    IListener<CanardRxTransfer*>* listener = nullptr;
 80064c0:	2300      	movs	r3, #0
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30

    const int8_t accept_result = canardRxAccept(
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fc fcfc 	bl	8002ecc <_ZNKSt8functionIFyvEEclEv>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	f107 010c 	add.w	r1, r7, #12
 80064dc:	9103      	str	r1, [sp, #12]
 80064de:	f107 0110 	add.w	r1, r7, #16
 80064e2:	9102      	str	r1, [sp, #8]
 80064e4:	2100      	movs	r1, #0
 80064e6:	9101      	str	r1, [sp, #4]
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	9100      	str	r1, [sp, #0]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f002 f9cd 	bl	800888c <canardRxAccept>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 0 || accept_result > 1) {
 80064f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d029      	beq.n	8006554 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
 8006500:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006504:	2b01      	cmp	r3, #1
 8006506:	dc25      	bgt.n	8006554 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xb8>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }
    if (accept_result < 0) goto exit;
 8006508:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800650c:	2b00      	cmp	r3, #0
 800650e:	db11      	blt.n	8006534 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x98>
    if (subscription == nullptr) goto exit;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x9c>

    listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (listener == nullptr) goto exit;
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
    listener->accept(&transfer);
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f107 0210 	add.w	r2, r7, #16
 800652c:	4611      	mov	r1, r2
 800652e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006530:	4798      	blx	r3
 8006532:	e004      	b.n	800653e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (accept_result < 0) goto exit;
 8006534:	bf00      	nop
 8006536:	e002      	b.n	800653e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (subscription == nullptr) goto exit;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
    if (listener == nullptr) goto exit;
 800653c:	bf00      	nop

exit:
    if (transfer.payload != nullptr) {
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        canard.memory_free(&canard, transfer.payload);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	3220      	adds	r2, #32
 800654c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800654e:	4610      	mov	r0, r2
 8006550:	4798      	blx	r3
 8006552:	e000      	b.n	8006556 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xba>
        return;
 8006554:	bf00      	nop
    }
}
 8006556:	373c      	adds	r7, #60	@ 0x3c
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}

0800655c <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800655c:	b5b0      	push	{r4, r5, r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 8006564:	e036      	b.n	80065d4 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	330c      	adds	r3, #12
 800656a:	4618      	mov	r0, r3
 800656c:	f002 f958 	bl	8008820 <canardTxPeek>
 8006570:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	d00c      	beq.n	8006596 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fca0 	bl	8002ecc <_ZNKSt8functionIFyvEEclEv>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	42a2      	cmp	r2, r4
 8006592:	41ab      	sbcs	r3, r5
 8006594:	d201      	bcs.n	800659a <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3310      	adds	r3, #16
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
 80065ae:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	db13      	blt.n	80065de <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f103 0520 	add.w	r5, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	330c      	adds	r3, #12
 80065c4:	68f9      	ldr	r1, [r7, #12]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f002 f93f 	bl	800884a <canardTxPop>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4619      	mov	r1, r3
 80065d0:	4628      	mov	r0, r5
 80065d2:	47a0      	blx	r4
    while (queue.size != 0) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1c4      	bne.n	8006566 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 80065dc:	e000      	b.n	80065e0 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 80065de:	bf00      	nop
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bdb0      	pop	{r4, r5, r7, pc}

080065e8 <_Z41__static_initialization_and_destruction_0ii>:
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065fe:	4293      	cmp	r3, r2
 8006600:	d102      	bne.n	8006608 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006602:	4803      	ldr	r0, [pc, #12]	@ (8006610 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006604:	f000 f806 	bl	8006614 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200001d4 	.word	0x200001d4

08006614 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fa1a 	bl	8003a58 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8006624:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fd f886 	bl	8003740 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8006634:	4604      	mov	r4, r0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7fd f93a 	bl	80038b0 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800663c:	4603      	mov	r3, r0
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	4620      	mov	r0, r4
 8006644:	f7fd fa15 	bl	8003a72 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
      }
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}

08006658 <_GLOBAL__sub_I_queue>:
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
 800665c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006660:	2001      	movs	r0, #1
 8006662:	f7ff ffc1 	bl	80065e8 <_Z41__static_initialization_and_destruction_0ii>
 8006666:	bd80      	pop	{r7, pc}

08006668 <_GLOBAL__sub_D_queue>:
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
 800666c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006670:	2000      	movs	r0, #0
 8006672:	f7ff ffb9 	bl	80065e8 <_Z41__static_initialization_and_destruction_0ii>
 8006676:	bd80      	pop	{r7, pc}

08006678 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800668c:	e007      	b.n	800669e <cavlFindExtremum+0x26>
    {
        result = c;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f4      	bne.n	800668e <cavlFindExtremum+0x16>
    }
    return result;
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
	...

080066b4 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d014      	beq.n	80066f0 <cavlPrivateRotate+0x3c>
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f083 0301 	eor.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <cavlPrivateRotate+0x3c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	db04      	blt.n	80066f0 <cavlPrivateRotate+0x3c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	dd05      	ble.n	80066fc <cavlPrivateRotate+0x48>
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <cavlPrivateRotate+0xe8>)
 80066f2:	4a2b      	ldr	r2, [pc, #172]	@ (80067a0 <cavlPrivateRotate+0xec>)
 80066f4:	2162      	movs	r1, #98	@ 0x62
 80066f6:	482b      	ldr	r0, [pc, #172]	@ (80067a4 <cavlPrivateRotate+0xf0>)
 80066f8:	f002 fad8 	bl	8008cac <__assert_func>
    Cavl* const z = x->lr[!r];
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f083 0301 	eor.w	r3, r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4299      	cmp	r1, r3
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	f082 0201 	eor.w	r2, r2, #1
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	4610      	mov	r0, r2
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	0083      	lsls	r3, r0, #2
 800675a:	440b      	add	r3, r1
 800675c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f083 0301 	eor.w	r3, r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	f083 0301 	eor.w	r3, r3, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	08009c7c 	.word	0x08009c7c
 80067a0:	0800abfc 	.word	0x0800abfc
 80067a4:	08009cc4 	.word	0x08009cc4

080067a8 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <cavlPrivateAdjustBalance+0x28>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	db04      	blt.n	80067d0 <cavlPrivateAdjustBalance+0x28>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	dd05      	ble.n	80067dc <cavlPrivateAdjustBalance+0x34>
 80067d0:	4b61      	ldr	r3, [pc, #388]	@ (8006958 <cavlPrivateAdjustBalance+0x1b0>)
 80067d2:	4a62      	ldr	r2, [pc, #392]	@ (800695c <cavlPrivateAdjustBalance+0x1b4>)
 80067d4:	2177      	movs	r1, #119	@ 0x77
 80067d6:	4862      	ldr	r0, [pc, #392]	@ (8006960 <cavlPrivateAdjustBalance+0x1b8>)
 80067d8:	f002 fa68 	bl	8008cac <__assert_func>
    Cavl*        out    = x;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	d001      	beq.n	80067f2 <cavlPrivateAdjustBalance+0x4a>
 80067ee:	2201      	movs	r2, #1
 80067f0:	e000      	b.n	80067f4 <cavlPrivateAdjustBalance+0x4c>
 80067f2:	22ff      	movs	r2, #255	@ 0xff
 80067f4:	4413      	add	r3, r2
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 80067fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	db04      	blt.n	800680e <cavlPrivateAdjustBalance+0x66>
 8006804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006808:	2b01      	cmp	r3, #1
 800680a:	f340 809c 	ble.w	8006946 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800680e:	7cfb      	ldrb	r3, [r7, #19]
 8006810:	09db      	lsrs	r3, r3, #7
 8006812:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8006814:	7cbb      	ldrb	r3, [r7, #18]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <cavlPrivateAdjustBalance+0x76>
 800681a:	2301      	movs	r3, #1
 800681c:	e001      	b.n	8006822 <cavlPrivateAdjustBalance+0x7a>
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8006824:	7cbb      	ldrb	r3, [r7, #18]
 8006826:	f083 0301 	eor.w	r3, r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <cavlPrivateAdjustBalance+0xa0>
 800683c:	4b49      	ldr	r3, [pc, #292]	@ (8006964 <cavlPrivateAdjustBalance+0x1bc>)
 800683e:	4a47      	ldr	r2, [pc, #284]	@ (800695c <cavlPrivateAdjustBalance+0x1b4>)
 8006840:	217f      	movs	r1, #127	@ 0x7f
 8006842:	4847      	ldr	r0, [pc, #284]	@ (8006960 <cavlPrivateAdjustBalance+0x1b8>)
 8006844:	f002 fa32 	bl	8008cac <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800684e:	461a      	mov	r2, r3
 8006850:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006854:	fb02 f303 	mul.w	r3, r2, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc1c      	bgt.n	8006896 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8006860:	7cbb      	ldrb	r3, [r7, #18]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff ff25 	bl	80066b4 <cavlPrivateRotate>
            if (0 == z->bf)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8006874:	7c7b      	ldrb	r3, [r7, #17]
 8006876:	425b      	negs	r3, r3
 8006878:	b2db      	uxtb	r3, r3
 800687a:	b25a      	sxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	7c7a      	ldrb	r2, [r7, #17]
 8006884:	731a      	strb	r2, [r3, #12]
    {
 8006886:	e061      	b.n	800694c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	731a      	strb	r2, [r3, #12]
    {
 8006894:	e05a      	b.n	800694c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8006896:	7cbb      	ldrb	r3, [r7, #18]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <cavlPrivateAdjustBalance+0x10c>
 80068a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006968 <cavlPrivateAdjustBalance+0x1c0>)
 80068aa:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <cavlPrivateAdjustBalance+0x1b4>)
 80068ac:	2192      	movs	r1, #146	@ 0x92
 80068ae:	482c      	ldr	r0, [pc, #176]	@ (8006960 <cavlPrivateAdjustBalance+0x1b8>)
 80068b0:	f002 f9fc 	bl	8008cac <__assert_func>
            out = y;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 80068b8:	7cbb      	ldrb	r3, [r7, #18]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf14      	ite	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	2300      	moveq	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f083 0301 	eor.w	r3, r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7ff feee 	bl	80066b4 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80068d8:	7cbb      	ldrb	r3, [r7, #18]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fee9 	bl	80066b4 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068ee:	fb02 f303 	mul.w	r3, r2, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	da09      	bge.n	800690a <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c7a      	ldrb	r2, [r7, #17]
 80068fa:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	731a      	strb	r2, [r3, #12]
    {
 8006908:	e020      	b.n	800694c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006910:	461a      	mov	r2, r3
 8006912:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd0c      	ble.n	8006938 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800692a:	7c7b      	ldrb	r3, [r7, #17]
 800692c:	425b      	negs	r3, r3
 800692e:	b2db      	uxtb	r3, r3
 8006930:	b25a      	sxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	731a      	strb	r2, [r3, #12]
    {
 8006936:	e009      	b.n	800694c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	731a      	strb	r2, [r3, #12]
    {
 8006944:	e002      	b.n	800694c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	7cfa      	ldrb	r2, [r7, #19]
 800694a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08009cf0 	.word	0x08009cf0
 800695c:	0800abe0 	.word	0x0800abe0
 8006960:	08009cc4 	.word	0x08009cc4
 8006964:	08009d20 	.word	0x08009d20
 8006968:	08009d2c 	.word	0x08009d2c

0800696c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <cavlPrivateRetraceOnGrowth+0x18>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <cavlPrivateRetraceOnGrowth+0x24>
 8006984:	4b23      	ldr	r3, [pc, #140]	@ (8006a14 <cavlPrivateRetraceOnGrowth+0xa8>)
 8006986:	4a24      	ldr	r2, [pc, #144]	@ (8006a18 <cavlPrivateRetraceOnGrowth+0xac>)
 8006988:	21b5      	movs	r1, #181	@ 0xb5
 800698a:	4824      	ldr	r0, [pc, #144]	@ (8006a1c <cavlPrivateRetraceOnGrowth+0xb0>)
 800698c:	f002 f98e 	bl	8008cac <__assert_func>
    Cavl* c = added;      // Child
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800699a:	e023      	b.n	80069e4 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d005      	beq.n	80069c8 <cavlPrivateRetraceOnGrowth+0x5c>
 80069bc:	4b18      	ldr	r3, [pc, #96]	@ (8006a20 <cavlPrivateRetraceOnGrowth+0xb4>)
 80069be:	4a16      	ldr	r2, [pc, #88]	@ (8006a18 <cavlPrivateRetraceOnGrowth+0xac>)
 80069c0:	21bb      	movs	r1, #187	@ 0xbb
 80069c2:	4816      	ldr	r0, [pc, #88]	@ (8006a1c <cavlPrivateRetraceOnGrowth+0xb0>)
 80069c4:	f002 f972 	bl	8008cac <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7ff feeb 	bl	80067a8 <cavlPrivateAdjustBalance>
 80069d2:	6178      	str	r0, [r7, #20]
        p = c->up;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1d8      	bne.n	800699c <cavlPrivateRetraceOnGrowth+0x30>
 80069ea:	e000      	b.n	80069ee <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80069ec:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <cavlPrivateRetraceOnGrowth+0x94>
 80069f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <cavlPrivateRetraceOnGrowth+0xb8>)
 80069f6:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <cavlPrivateRetraceOnGrowth+0xac>)
 80069f8:	21c3      	movs	r1, #195	@ 0xc3
 80069fa:	4808      	ldr	r0, [pc, #32]	@ (8006a1c <cavlPrivateRetraceOnGrowth+0xb0>)
 80069fc:	f002 f956 	bl	8008cac <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <cavlPrivateRetraceOnGrowth+0x9e>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	e000      	b.n	8006a0c <cavlPrivateRetraceOnGrowth+0xa0>
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	08009d38 	.word	0x08009d38
 8006a18:	0800abc4 	.word	0x0800abc4
 8006a1c:	08009cc4 	.word	0x08009cc4
 8006a20:	08009d5c 	.word	0x08009d5c
 8006a24:	08009d6c 	.word	0x08009d6c

08006a28 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	@ 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d065      	beq.n	8006b0c <cavlSearch+0xe4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d062      	beq.n	8006b0c <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8006a50:	e02f      	b.n	8006ab2 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	68b8      	ldr	r0, [r7, #8]
 8006a5c:	4798      	blx	r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8006a62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <cavlSearch+0x4a>
            {
                out = *n;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006a70:	e023      	b.n	8006aba <cavlSearch+0x92>
            }
            up = *n;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bfcc      	ite	gt
 8006a84:	2301      	movgt	r3, #1
 8006a86:	2300      	movle	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3304      	adds	r3, #4
 8006a90:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <cavlSearch+0x8a>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6a3a      	ldr	r2, [r7, #32]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d005      	beq.n	8006ab2 <cavlSearch+0x8a>
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b18 <cavlSearch+0xf0>)
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b1c <cavlSearch+0xf4>)
 8006aaa:	21db      	movs	r1, #219	@ 0xdb
 8006aac:	481c      	ldr	r0, [pc, #112]	@ (8006b20 <cavlSearch+0xf8>)
 8006aae:	f002 f8fd 	bl	8008cac <__assert_func>
        while (*n != NULL)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1cb      	bne.n	8006a52 <cavlSearch+0x2a>
        }
        if (NULL == out)
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d125      	bne.n	8006b0c <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <cavlSearch+0xa8>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68b8      	ldr	r0, [r7, #8]
 8006aca:	4798      	blx	r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	e000      	b.n	8006ad2 <cavlSearch+0xaa>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ade:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	2200      	movs	r2, #0
 8006af6:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8006af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006afa:	f7ff ff37 	bl	800696c <cavlPrivateRetraceOnGrowth>
 8006afe:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <cavlSearch+0xe4>
                {
                    *root = rt;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	@ 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	08009d78 	.word	0x08009d78
 8006b1c:	0800abb8 	.word	0x0800abb8
 8006b20:	08009cc4 	.word	0x08009cc4

08006b24 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8116 	beq.w	8006d62 <cavlRemove+0x23e>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8112 	beq.w	8006d62 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <cavlRemove+0x2e>
 8006b46:	4b89      	ldr	r3, [pc, #548]	@ (8006d6c <cavlRemove+0x248>)
 8006b48:	4a89      	ldr	r2, [pc, #548]	@ (8006d70 <cavlRemove+0x24c>)
 8006b4a:	21f6      	movs	r1, #246	@ 0xf6
 8006b4c:	4889      	ldr	r0, [pc, #548]	@ (8006d74 <cavlRemove+0x250>)
 8006b4e:	f002 f8ad 	bl	8008cac <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <cavlRemove+0x4c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d005      	beq.n	8006b70 <cavlRemove+0x4c>
 8006b64:	4b84      	ldr	r3, [pc, #528]	@ (8006d78 <cavlRemove+0x254>)
 8006b66:	4a82      	ldr	r2, [pc, #520]	@ (8006d70 <cavlRemove+0x24c>)
 8006b68:	21f7      	movs	r1, #247	@ 0xf7
 8006b6a:	4882      	ldr	r0, [pc, #520]	@ (8006d74 <cavlRemove+0x250>)
 8006b6c:	f002 f89e 	bl	8008cac <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8006b74:	2300      	movs	r3, #0
 8006b76:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d073      	beq.n	8006c68 <cavlRemove+0x144>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d06f      	beq.n	8006c68 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fd72 	bl	8006678 <cavlFindExtremum>
 8006b94:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <cavlRemove+0x88>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <cavlRemove+0x88>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <cavlRemove+0x94>
 8006bac:	4b73      	ldr	r3, [pc, #460]	@ (8006d7c <cavlRemove+0x258>)
 8006bae:	4a70      	ldr	r2, [pc, #448]	@ (8006d70 <cavlRemove+0x24c>)
 8006bb0:	21ff      	movs	r1, #255	@ 0xff
 8006bb2:	4870      	ldr	r0, [pc, #448]	@ (8006d74 <cavlRemove+0x250>)
 8006bb4:	f002 f87a 	bl	8008cac <__assert_func>
            re->bf        = node->bf;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d025      	beq.n	8006c28 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d006      	beq.n	8006bfa <cavlRemove+0xd6>
 8006bec:	4b64      	ldr	r3, [pc, #400]	@ (8006d80 <cavlRemove+0x25c>)
 8006bee:	4a60      	ldr	r2, [pc, #384]	@ (8006d70 <cavlRemove+0x24c>)
 8006bf0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8006bf4:	485f      	ldr	r0, [pc, #380]	@ (8006d74 <cavlRemove+0x250>)
 8006bf6:	f002 f859 	bl	8008cac <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	601a      	str	r2, [r3, #0]
                r             = false;
 8006c22:	2300      	movs	r3, #0
 8006c24:	76fb      	strb	r3, [r7, #27]
 8006c26:	e003      	b.n	8006c30 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	4299      	cmp	r1, r3
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	605a      	str	r2, [r3, #4]
        {
 8006c5e:	e046      	b.n	8006cee <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	601a      	str	r2, [r3, #0]
        {
 8006c66:	e042      	b.n	8006cee <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bf14      	ite	ne
 8006c76:	2301      	movne	r3, #1
 8006c78:	2300      	moveq	r3, #0
 8006c7a:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8006c7c:	7cfb      	ldrb	r3, [r7, #19]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d020      	beq.n	8006ce0 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	bf0c      	ite	eq
 8006ca8:	2301      	moveq	r3, #1
 8006caa:	2300      	movne	r3, #0
 8006cac:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8006cae:	7cfb      	ldrb	r3, [r7, #19]
 8006cb0:	7ef8      	ldrb	r0, [r7, #27]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	69f9      	ldr	r1, [r7, #28]
 8006cbc:	0083      	lsls	r3, r0, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8006cc2:	7efb      	ldrb	r3, [r7, #27]
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8006cd0:	7efb      	ldrb	r3, [r7, #27]
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e006      	b.n	8006cee <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8006ce0:	7cfb      	ldrb	r3, [r7, #19]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d036      	beq.n	8006d62 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8006cf8:	7efb      	ldrb	r3, [r7, #27]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	69f8      	ldr	r0, [r7, #28]
 8006d14:	f7ff fd48 	bl	80067a8 <cavlPrivateAdjustBalance>
 8006d18:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <cavlRemove+0x21e>
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8006d40:	e7da      	b.n	8006cf8 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <cavlRemove+0x238>
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <cavlRemove+0x260>)
 8006d50:	4a07      	ldr	r2, [pc, #28]	@ (8006d70 <cavlRemove+0x24c>)
 8006d52:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8006d56:	4807      	ldr	r0, [pc, #28]	@ (8006d74 <cavlRemove+0x250>)
 8006d58:	f001 ffa8 	bl	8008cac <__assert_func>
                *root = c;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8006d62:	bf00      	nop
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08009d9c 	.word	0x08009d9c
 8006d70:	0800ac40 	.word	0x0800ac40
 8006d74:	08009cc4 	.word	0x08009cc4
 8006d78:	08009dac 	.word	0x08009dac
 8006d7c:	08009dd4 	.word	0x08009dd4
 8006d80:	08009e0c 	.word	0x08009e0c
 8006d84:	08009d6c 	.word	0x08009d6c

08006d88 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8006d90:	687b      	ldr	r3, [r7, #4]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	460a      	mov	r2, r1
 8006daa:	80fb      	strh	r3, [r7, #6]
 8006dac:	4613      	mov	r3, r2
 8006dae:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b299      	uxth	r1, r3
 8006dbc:	797b      	ldrb	r3, [r7, #5]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	404b      	eors	r3, r1
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	4905      	ldr	r1, [pc, #20]	@ (8006ddc <crcAddByte+0x3c>)
 8006dc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8006dcc:	4053      	eors	r3, r2
 8006dce:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	0800a890 	.word	0x0800a890

08006de0 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <crcAdd+0x26>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <crcAdd+0x26>
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <crcAdd+0x64>)
 8006dfc:	4a12      	ldr	r2, [pc, #72]	@ (8006e48 <crcAdd+0x68>)
 8006dfe:	2185      	movs	r1, #133	@ 0x85
 8006e00:	4812      	ldr	r0, [pc, #72]	@ (8006e4c <crcAdd+0x6c>)
 8006e02:	f001 ff53 	bl	8008cac <__assert_func>
    TransferCRC    out = crc;
 8006e06:	89fb      	ldrh	r3, [r7, #14]
 8006e08:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e00e      	b.n	8006e32 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	8bfb      	ldrh	r3, [r7, #30]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff ffbf 	bl	8006da0 <crcAddByte>
 8006e22:	4603      	mov	r3, r0
 8006e24:	83fb      	strh	r3, [r7, #30]
        ++p;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d3ec      	bcc.n	8006e14 <crcAdd+0x34>
    }
    return out;
 8006e3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	08009e1c 	.word	0x08009e1c
 8006e48:	0800ab0c 	.word	0x0800ab0c
 8006e4c:	08009e44 	.word	0x08009e44

08006e50 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	460a      	mov	r2, r1
 8006e5a:	80fb      	strh	r3, [r7, #6]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8006e60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da05      	bge.n	8006e74 <txMakeMessageSessionSpecifier+0x24>
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <txMakeMessageSessionSpecifier+0x54>)
 8006e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea8 <txMakeMessageSessionSpecifier+0x58>)
 8006e6c:	21ac      	movs	r1, #172	@ 0xac
 8006e6e:	480f      	ldr	r0, [pc, #60]	@ (8006eac <txMakeMessageSessionSpecifier+0x5c>)
 8006e70:	f001 ff1c 	bl	8008cac <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7a:	d305      	bcc.n	8006e88 <txMakeMessageSessionSpecifier+0x38>
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <txMakeMessageSessionSpecifier+0x60>)
 8006e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea8 <txMakeMessageSessionSpecifier+0x58>)
 8006e80:	21ad      	movs	r1, #173	@ 0xad
 8006e82:	480a      	ldr	r0, [pc, #40]	@ (8006eac <txMakeMessageSessionSpecifier+0x5c>)
 8006e84:	f001 ff12 	bl	8008cac <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8006e92:	797a      	ldrb	r2, [r7, #5]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	4313      	orrs	r3, r2
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08009e74 	.word	0x08009e74
 8006ea8:	0800ab14 	.word	0x0800ab14
 8006eac:	08009e44 	.word	0x08009e44
 8006eb0:	08009e88 	.word	0x08009e88

08006eb4 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	80fb      	strh	r3, [r7, #6]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	717b      	strb	r3, [r7, #5]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	713b      	strb	r3, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8006ed2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da05      	bge.n	8006ee6 <txMakeServiceSessionSpecifier+0x32>
 8006eda:	4b17      	ldr	r3, [pc, #92]	@ (8006f38 <txMakeServiceSessionSpecifier+0x84>)
 8006edc:	4a17      	ldr	r2, [pc, #92]	@ (8006f3c <txMakeServiceSessionSpecifier+0x88>)
 8006ede:	21b7      	movs	r1, #183	@ 0xb7
 8006ee0:	4817      	ldr	r0, [pc, #92]	@ (8006f40 <txMakeServiceSessionSpecifier+0x8c>)
 8006ee2:	f001 fee3 	bl	8008cac <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8006ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da05      	bge.n	8006efa <txMakeServiceSessionSpecifier+0x46>
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <txMakeServiceSessionSpecifier+0x90>)
 8006ef0:	4a12      	ldr	r2, [pc, #72]	@ (8006f3c <txMakeServiceSessionSpecifier+0x88>)
 8006ef2:	21b8      	movs	r1, #184	@ 0xb8
 8006ef4:	4812      	ldr	r0, [pc, #72]	@ (8006f40 <txMakeServiceSessionSpecifier+0x8c>)
 8006ef6:	f001 fed9 	bl	8008cac <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f00:	d305      	bcc.n	8006f0e <txMakeServiceSessionSpecifier+0x5a>
 8006f02:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <txMakeServiceSessionSpecifier+0x94>)
 8006f04:	4a0d      	ldr	r2, [pc, #52]	@ (8006f3c <txMakeServiceSessionSpecifier+0x88>)
 8006f06:	21b9      	movs	r1, #185	@ 0xb9
 8006f08:	480d      	ldr	r0, [pc, #52]	@ (8006f40 <txMakeServiceSessionSpecifier+0x8c>)
 8006f0a:	f001 fecf 	bl	8008cac <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8006f0e:	793a      	ldrb	r2, [r7, #4]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	01db      	lsls	r3, r3, #7
 8006f14:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8006f1a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8006f1c:	797a      	ldrb	r2, [r7, #5]
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	d002      	beq.n	8006f28 <txMakeServiceSessionSpecifier+0x74>
 8006f22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f26:	e000      	b.n	8006f2a <txMakeServiceSessionSpecifier+0x76>
 8006f28:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8006f2a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8006f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd90      	pop	{r4, r7, pc}
 8006f38:	08009e74 	.word	0x08009e74
 8006f3c:	0800ab34 	.word	0x0800ab34
 8006f40:	08009e44 	.word	0x08009e44
 8006f44:	08009e9c 	.word	0x08009e9c
 8006f48:	08009eb0 	.word	0x08009eb0

08006f4c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8006f54:	2340      	movs	r3, #64	@ 0x40
 8006f56:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b07      	cmp	r3, #7
 8006f60:	d802      	bhi.n	8006f68 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8006f62:	2308      	movs	r3, #8
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e014      	b.n	8006f92 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d808      	bhi.n	8006f82 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8006f70:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa4 <adjustPresentationLayerMTU+0x58>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <adjustPresentationLayerMTU+0x5c>)
 8006f7c:	5c9b      	ldrb	r3, [r3, r2]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e007      	b.n	8006f92 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8006f82:	4a08      	ldr	r2, [pc, #32]	@ (8006fa4 <adjustPresentationLayerMTU+0x58>)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4413      	add	r3, r2
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <adjustPresentationLayerMTU+0x5c>)
 8006f8e:	5c9b      	ldrb	r3, [r3, r2]
 8006f90:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3b01      	subs	r3, #1
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	0800aaa0 	.word	0x0800aaa0
 8006fa8:	0800aa90 	.word	0x0800aa90

08006fac <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	@ 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <txMakeCANID+0x20>
 8006fc0:	4b60      	ldr	r3, [pc, #384]	@ (8007144 <txMakeCANID+0x198>)
 8006fc2:	4a61      	ldr	r2, [pc, #388]	@ (8007148 <txMakeCANID+0x19c>)
 8006fc4:	21d9      	movs	r1, #217	@ 0xd9
 8006fc6:	4861      	ldr	r0, [pc, #388]	@ (800714c <txMakeCANID+0x1a0>)
 8006fc8:	f001 fe70 	bl	8008cac <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <txMakeCANID+0x32>
 8006fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8007150 <txMakeCANID+0x1a4>)
 8006fd4:	4a5c      	ldr	r2, [pc, #368]	@ (8007148 <txMakeCANID+0x19c>)
 8006fd6:	21da      	movs	r1, #218	@ 0xda
 8006fd8:	485c      	ldr	r0, [pc, #368]	@ (800714c <txMakeCANID+0x1a0>)
 8006fda:	f001 fe67 	bl	8008cac <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8006fde:	f06f 0301 	mvn.w	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d157      	bne.n	800709c <txMakeCANID+0xf0>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	2bff      	cmp	r3, #255	@ 0xff
 8006ff2:	d153      	bne.n	800709c <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8006ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ffc:	d24e      	bcs.n	800709c <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8006ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007002:	2b00      	cmp	r3, #0
 8007004:	db11      	blt.n	800702a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff ff1e 	bl	8006e50 <txMakeMessageSessionSpecifier>
 8007014:	4603      	mov	r3, r0
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	da75      	bge.n	800710a <txMakeCANID+0x15e>
 800701e:	4b4d      	ldr	r3, [pc, #308]	@ (8007154 <txMakeCANID+0x1a8>)
 8007020:	4a49      	ldr	r2, [pc, #292]	@ (8007148 <txMakeCANID+0x19c>)
 8007022:	21e2      	movs	r1, #226	@ 0xe2
 8007024:	4849      	ldr	r0, [pc, #292]	@ (800714c <txMakeCANID+0x1a0>)
 8007026:	f001 fe41 	bl	8008cac <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	429a      	cmp	r2, r3
 8007030:	d830      	bhi.n	8007094 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d108      	bne.n	800704a <txMakeCANID+0x9e>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <txMakeCANID+0x9e>
 800703e:	4b46      	ldr	r3, [pc, #280]	@ (8007158 <txMakeCANID+0x1ac>)
 8007040:	4a41      	ldr	r2, [pc, #260]	@ (8007148 <txMakeCANID+0x19c>)
 8007042:	21e6      	movs	r1, #230	@ 0xe6
 8007044:	4841      	ldr	r0, [pc, #260]	@ (800714c <txMakeCANID+0x1a0>)
 8007046:	f001 fe31 	bl	8008cac <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007052:	f7ff fec5 	bl	8006de0 <crcAdd>
 8007056:	4603      	mov	r3, r0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff feef 	bl	8006e50 <txMakeMessageSessionSpecifier>
 8007072:	4603      	mov	r3, r0
 8007074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007078:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007080:	d305      	bcc.n	800708e <txMakeCANID+0xe2>
 8007082:	4b36      	ldr	r3, [pc, #216]	@ (800715c <txMakeCANID+0x1b0>)
 8007084:	4a30      	ldr	r2, [pc, #192]	@ (8007148 <txMakeCANID+0x19c>)
 8007086:	21e9      	movs	r1, #233	@ 0xe9
 8007088:	4830      	ldr	r0, [pc, #192]	@ (800714c <txMakeCANID+0x1a0>)
 800708a:	f001 fe0f 	bl	8008cac <__assert_func>
            out = (int32_t) spec;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8007092:	e03a      	b.n	800710a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8007094:	f06f 0301 	mvn.w	r3, #1
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800709a:	e036      	b.n	800710a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d003      	beq.n	80070ac <txMakeCANID+0x100>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d12a      	bne.n	8007102 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	791b      	ldrb	r3, [r3, #4]
 80070b0:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	db25      	blt.n	8007102 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070be:	d220      	bcs.n	8007102 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80070c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	db18      	blt.n	80070fa <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	f7ff fee8 	bl	8006eb4 <txMakeServiceSessionSpecifier>
 80070e4:	4603      	mov	r3, r0
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da0f      	bge.n	800710e <txMakeCANID+0x162>
 80070ee:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <txMakeCANID+0x1a8>)
 80070f0:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <txMakeCANID+0x19c>)
 80070f2:	21fa      	movs	r1, #250	@ 0xfa
 80070f4:	4815      	ldr	r0, [pc, #84]	@ (800714c <txMakeCANID+0x1a0>)
 80070f6:	f001 fdd9 	bl	8008cac <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 80070fa:	f06f 0301 	mvn.w	r3, #1
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8007100:	e005      	b.n	800710e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8007102:	f06f 0301 	mvn.w	r3, #1
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
 8007108:	e002      	b.n	8007110 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800710e:	bf00      	nop
    }

    if (out >= 0)
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	db10      	blt.n	8007138 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b07      	cmp	r3, #7
 8007120:	d807      	bhi.n	8007132 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	069a      	lsls	r2, r3, #26
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007130:	e002      	b.n	8007138 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8007132:	f06f 0301 	mvn.w	r3, #1
 8007136:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	@ 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08009ec4 	.word	0x08009ec4
 8007148:	0800ab00 	.word	0x0800ab00
 800714c:	08009e44 	.word	0x08009e44
 8007150:	08009ed8 	.word	0x08009ed8
 8007154:	08009ef4 	.word	0x08009ef4
 8007158:	08009f00 	.word	0x08009f00
 800715c:	08009f34 	.word	0x08009f34

08007160 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4623      	mov	r3, r4
 8007170:	71fb      	strb	r3, [r7, #7]
 8007172:	4603      	mov	r3, r0
 8007174:	71bb      	strb	r3, [r7, #6]
 8007176:	460b      	mov	r3, r1
 8007178:	717b      	strb	r3, [r7, #5]
 800717a:	4613      	mov	r3, r2
 800717c:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <txMakeTailByte+0x38>
 8007184:	797b      	ldrb	r3, [r7, #5]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d006      	beq.n	8007198 <txMakeTailByte+0x38>
 800718a:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <txMakeTailByte+0x78>)
 800718c:	4a13      	ldr	r2, [pc, #76]	@ (80071dc <txMakeTailByte+0x7c>)
 800718e:	f240 111b 	movw	r1, #283	@ 0x11b
 8007192:	4813      	ldr	r0, [pc, #76]	@ (80071e0 <txMakeTailByte+0x80>)
 8007194:	f001 fd8a 	bl	8008cac <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <txMakeTailByte+0x42>
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	e000      	b.n	80071a4 <txMakeTailByte+0x44>
 80071a2:	2200      	movs	r2, #0
 80071a4:	79bb      	ldrb	r3, [r7, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <txMakeTailByte+0x4e>
 80071aa:	2340      	movs	r3, #64	@ 0x40
 80071ac:	e000      	b.n	80071b0 <txMakeTailByte+0x50>
 80071ae:	2300      	movs	r3, #0
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 80071b4:	797a      	ldrb	r2, [r7, #5]
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d001      	beq.n	80071be <txMakeTailByte+0x5e>
 80071ba:	2220      	movs	r2, #32
 80071bc:	e000      	b.n	80071c0 <txMakeTailByte+0x60>
 80071be:	2200      	movs	r2, #0
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 80071c4:	793b      	ldrb	r3, [r7, #4]
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b2db      	uxtb	r3, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}
 80071d8:	08009f50 	.word	0x08009f50
 80071dc:	0800aba8 	.word	0x0800aba8
 80071e0:	08009e44 	.word	0x08009e44

080071e4 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b40      	cmp	r3, #64	@ 0x40
 80071f0:	d906      	bls.n	8007200 <txRoundFramePayloadSizeUp+0x1c>
 80071f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007230 <txRoundFramePayloadSizeUp+0x4c>)
 80071f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007234 <txRoundFramePayloadSizeUp+0x50>)
 80071f6:	f44f 7192 	mov.w	r1, #292	@ 0x124
 80071fa:	480f      	ldr	r0, [pc, #60]	@ (8007238 <txRoundFramePayloadSizeUp+0x54>)
 80071fc:	f001 fd56 	bl	8008cac <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8007200:	4a0e      	ldr	r2, [pc, #56]	@ (800723c <txRoundFramePayloadSizeUp+0x58>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b0f      	cmp	r3, #15
 800720e:	d906      	bls.n	800721e <txRoundFramePayloadSizeUp+0x3a>
 8007210:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <txRoundFramePayloadSizeUp+0x5c>)
 8007212:	4a08      	ldr	r2, [pc, #32]	@ (8007234 <txRoundFramePayloadSizeUp+0x50>)
 8007214:	f240 1127 	movw	r1, #295	@ 0x127
 8007218:	4807      	ldr	r0, [pc, #28]	@ (8007238 <txRoundFramePayloadSizeUp+0x54>)
 800721a:	f001 fd47 	bl	8008cac <__assert_func>
    return CanardCANDLCToLength[y];
 800721e:	4a09      	ldr	r2, [pc, #36]	@ (8007244 <txRoundFramePayloadSizeUp+0x60>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	781b      	ldrb	r3, [r3, #0]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	08009f78 	.word	0x08009f78
 8007234:	0800ab78 	.word	0x0800ab78
 8007238:	08009e44 	.word	0x08009e44
 800723c:	0800aaa0 	.word	0x0800aaa0
 8007240:	08009fc0 	.word	0x08009fc0
 8007244:	0800aa90 	.word	0x0800aa90

08007248 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d106      	bne.n	800726a <txAllocateQueueItem+0x22>
 800725c:	4b1f      	ldr	r3, [pc, #124]	@ (80072dc <txAllocateQueueItem+0x94>)
 800725e:	4a20      	ldr	r2, [pc, #128]	@ (80072e0 <txAllocateQueueItem+0x98>)
 8007260:	f240 1131 	movw	r1, #305	@ 0x131
 8007264:	481f      	ldr	r0, [pc, #124]	@ (80072e4 <txAllocateQueueItem+0x9c>)
 8007266:	f001 fd21 	bl	8008cac <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <txAllocateQueueItem+0x36>
 8007270:	4b1d      	ldr	r3, [pc, #116]	@ (80072e8 <txAllocateQueueItem+0xa0>)
 8007272:	4a1b      	ldr	r2, [pc, #108]	@ (80072e0 <txAllocateQueueItem+0x98>)
 8007274:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8007278:	481a      	ldr	r0, [pc, #104]	@ (80072e4 <txAllocateQueueItem+0x9c>)
 800727a:	f001 fd17 	bl	8008cac <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	3230      	adds	r2, #48	@ 0x30
 8007286:	4611      	mov	r1, r2
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	4798      	blx	r3
 800728c:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01e      	beq.n	80072d2 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 80072b2:	6979      	ldr	r1, [r7, #20]
 80072b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b8:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	621a      	str	r2, [r3, #32]
    }
    return out;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	0800a008 	.word	0x0800a008
 80072e0:	0800ab94 	.word	0x0800ab94
 80072e4:	08009e44 	.word	0x08009e44
 80072e8:	0800a01c 	.word	0x0800a01c

080072ec <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <txAVLPredicate+0x1e>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <txAVLPredicate+0x2c>
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <txAVLPredicate+0x48>)
 800730c:	4a0a      	ldr	r2, [pc, #40]	@ (8007338 <txAVLPredicate+0x4c>)
 800730e:	f240 114d 	movw	r1, #333	@ 0x14d
 8007312:	480a      	ldr	r0, [pc, #40]	@ (800733c <txAVLPredicate+0x50>)
 8007314:	f001 fcca 	bl	8008cac <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1a      	ldr	r2, [r3, #32]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	429a      	cmp	r2, r3
 8007322:	d301      	bcc.n	8007328 <txAVLPredicate+0x3c>
 8007324:	2301      	movs	r3, #1
 8007326:	e001      	b.n	800732c <txAVLPredicate+0x40>
 8007328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	0800a030 	.word	0x0800a030
 8007338:	0800ab68 	.word	0x0800ab68
 800733c:	08009e44 	.word	0x08009e44

08007340 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b08d      	sub	sp, #52	@ 0x34
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <txPushSingleFrame+0x22>
 8007354:	4b5c      	ldr	r3, [pc, #368]	@ (80074c8 <txPushSingleFrame+0x188>)
 8007356:	4a5d      	ldr	r2, [pc, #372]	@ (80074cc <txPushSingleFrame+0x18c>)
 8007358:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800735c:	485c      	ldr	r0, [pc, #368]	@ (80074d0 <txPushSingleFrame+0x190>)
 800735e:	f001 fca5 	bl	8008cac <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8007362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <txPushSingleFrame+0x3c>
 8007368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <txPushSingleFrame+0x3c>
 800736e:	4b59      	ldr	r3, [pc, #356]	@ (80074d4 <txPushSingleFrame+0x194>)
 8007370:	4a56      	ldr	r2, [pc, #344]	@ (80074cc <txPushSingleFrame+0x18c>)
 8007372:	f240 115b 	movw	r1, #347	@ 0x15b
 8007376:	4856      	ldr	r0, [pc, #344]	@ (80074d0 <txPushSingleFrame+0x190>)
 8007378:	f001 fc98 	bl	8008cac <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800737c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800737e:	3301      	adds	r3, #1
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff ff2f 	bl	80071e4 <txRoundFramePayloadSizeUp>
 8007386:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800738c:	429a      	cmp	r2, r3
 800738e:	d806      	bhi.n	800739e <txPushSingleFrame+0x5e>
 8007390:	4b51      	ldr	r3, [pc, #324]	@ (80074d8 <txPushSingleFrame+0x198>)
 8007392:	4a4e      	ldr	r2, [pc, #312]	@ (80074cc <txPushSingleFrame+0x18c>)
 8007394:	f240 115d 	movw	r1, #349	@ 0x15d
 8007398:	484d      	ldr	r0, [pc, #308]	@ (80074d0 <txPushSingleFrame+0x190>)
 800739a:	f001 fc87 	bl	8008cac <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ac:	4413      	add	r3, r2
 80073ae:	3301      	adds	r3, #1
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d006      	beq.n	80073c4 <txPushSingleFrame+0x84>
 80073b6:	4b49      	ldr	r3, [pc, #292]	@ (80074dc <txPushSingleFrame+0x19c>)
 80073b8:	4a44      	ldr	r2, [pc, #272]	@ (80074cc <txPushSingleFrame+0x18c>)
 80073ba:	f240 115f 	movw	r1, #351	@ 0x15f
 80073be:	4844      	ldr	r0, [pc, #272]	@ (80074d0 <txPushSingleFrame+0x190>)
 80073c0:	f001 fc74 	bl	8008cac <__assert_func>
    int32_t       out = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d209      	bcs.n	80073e8 <txPushSingleFrame+0xa8>
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073de:	68b8      	ldr	r0, [r7, #8]
 80073e0:	f7ff ff32 	bl	8007248 <txAllocateQueueItem>
 80073e4:	4603      	mov	r3, r0
 80073e6:	e000      	b.n	80073ea <txPushSingleFrame+0xaa>
 80073e8:	2300      	movs	r3, #0
    TxItem* const tqi =
 80073ea:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d054      	beq.n	800749c <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 80073f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d010      	beq.n	800741a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 80073f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <txPushSingleFrame+0xcc>
 80073fe:	4b38      	ldr	r3, [pc, #224]	@ (80074e0 <txPushSingleFrame+0x1a0>)
 8007400:	4a32      	ldr	r2, [pc, #200]	@ (80074cc <txPushSingleFrame+0x18c>)
 8007402:	f240 1167 	movw	r1, #359	@ 0x167
 8007406:	4832      	ldr	r0, [pc, #200]	@ (80074d0 <txPushSingleFrame+0x190>)
 8007408:	f001 fc50 	bl	8008cac <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	3330      	adds	r3, #48	@ 0x30
 8007410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007414:	4618      	mov	r0, r3
 8007416:	f001 ff38 	bl	800928a <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800741a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741c:	3330      	adds	r3, #48	@ 0x30
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4413      	add	r3, r2
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fe5f 	bl	80090ea <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	1e5c      	subs	r4, r3, #1
 8007430:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007434:	2201      	movs	r2, #1
 8007436:	2101      	movs	r1, #1
 8007438:	2001      	movs	r0, #1
 800743a:	f7ff fe91 	bl	8007160 <txMakeTailByte>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4423      	add	r3, r4
 8007446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f103 000c 	add.w	r0, r3, #12
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <txPushSingleFrame+0x1a4>)
 8007454:	4a24      	ldr	r2, [pc, #144]	@ (80074e8 <txPushSingleFrame+0x1a8>)
 8007456:	f7ff fae7 	bl	8006a28 <cavlSearch>
 800745a:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	429a      	cmp	r2, r3
 8007462:	d006      	beq.n	8007472 <txPushSingleFrame+0x132>
 8007464:	4b21      	ldr	r3, [pc, #132]	@ (80074ec <txPushSingleFrame+0x1ac>)
 8007466:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <txPushSingleFrame+0x18c>)
 8007468:	f240 1173 	movw	r1, #371	@ 0x173
 800746c:	4818      	ldr	r0, [pc, #96]	@ (80074d0 <txPushSingleFrame+0x190>)
 800746e:	f001 fc1d 	bl	8008cac <__assert_func>
        que->size++;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d906      	bls.n	8007496 <txPushSingleFrame+0x156>
 8007488:	4b19      	ldr	r3, [pc, #100]	@ (80074f0 <txPushSingleFrame+0x1b0>)
 800748a:	4a10      	ldr	r2, [pc, #64]	@ (80074cc <txPushSingleFrame+0x18c>)
 800748c:	f240 1175 	movw	r1, #373	@ 0x175
 8007490:	480f      	ldr	r0, [pc, #60]	@ (80074d0 <txPushSingleFrame+0x190>)
 8007492:	f001 fc0b 	bl	8008cac <__assert_func>
        out = 1;  // One frame enqueued.
 8007496:	2301      	movs	r3, #1
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
 800749a:	e002      	b.n	80074a2 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800749c:	f06f 0302 	mvn.w	r3, #2
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db09      	blt.n	80074bc <txPushSingleFrame+0x17c>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d006      	beq.n	80074bc <txPushSingleFrame+0x17c>
 80074ae:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <txPushSingleFrame+0x1b4>)
 80074b0:	4a06      	ldr	r2, [pc, #24]	@ (80074cc <txPushSingleFrame+0x18c>)
 80074b2:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80074b6:	4806      	ldr	r0, [pc, #24]	@ (80074d0 <txPushSingleFrame+0x190>)
 80074b8:	f001 fbf8 	bl	8008cac <__assert_func>
    return out;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074be:	4618      	mov	r0, r3
 80074c0:	372c      	adds	r7, #44	@ 0x2c
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd90      	pop	{r4, r7, pc}
 80074c6:	bf00      	nop
 80074c8:	0800a008 	.word	0x0800a008
 80074cc:	0800ab54 	.word	0x0800ab54
 80074d0:	08009e44 	.word	0x08009e44
 80074d4:	0800a064 	.word	0x0800a064
 80074d8:	0800a094 	.word	0x0800a094
 80074dc:	0800a0b8 	.word	0x0800a0b8
 80074e0:	0800a0f4 	.word	0x0800a0f4
 80074e4:	08006d89 	.word	0x08006d89
 80074e8:	080072ed 	.word	0x080072ed
 80074ec:	0800a10c 	.word	0x0800a10c
 80074f0:	0800a124 	.word	0x0800a124
 80074f4:	0800a140 	.word	0x0800a140

080074f8 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b093      	sub	sp, #76	@ 0x4c
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <txGenerateMultiFrameChain+0x20>
 800750a:	4b93      	ldr	r3, [pc, #588]	@ (8007758 <txGenerateMultiFrameChain+0x260>)
 800750c:	4a93      	ldr	r2, [pc, #588]	@ (800775c <txGenerateMultiFrameChain+0x264>)
 800750e:	f240 1189 	movw	r1, #393	@ 0x189
 8007512:	4893      	ldr	r0, [pc, #588]	@ (8007760 <txGenerateMultiFrameChain+0x268>)
 8007514:	f001 fbca 	bl	8008cac <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <txGenerateMultiFrameChain+0x34>
 800751e:	4b91      	ldr	r3, [pc, #580]	@ (8007764 <txGenerateMultiFrameChain+0x26c>)
 8007520:	4a8e      	ldr	r2, [pc, #568]	@ (800775c <txGenerateMultiFrameChain+0x264>)
 8007522:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8007526:	488e      	ldr	r0, [pc, #568]	@ (8007760 <txGenerateMultiFrameChain+0x268>)
 8007528:	f001 fbc0 	bl	8008cac <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800752c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d806      	bhi.n	8007542 <txGenerateMultiFrameChain+0x4a>
 8007534:	4b8c      	ldr	r3, [pc, #560]	@ (8007768 <txGenerateMultiFrameChain+0x270>)
 8007536:	4a89      	ldr	r2, [pc, #548]	@ (800775c <txGenerateMultiFrameChain+0x264>)
 8007538:	f240 118b 	movw	r1, #395	@ 0x18b
 800753c:	4888      	ldr	r0, [pc, #544]	@ (8007760 <txGenerateMultiFrameChain+0x268>)
 800753e:	f001 fbb5 	bl	8008cac <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8007542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <txGenerateMultiFrameChain+0x5e>
 8007548:	4b88      	ldr	r3, [pc, #544]	@ (800776c <txGenerateMultiFrameChain+0x274>)
 800754a:	4a84      	ldr	r2, [pc, #528]	@ (800775c <txGenerateMultiFrameChain+0x264>)
 800754c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8007550:	4883      	ldr	r0, [pc, #524]	@ (8007760 <txGenerateMultiFrameChain+0x268>)
 8007552:	f001 fbab 	bl	8008cac <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	2300      	movs	r3, #0
 8007560:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8007562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007564:	3302      	adds	r3, #2
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800756c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800756e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007570:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007574:	f7ff fc34 	bl	8006de0 <crcAdd>
 8007578:	4603      	mov	r3, r0
 800757a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8007582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8007586:	e0d4      	b.n	8007732 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	3301      	adds	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800758e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007592:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d908      	bls.n	80075ac <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800759a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800759c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	3301      	adds	r3, #1
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fe1e 	bl	80071e4 <txRoundFramePayloadSizeUp>
 80075a8:	4603      	mov	r3, r0
 80075aa:	e001      	b.n	80075b0 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80075bc:	68b8      	ldr	r0, [r7, #8]
 80075be:	f7ff fe43 	bl	8007248 <txAllocateQueueItem>
 80075c2:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	e002      	b.n	80075d6 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80ae 	beq.w	800773e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	3b01      	subs	r3, #1
 80075e6:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80075ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d21c      	bcs.n	800762e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80075f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 80075fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	429a      	cmp	r2, r3
 8007602:	d901      	bls.n	8007608 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3330      	adds	r3, #48	@ 0x30
 800760c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800760e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fe3a 	bl	800928a <memcpy>
            frame_offset = frame_offset + move_size;
 8007616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761a:	4413      	add	r3, r2
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 800761e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	4413      	add	r3, r2
 8007624:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8007626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	4413      	add	r3, r2
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800762e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007632:	429a      	cmp	r2, r3
 8007634:	d343      	bcc.n	80076be <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8007636:	e00f      	b.n	8007658 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	4413      	add	r3, r2
 800763e:	3330      	adds	r3, #48	@ 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	3301      	adds	r3, #1
 8007648:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800764a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fba6 	bl	8006da0 <crcAddByte>
 8007654:	4603      	mov	r3, r0
 8007656:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	3302      	adds	r3, #2
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	429a      	cmp	r2, r3
 8007660:	d8ea      	bhi.n	8007638 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8007662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	429a      	cmp	r2, r3
 8007668:	d213      	bcs.n	8007692 <txGenerateMultiFrameChain+0x19a>
 800766a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800766c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800766e:	429a      	cmp	r2, r3
 8007670:	d10f      	bne.n	8007692 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8007672:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	b29b      	uxth	r3, r3
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	b2d9      	uxtb	r1, r3
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	4413      	add	r3, r2
 8007680:	3330      	adds	r3, #48	@ 0x30
 8007682:	460a      	mov	r2, r1
 8007684:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	3301      	adds	r3, #1
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800768c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768e:	3301      	adds	r3, #1
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8007692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	429a      	cmp	r2, r3
 8007698:	d211      	bcs.n	80076be <txGenerateMultiFrameChain+0x1c6>
 800769a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800769c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800769e:	429a      	cmp	r2, r3
 80076a0:	d90d      	bls.n	80076be <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80076a6:	b2d9      	uxtb	r1, r3
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	4413      	add	r3, r2
 80076ac:	3330      	adds	r3, #48	@ 0x30
 80076ae:	460a      	mov	r2, r1
 80076b0:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	3301      	adds	r3, #1
 80076b6:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 80076b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ba:	3301      	adds	r3, #1
 80076bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d006      	beq.n	80076d8 <txGenerateMultiFrameChain+0x1e0>
 80076ca:	4b29      	ldr	r3, [pc, #164]	@ (8007770 <txGenerateMultiFrameChain+0x278>)
 80076cc:	4a23      	ldr	r2, [pc, #140]	@ (800775c <txGenerateMultiFrameChain+0x264>)
 80076ce:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80076d2:	4823      	ldr	r0, [pc, #140]	@ (8007760 <txGenerateMultiFrameChain+0x268>)
 80076d4:	f001 faea 	bl	8008cac <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	429a      	cmp	r2, r3
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2d8      	uxtb	r0, r3
 80076e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ea:	429a      	cmp	r2, r3
 80076ec:	bf2c      	ite	cs
 80076ee:	2301      	movcs	r3, #1
 80076f0:	2300      	movcc	r3, #0
 80076f2:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80076f4:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80076f6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80076fa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80076fe:	f7ff fd2f 	bl	8007160 <txMakeTailByte>
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	4423      	add	r3, r4
 800770a:	3330      	adds	r3, #48	@ 0x30
 800770c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800770e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf14      	ite	ne
 8007716:	2301      	movne	r3, #1
 8007718:	2300      	moveq	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f083 0301 	eor.w	r3, r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8007726:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8007732:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	429a      	cmp	r2, r3
 8007738:	f4ff af26 	bcc.w	8007588 <txGenerateMultiFrameChain+0x90>
 800773c:	e000      	b.n	8007740 <txGenerateMultiFrameChain+0x248>
            break;
 800773e:	bf00      	nop
    }
    return out;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	461c      	mov	r4, r3
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800774c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	3744      	adds	r7, #68	@ 0x44
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}
 8007758:	0800a008 	.word	0x0800a008
 800775c:	0800ac24 	.word	0x0800ac24
 8007760:	08009e44 	.word	0x08009e44
 8007764:	0800a158 	.word	0x0800a158
 8007768:	0800a174 	.word	0x0800a174
 800776c:	0800a0f4 	.word	0x0800a0f4
 8007770:	0800a19c 	.word	0x0800a19c

08007774 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b094      	sub	sp, #80	@ 0x50
 8007778:	af06      	add	r7, sp, #24
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <txPushMultiFrame+0x18>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <txPushMultiFrame+0x26>
 800778c:	4b65      	ldr	r3, [pc, #404]	@ (8007924 <txPushMultiFrame+0x1b0>)
 800778e:	4a66      	ldr	r2, [pc, #408]	@ (8007928 <txPushMultiFrame+0x1b4>)
 8007790:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8007794:	4865      	ldr	r0, [pc, #404]	@ (800792c <txPushMultiFrame+0x1b8>)
 8007796:	f001 fa89 	bl	8008cac <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <txPushMultiFrame+0x3a>
 80077a0:	4b63      	ldr	r3, [pc, #396]	@ (8007930 <txPushMultiFrame+0x1bc>)
 80077a2:	4a61      	ldr	r2, [pc, #388]	@ (8007928 <txPushMultiFrame+0x1b4>)
 80077a4:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80077a8:	4860      	ldr	r0, [pc, #384]	@ (800792c <txPushMultiFrame+0x1b8>)
 80077aa:	f001 fa7f 	bl	8008cac <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80077ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d806      	bhi.n	80077c4 <txPushMultiFrame+0x50>
 80077b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007934 <txPushMultiFrame+0x1c0>)
 80077b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007928 <txPushMultiFrame+0x1b4>)
 80077ba:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 80077be:	485b      	ldr	r0, [pc, #364]	@ (800792c <txPushMultiFrame+0x1b8>)
 80077c0:	f001 fa74 	bl	8008cac <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 80077c4:	2300      	movs	r3, #0
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 80077c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ca:	3302      	adds	r3, #2
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 80077ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d806      	bhi.n	80077f2 <txPushMultiFrame+0x7e>
 80077e4:	4b54      	ldr	r3, [pc, #336]	@ (8007938 <txPushMultiFrame+0x1c4>)
 80077e6:	4a50      	ldr	r2, [pc, #320]	@ (8007928 <txPushMultiFrame+0x1b4>)
 80077e8:	f240 11f3 	movw	r1, #499	@ 0x1f3
 80077ec:	484f      	ldr	r0, [pc, #316]	@ (800792c <txPushMultiFrame+0x1b8>)
 80077ee:	f001 fa5d 	bl	8008cac <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	441a      	add	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d87b      	bhi.n	80078fa <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8007802:	f107 0010 	add.w	r0, r7, #16
 8007806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800781c:	e9cd 2300 	strd	r2, r3, [sp]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	f7ff fe68 	bl	80074f8 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d051      	beq.n	80078d2 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f103 000c 	add.w	r0, r3, #12
 8007838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800783a:	4b40      	ldr	r3, [pc, #256]	@ (800793c <txPushMultiFrame+0x1c8>)
 800783c:	4a40      	ldr	r2, [pc, #256]	@ (8007940 <txPushMultiFrame+0x1cc>)
 800783e:	f7ff f8f3 	bl	8006a28 <cavlSearch>
 8007842:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	429a      	cmp	r2, r3
 800784a:	d006      	beq.n	800785a <txPushMultiFrame+0xe6>
 800784c:	4b3d      	ldr	r3, [pc, #244]	@ (8007944 <txPushMultiFrame+0x1d0>)
 800784e:	4a36      	ldr	r2, [pc, #216]	@ (8007928 <txPushMultiFrame+0x1b4>)
 8007850:	f240 2105 	movw	r1, #517	@ 0x205
 8007854:	4835      	ldr	r0, [pc, #212]	@ (800792c <txPushMultiFrame+0x1b8>)
 8007856:	f001 fa29 	bl	8008cac <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <txPushMultiFrame+0xfc>
 8007862:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <txPushMultiFrame+0x1d4>)
 8007864:	4a30      	ldr	r2, [pc, #192]	@ (8007928 <txPushMultiFrame+0x1b4>)
 8007866:	f240 2106 	movw	r1, #518	@ 0x206
 800786a:	4830      	ldr	r0, [pc, #192]	@ (800792c <txPushMultiFrame+0x1b8>)
 800786c:	f001 fa1e 	bl	8008cac <__assert_func>
                next = next->next_in_transfer;
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1da      	bne.n	8007832 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007880:	429a      	cmp	r2, r3
 8007882:	d006      	beq.n	8007892 <txPushMultiFrame+0x11e>
 8007884:	4b31      	ldr	r3, [pc, #196]	@ (800794c <txPushMultiFrame+0x1d8>)
 8007886:	4a28      	ldr	r2, [pc, #160]	@ (8007928 <txPushMultiFrame+0x1b4>)
 8007888:	f240 2109 	movw	r1, #521	@ 0x209
 800788c:	4827      	ldr	r0, [pc, #156]	@ (800792c <txPushMultiFrame+0x1b8>)
 800788e:	f001 fa0d 	bl	8008cac <__assert_func>
            que->size += sq.size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	441a      	add	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d906      	bls.n	80078b8 <txPushMultiFrame+0x144>
 80078aa:	4b29      	ldr	r3, [pc, #164]	@ (8007950 <txPushMultiFrame+0x1dc>)
 80078ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007928 <txPushMultiFrame+0x1b4>)
 80078ae:	f240 210b 	movw	r1, #523	@ 0x20b
 80078b2:	481e      	ldr	r0, [pc, #120]	@ (800792c <txPushMultiFrame+0x1b8>)
 80078b4:	f001 f9fa 	bl	8008cac <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da06      	bge.n	80078cc <txPushMultiFrame+0x158>
 80078be:	4b25      	ldr	r3, [pc, #148]	@ (8007954 <txPushMultiFrame+0x1e0>)
 80078c0:	4a19      	ldr	r2, [pc, #100]	@ (8007928 <txPushMultiFrame+0x1b4>)
 80078c2:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 80078c6:	4819      	ldr	r0, [pc, #100]	@ (800792c <txPushMultiFrame+0x1b8>)
 80078c8:	f001 f9f0 	bl	8008cac <__assert_func>
            out = (int32_t) sq.size;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	e016      	b.n	8007900 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80078d2:	f06f 0302 	mvn.w	r3, #2
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80078dc:	e009      	b.n	80078f2 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078ea:	68b8      	ldr	r0, [r7, #8]
 80078ec:	4798      	blx	r3
                head = next;
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1f2      	bne.n	80078de <txPushMultiFrame+0x16a>
 80078f8:	e002      	b.n	8007900 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80078fa:	f06f 0302 	mvn.w	r3, #2
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8007900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	db09      	blt.n	800791a <txPushMultiFrame+0x1a6>
 8007906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007908:	2b01      	cmp	r3, #1
 800790a:	dc06      	bgt.n	800791a <txPushMultiFrame+0x1a6>
 800790c:	4b12      	ldr	r3, [pc, #72]	@ (8007958 <txPushMultiFrame+0x1e4>)
 800790e:	4a06      	ldr	r2, [pc, #24]	@ (8007928 <txPushMultiFrame+0x1b4>)
 8007910:	f240 211f 	movw	r1, #543	@ 0x21f
 8007914:	4805      	ldr	r0, [pc, #20]	@ (800792c <txPushMultiFrame+0x1b8>)
 8007916:	f001 f9c9 	bl	8008cac <__assert_func>
    return out;
 800791a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800791c:	4618      	mov	r0, r3
 800791e:	3738      	adds	r7, #56	@ 0x38
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	0800a1d8 	.word	0x0800a1d8
 8007928:	0800ac10 	.word	0x0800ac10
 800792c:	08009e44 	.word	0x08009e44
 8007930:	0800a158 	.word	0x0800a158
 8007934:	0800a174 	.word	0x0800a174
 8007938:	0800a208 	.word	0x0800a208
 800793c:	08006d89 	.word	0x08006d89
 8007940:	080072ed 	.word	0x080072ed
 8007944:	0800a218 	.word	0x0800a218
 8007948:	0800a22c 	.word	0x0800a22c
 800794c:	0800a248 	.word	0x0800a248
 8007950:	0800a124 	.word	0x0800a124
 8007954:	0800a260 	.word	0x0800a260
 8007958:	0800a284 	.word	0x0800a284

0800795c <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <rxTryParseFrame+0x22>
 8007970:	4b96      	ldr	r3, [pc, #600]	@ (8007bcc <rxTryParseFrame+0x270>)
 8007972:	4a97      	ldr	r2, [pc, #604]	@ (8007bd0 <rxTryParseFrame+0x274>)
 8007974:	f240 214e 	movw	r1, #590	@ 0x24e
 8007978:	4896      	ldr	r0, [pc, #600]	@ (8007bd4 <rxTryParseFrame+0x278>)
 800797a:	f001 f997 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007986:	d306      	bcc.n	8007996 <rxTryParseFrame+0x3a>
 8007988:	4b93      	ldr	r3, [pc, #588]	@ (8007bd8 <rxTryParseFrame+0x27c>)
 800798a:	4a91      	ldr	r2, [pc, #580]	@ (8007bd0 <rxTryParseFrame+0x274>)
 800798c:	f240 214f 	movw	r1, #591	@ 0x24f
 8007990:	4890      	ldr	r0, [pc, #576]	@ (8007bd4 <rxTryParseFrame+0x278>)
 8007992:	f001 f98b 	bl	8008cac <__assert_func>
    CANARD_ASSERT(out != NULL);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <rxTryParseFrame+0x4e>
 800799c:	4b8f      	ldr	r3, [pc, #572]	@ (8007bdc <rxTryParseFrame+0x280>)
 800799e:	4a8c      	ldr	r2, [pc, #560]	@ (8007bd0 <rxTryParseFrame+0x274>)
 80079a0:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80079a4:	488b      	ldr	r0, [pc, #556]	@ (8007bd4 <rxTryParseFrame+0x278>)
 80079a6:	f001 f981 	bl	8008cac <__assert_func>
    bool valid = false;
 80079aa:	2300      	movs	r3, #0
 80079ac:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8105 	beq.w	8007bc2 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <rxTryParseFrame+0x72>
 80079c0:	4b87      	ldr	r3, [pc, #540]	@ (8007be0 <rxTryParseFrame+0x284>)
 80079c2:	4a83      	ldr	r2, [pc, #524]	@ (8007bd0 <rxTryParseFrame+0x274>)
 80079c4:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80079c8:	4882      	ldr	r0, [pc, #520]	@ (8007bd4 <rxTryParseFrame+0x278>)
 80079ca:	f001 f96f 	bl	8008cac <__assert_func>
        out->timestamp_usec = timestamp_usec;
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d4:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	0e9b      	lsrs	r3, r3, #26
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d128      	bne.n	8007a58 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	22ff      	movs	r2, #255	@ 0xff
 8007a2a:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	22ff      	movs	r2, #255	@ 0xff
 8007a30:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <rxTryParseFrame+0xee>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <rxTryParseFrame+0xee>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <rxTryParseFrame+0xf0>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e02c      	b.n	8007ab2 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <rxTryParseFrame+0x10a>
 8007a62:	2202      	movs	r2, #2
 8007a64:	e000      	b.n	8007a68 <rxTryParseFrame+0x10c>
 8007a66:	2201      	movs	r2, #1
            out->transfer_kind =
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	0b9b      	lsrs	r3, r3, #14
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	09db      	lsrs	r3, r3, #7
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <rxTryParseFrame+0x14a>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	7b1a      	ldrb	r2, [r3, #12]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	7b5b      	ldrb	r3, [r3, #13]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d001      	beq.n	8007aa6 <rxTryParseFrame+0x14a>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <rxTryParseFrame+0x14c>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	7ffb      	ldrb	r3, [r7, #31]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	1e5a      	subs	r2, r3, #1
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	699a      	ldr	r2, [r3, #24]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 8007ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	09db      	lsrs	r3, r3, #7
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8007b14:	7ffb      	ldrb	r3, [r7, #31]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00c      	beq.n	8007b34 <rxTryParseFrame+0x1d8>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	7bdb      	ldrb	r3, [r3, #15]
 8007b1e:	f083 0301 	eor.w	r3, r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <rxTryParseFrame+0x1d4>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	7c5b      	ldrb	r3, [r3, #17]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <rxTryParseFrame+0x1d8>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <rxTryParseFrame+0x1da>
 8007b34:	2300      	movs	r3, #0
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	7ffb      	ldrb	r3, [r7, #31]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8007b40:	7ffb      	ldrb	r3, [r7, #31]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00d      	beq.n	8007b62 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <rxTryParseFrame+0x202>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	7b1b      	ldrb	r3, [r3, #12]
 8007b5a:	2bff      	cmp	r3, #255	@ 0xff
 8007b5c:	d001      	beq.n	8007b62 <rxTryParseFrame+0x206>
        valid = valid &&
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <rxTryParseFrame+0x208>
 8007b62:	2300      	movs	r3, #0
 8007b64:	77fb      	strb	r3, [r7, #31]
 8007b66:	7ffb      	ldrb	r3, [r7, #31]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8007b6e:	7ffb      	ldrb	r3, [r7, #31]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <rxTryParseFrame+0x22c>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	2b06      	cmp	r3, #6
 8007b7a:	d803      	bhi.n	8007b84 <rxTryParseFrame+0x228>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	7c1b      	ldrb	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <rxTryParseFrame+0x22c>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <rxTryParseFrame+0x22e>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	77fb      	strb	r3, [r7, #31]
 8007b8c:	7ffb      	ldrb	r3, [r7, #31]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8007b94:	7ffb      	ldrb	r3, [r7, #31]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <rxTryParseFrame+0x25a>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d107      	bne.n	8007bb2 <rxTryParseFrame+0x256>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	7bdb      	ldrb	r3, [r3, #15]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <rxTryParseFrame+0x25a>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	7c1b      	ldrb	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <rxTryParseFrame+0x25a>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <rxTryParseFrame+0x25c>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	7ffb      	ldrb	r3, [r7, #31]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8007bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	0800a29c 	.word	0x0800a29c
 8007bd0:	0800ac60 	.word	0x0800ac60
 8007bd4:	08009e44 	.word	0x08009e44
 8007bd8:	0800a2b4 	.word	0x0800a2b4
 8007bdc:	0800a2e4 	.word	0x0800a2e4
 8007be0:	0800a2f8 	.word	0x0800a2f8

08007be4 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <rxInitTransferMetadataFromFrame+0x1e>
 8007bf4:	4b19      	ldr	r3, [pc, #100]	@ (8007c5c <rxInitTransferMetadataFromFrame+0x78>)
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c60 <rxInitTransferMetadataFromFrame+0x7c>)
 8007bf8:	f240 218f 	movw	r1, #655	@ 0x28f
 8007bfc:	4819      	ldr	r0, [pc, #100]	@ (8007c64 <rxInitTransferMetadataFromFrame+0x80>)
 8007bfe:	f001 f855 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <rxInitTransferMetadataFromFrame+0x34>
 8007c0a:	4b17      	ldr	r3, [pc, #92]	@ (8007c68 <rxInitTransferMetadataFromFrame+0x84>)
 8007c0c:	4a14      	ldr	r2, [pc, #80]	@ (8007c60 <rxInitTransferMetadataFromFrame+0x7c>)
 8007c0e:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8007c12:	4814      	ldr	r0, [pc, #80]	@ (8007c64 <rxInitTransferMetadataFromFrame+0x80>)
 8007c14:	f001 f84a 	bl	8008cac <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <rxInitTransferMetadataFromFrame+0x48>
 8007c1e:	4b13      	ldr	r3, [pc, #76]	@ (8007c6c <rxInitTransferMetadataFromFrame+0x88>)
 8007c20:	4a0f      	ldr	r2, [pc, #60]	@ (8007c60 <rxInitTransferMetadataFromFrame+0x7c>)
 8007c22:	f240 2191 	movw	r1, #657	@ 0x291
 8007c26:	480f      	ldr	r0, [pc, #60]	@ (8007c64 <rxInitTransferMetadataFromFrame+0x80>)
 8007c28:	f001 f840 	bl	8008cac <__assert_func>
    out_transfer->priority       = frame->priority;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7a1a      	ldrb	r2, [r3, #8]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	7a5a      	ldrb	r2, [r3, #9]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	895a      	ldrh	r2, [r3, #10]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7b1a      	ldrb	r2, [r3, #12]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7b9a      	ldrb	r2, [r3, #14]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	715a      	strb	r2, [r3, #5]
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	0800a29c 	.word	0x0800a29c
 8007c60:	0800acf4 	.word	0x0800acf4
 8007c64:	08009e44 	.word	0x08009e44
 8007c68:	0800a2f8 	.word	0x0800a2f8
 8007c6c:	0800a318 	.word	0x0800a318

08007c70 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	460a      	mov	r2, r1
 8007c7a:	71fb      	strb	r3, [r7, #7]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	2b1f      	cmp	r3, #31
 8007c84:	d906      	bls.n	8007c94 <rxComputeTransferIDDifference+0x24>
 8007c86:	4b15      	ldr	r3, [pc, #84]	@ (8007cdc <rxComputeTransferIDDifference+0x6c>)
 8007c88:	4a15      	ldr	r2, [pc, #84]	@ (8007ce0 <rxComputeTransferIDDifference+0x70>)
 8007c8a:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8007c8e:	4815      	ldr	r0, [pc, #84]	@ (8007ce4 <rxComputeTransferIDDifference+0x74>)
 8007c90:	f001 f80c 	bl	8008cac <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8007c94:	79bb      	ldrb	r3, [r7, #6]
 8007c96:	2b1f      	cmp	r3, #31
 8007c98:	d906      	bls.n	8007ca8 <rxComputeTransferIDDifference+0x38>
 8007c9a:	4b13      	ldr	r3, [pc, #76]	@ (8007ce8 <rxComputeTransferIDDifference+0x78>)
 8007c9c:	4a10      	ldr	r2, [pc, #64]	@ (8007ce0 <rxComputeTransferIDDifference+0x70>)
 8007c9e:	f240 219d 	movw	r1, #669	@ 0x29d
 8007ca2:	4810      	ldr	r0, [pc, #64]	@ (8007ce4 <rxComputeTransferIDDifference+0x74>)
 8007ca4:	f001 f802 	bl	8008cac <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	79bb      	ldrb	r3, [r7, #6]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8007cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	da07      	bge.n	8007cce <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 8007cbe:	2320      	movs	r3, #32
 8007cc0:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8007cc2:	7b7b      	ldrb	r3, [r7, #13]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	89fb      	ldrh	r3, [r7, #14]
 8007cc8:	4413      	add	r3, r2
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	b2db      	uxtb	r3, r3
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	0800a334 	.word	0x0800a334
 8007ce0:	0800ac90 	.word	0x0800ac90
 8007ce4:	08009e44 	.word	0x08009e44
 8007ce8:	0800a34c 	.word	0x0800a34c

08007cec <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <rxSessionWritePayload+0x22>
 8007d00:	4b67      	ldr	r3, [pc, #412]	@ (8007ea0 <rxSessionWritePayload+0x1b4>)
 8007d02:	4a68      	ldr	r2, [pc, #416]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d04:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8007d08:	4867      	ldr	r0, [pc, #412]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d0a:	f000 ffcf 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <rxSessionWritePayload+0x36>
 8007d14:	4b65      	ldr	r3, [pc, #404]	@ (8007eac <rxSessionWritePayload+0x1c0>)
 8007d16:	4a63      	ldr	r2, [pc, #396]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d18:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8007d1c:	4862      	ldr	r0, [pc, #392]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d1e:	f000 ffc5 	bl	8008cac <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d109      	bne.n	8007d3c <rxSessionWritePayload+0x50>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <rxSessionWritePayload+0x50>
 8007d2e:	4b60      	ldr	r3, [pc, #384]	@ (8007eb0 <rxSessionWritePayload+0x1c4>)
 8007d30:	4a5c      	ldr	r2, [pc, #368]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d32:	f240 21af 	movw	r1, #687	@ 0x2af
 8007d36:	485c      	ldr	r0, [pc, #368]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d38:	f000 ffb8 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d206      	bcs.n	8007d54 <rxSessionWritePayload+0x68>
 8007d46:	4b5b      	ldr	r3, [pc, #364]	@ (8007eb4 <rxSessionWritePayload+0x1c8>)
 8007d48:	4a56      	ldr	r2, [pc, #344]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d4a:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8007d4e:	4856      	ldr	r0, [pc, #344]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d50:	f000 ffac 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d906      	bls.n	8007d6e <rxSessionWritePayload+0x82>
 8007d60:	4b55      	ldr	r3, [pc, #340]	@ (8007eb8 <rxSessionWritePayload+0x1cc>)
 8007d62:	4a50      	ldr	r2, [pc, #320]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d64:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8007d68:	484f      	ldr	r0, [pc, #316]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d6a:	f000 ff9f 	bl	8008cac <__assert_func>

    rxs->total_payload_size += payload_size;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	441a      	add	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d115      	bne.n	8007dae <rxSessionWritePayload+0xc2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d012      	beq.n	8007dae <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d006      	beq.n	8007d9e <rxSessionWritePayload+0xb2>
 8007d90:	4b4a      	ldr	r3, [pc, #296]	@ (8007ebc <rxSessionWritePayload+0x1d0>)
 8007d92:	4a44      	ldr	r2, [pc, #272]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007d94:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8007d98:	4843      	ldr	r0, [pc, #268]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007d9a:	f000 ff87 	bl	8008cac <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	4798      	blx	r3
 8007da8:	4602      	mov	r2, r0
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d04e      	beq.n	8007e58 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d229      	bcs.n	8007e20 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d206      	bcs.n	8007de4 <rxSessionWritePayload+0xf8>
 8007dd6:	4b37      	ldr	r3, [pc, #220]	@ (8007eb4 <rxSessionWritePayload+0x1c8>)
 8007dd8:	4a32      	ldr	r2, [pc, #200]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007dda:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8007dde:	4832      	ldr	r0, [pc, #200]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007de0:	f000 ff64 	bl	8008cac <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d006      	beq.n	8007e0a <rxSessionWritePayload+0x11e>
 8007dfc:	4b30      	ldr	r3, [pc, #192]	@ (8007ec0 <rxSessionWritePayload+0x1d4>)
 8007dfe:	4a29      	ldr	r2, [pc, #164]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007e00:	f240 21c5 	movw	r1, #709	@ 0x2c5
 8007e04:	4828      	ldr	r0, [pc, #160]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007e06:	f000 ff51 	bl	8008cac <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d306      	bcc.n	8007e20 <rxSessionWritePayload+0x134>
 8007e12:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec4 <rxSessionWritePayload+0x1d8>)
 8007e14:	4a23      	ldr	r2, [pc, #140]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007e16:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8007e1a:	4823      	ldr	r0, [pc, #140]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007e1c:	f000 ff46 	bl	8008cac <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	6a39      	ldr	r1, [r7, #32]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 fa2b 	bl	800928a <memcpy>
        rxs->payload_size += bytes_to_copy;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d219      	bcs.n	8007e7e <rxSessionWritePayload+0x192>
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb4 <rxSessionWritePayload+0x1c8>)
 8007e4c:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007e4e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8007e52:	4815      	ldr	r0, [pc, #84]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007e54:	f000 ff2a 	bl	8008cac <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d006      	beq.n	8007e6e <rxSessionWritePayload+0x182>
 8007e60:	4b16      	ldr	r3, [pc, #88]	@ (8007ebc <rxSessionWritePayload+0x1d0>)
 8007e62:	4a10      	ldr	r2, [pc, #64]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007e64:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8007e68:	480f      	ldr	r0, [pc, #60]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007e6a:	f000 ff1f 	bl	8008cac <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <rxSessionWritePayload+0x18e>
 8007e74:	f06f 0302 	mvn.w	r3, #2
 8007e78:	e000      	b.n	8007e7c <rxSessionWritePayload+0x190>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8007e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dd06      	ble.n	8007e94 <rxSessionWritePayload+0x1a8>
 8007e86:	4b10      	ldr	r3, [pc, #64]	@ (8007ec8 <rxSessionWritePayload+0x1dc>)
 8007e88:	4a06      	ldr	r2, [pc, #24]	@ (8007ea4 <rxSessionWritePayload+0x1b8>)
 8007e8a:	f240 21d7 	movw	r1, #727	@ 0x2d7
 8007e8e:	4806      	ldr	r0, [pc, #24]	@ (8007ea8 <rxSessionWritePayload+0x1bc>)
 8007e90:	f000 ff0c 	bl	8008cac <__assert_func>
    return out;
 8007e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	0800a008 	.word	0x0800a008
 8007ea4:	0800acdc 	.word	0x0800acdc
 8007ea8:	08009e44 	.word	0x08009e44
 8007eac:	0800a364 	.word	0x0800a364
 8007eb0:	08009f00 	.word	0x08009f00
 8007eb4:	0800a378 	.word	0x0800a378
 8007eb8:	0800a394 	.word	0x0800a394
 8007ebc:	0800a3c4 	.word	0x0800a3c4
 8007ec0:	0800a3dc 	.word	0x0800a3dc
 8007ec4:	0800a40c 	.word	0x0800a40c
 8007ec8:	0800a42c 	.word	0x0800a42c

08007ecc <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <rxSessionRestart+0x1e>
 8007edc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f48 <rxSessionRestart+0x7c>)
 8007ede:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <rxSessionRestart+0x80>)
 8007ee0:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8007ee4:	481a      	ldr	r0, [pc, #104]	@ (8007f50 <rxSessionRestart+0x84>)
 8007ee6:	f000 fee1 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <rxSessionRestart+0x32>
 8007ef0:	4b18      	ldr	r3, [pc, #96]	@ (8007f54 <rxSessionRestart+0x88>)
 8007ef2:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <rxSessionRestart+0x80>)
 8007ef4:	f240 21de 	movw	r1, #734	@ 0x2de
 8007ef8:	4815      	ldr	r0, [pc, #84]	@ (8007f50 <rxSessionRestart+0x84>)
 8007efa:	f000 fed7 	bl	8008cac <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	6912      	ldr	r2, [r2, #16]
 8007f06:	4611      	mov	r1, r2
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f24:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	7d9b      	ldrb	r3, [r3, #22]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	761a      	strb	r2, [r3, #24]
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	0800a008 	.word	0x0800a008
 8007f4c:	0800acb0 	.word	0x0800acb0
 8007f50:	08009e44 	.word	0x08009e44
 8007f54:	0800a364 	.word	0x0800a364

08007f58 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <rxSessionAcceptFrame+0x22>
 8007f6c:	4b81      	ldr	r3, [pc, #516]	@ (8008174 <rxSessionAcceptFrame+0x21c>)
 8007f6e:	4a82      	ldr	r2, [pc, #520]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007f70:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f74:	4881      	ldr	r0, [pc, #516]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007f76:	f000 fe99 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <rxSessionAcceptFrame+0x36>
 8007f80:	4b7f      	ldr	r3, [pc, #508]	@ (8008180 <rxSessionAcceptFrame+0x228>)
 8007f82:	4a7d      	ldr	r2, [pc, #500]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007f84:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8007f88:	487c      	ldr	r0, [pc, #496]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007f8a:	f000 fe8f 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <rxSessionAcceptFrame+0x4a>
 8007f94:	4b7b      	ldr	r3, [pc, #492]	@ (8008184 <rxSessionAcceptFrame+0x22c>)
 8007f96:	4a78      	ldr	r2, [pc, #480]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007f98:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8007f9c:	4877      	ldr	r0, [pc, #476]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007f9e:	f000 fe85 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <rxSessionAcceptFrame+0x60>
 8007faa:	4b77      	ldr	r3, [pc, #476]	@ (8008188 <rxSessionAcceptFrame+0x230>)
 8007fac:	4a72      	ldr	r2, [pc, #456]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007fae:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8007fb2:	4872      	ldr	r0, [pc, #456]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007fb4:	f000 fe7a 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7b9b      	ldrb	r3, [r3, #14]
 8007fbc:	2b1f      	cmp	r3, #31
 8007fbe:	d906      	bls.n	8007fce <rxSessionAcceptFrame+0x76>
 8007fc0:	4b72      	ldr	r3, [pc, #456]	@ (800818c <rxSessionAcceptFrame+0x234>)
 8007fc2:	4a6d      	ldr	r2, [pc, #436]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007fc4:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8007fc8:	486c      	ldr	r0, [pc, #432]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007fca:	f000 fe6f 	bl	8008cac <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <rxSessionAcceptFrame+0x8a>
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8008190 <rxSessionAcceptFrame+0x238>)
 8007fd6:	4a68      	ldr	r2, [pc, #416]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8007fd8:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8007fdc:	4867      	ldr	r0, [pc, #412]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8007fde:	f000 fe65 	bl	8008cac <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7bdb      	ldrb	r3, [r3, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7bdb      	ldrb	r3, [r3, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <rxSessionAcceptFrame+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <rxSessionAcceptFrame+0xb2>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <rxSessionAcceptFrame+0xb4>
 800800a:	2300      	movs	r3, #0
 800800c:	75bb      	strb	r3, [r7, #22]
 800800e:	7dbb      	ldrb	r3, [r7, #22]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8008016:	7dbb      	ldrb	r3, [r7, #22]
 8008018:	f083 0301 	eor.w	r3, r3, #1
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00c      	beq.n	800803c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	8a98      	ldrh	r0, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6959      	ldr	r1, [r3, #20]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	461a      	mov	r2, r3
 8008030:	f7fe fed6 	bl	8006de0 <crcAdd>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff fe4d 	bl	8007cec <rxSessionWritePayload>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8008056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	da10      	bge.n	8008080 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800805e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008062:	f113 0f03 	cmn.w	r3, #3
 8008066:	d006      	beq.n	8008076 <rxSessionAcceptFrame+0x11e>
 8008068:	4b4a      	ldr	r3, [pc, #296]	@ (8008194 <rxSessionAcceptFrame+0x23c>)
 800806a:	4a43      	ldr	r2, [pc, #268]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 800806c:	f240 3106 	movw	r1, #774	@ 0x306
 8008070:	4842      	ldr	r0, [pc, #264]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8008072:	f000 fe1b 	bl	8008cac <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff ff27 	bl	8007ecc <rxSessionRestart>
 800807e:	e072      	b.n	8008166 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7c1b      	ldrb	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05f      	beq.n	8008148 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8008088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <rxSessionAcceptFrame+0x146>
 8008090:	4b41      	ldr	r3, [pc, #260]	@ (8008198 <rxSessionAcceptFrame+0x240>)
 8008092:	4a39      	ldr	r2, [pc, #228]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8008094:	f240 310b 	movw	r1, #779	@ 0x30b
 8008098:	4838      	ldr	r0, [pc, #224]	@ (800817c <rxSessionAcceptFrame+0x224>)
 800809a:	f000 fe07 	bl	8008cac <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800809e:	7dbb      	ldrb	r3, [r7, #22]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <rxSessionAcceptFrame+0x154>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	8a9b      	ldrh	r3, [r3, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d148      	bne.n	800813e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff fd95 	bl	8007be4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	6a39      	ldr	r1, [r7, #32]
 80080c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	691a      	ldr	r2, [r3, #16]
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d206      	bcs.n	80080f0 <rxSessionAcceptFrame+0x198>
 80080e2:	4b2e      	ldr	r3, [pc, #184]	@ (800819c <rxSessionAcceptFrame+0x244>)
 80080e4:	4a24      	ldr	r2, [pc, #144]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 80080e6:	f240 3115 	movw	r1, #789	@ 0x315
 80080ea:	4824      	ldr	r0, [pc, #144]	@ (800817c <rxSessionAcceptFrame+0x224>)
 80080ec:	f000 fdde 	bl	8008cac <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 80080fc:	7dbb      	ldrb	r3, [r7, #22]
 80080fe:	f083 0301 	eor.w	r3, r3, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d017      	beq.n	8008138 <rxSessionAcceptFrame+0x1e0>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d814      	bhi.n	8008138 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f1c3 0302 	rsb	r3, r3, #2
 8008118:	429a      	cmp	r2, r3
 800811a:	d206      	bcs.n	800812a <rxSessionAcceptFrame+0x1d2>
 800811c:	4b20      	ldr	r3, [pc, #128]	@ (80081a0 <rxSessionAcceptFrame+0x248>)
 800811e:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <rxSessionAcceptFrame+0x220>)
 8008120:	f240 3119 	movw	r1, #793	@ 0x319
 8008124:	4815      	ldr	r0, [pc, #84]	@ (800817c <rxSessionAcceptFrame+0x224>)
 8008126:	f000 fdc1 	bl	8008cac <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	1e9a      	subs	r2, r3, #2
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fec3 	bl	8007ecc <rxSessionRestart>
 8008146:	e00e      	b.n	8008166 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	7e1b      	ldrb	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f083 0301 	eor.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	b2da      	uxtb	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8008166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	0800a008 	.word	0x0800a008
 8008178:	0800acc4 	.word	0x0800acc4
 800817c:	08009e44 	.word	0x08009e44
 8008180:	0800a364 	.word	0x0800a364
 8008184:	0800a29c 	.word	0x0800a29c
 8008188:	0800a2f8 	.word	0x0800a2f8
 800818c:	0800a438 	.word	0x0800a438
 8008190:	0800a318 	.word	0x0800a318
 8008194:	0800a460 	.word	0x0800a460
 8008198:	0800a46c 	.word	0x0800a46c
 800819c:	0800a478 	.word	0x0800a478
 80081a0:	0800a4a8 	.word	0x0800a4a8

080081a4 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 80081a4:	b5b0      	push	{r4, r5, r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d106      	bne.n	80081c6 <rxSessionUpdate+0x22>
 80081b8:	4b6d      	ldr	r3, [pc, #436]	@ (8008370 <rxSessionUpdate+0x1cc>)
 80081ba:	4a6e      	ldr	r2, [pc, #440]	@ (8008374 <rxSessionUpdate+0x1d0>)
 80081bc:	f240 3137 	movw	r1, #823	@ 0x337
 80081c0:	486d      	ldr	r0, [pc, #436]	@ (8008378 <rxSessionUpdate+0x1d4>)
 80081c2:	f000 fd73 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <rxSessionUpdate+0x36>
 80081cc:	4b6b      	ldr	r3, [pc, #428]	@ (800837c <rxSessionUpdate+0x1d8>)
 80081ce:	4a69      	ldr	r2, [pc, #420]	@ (8008374 <rxSessionUpdate+0x1d0>)
 80081d0:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80081d4:	4868      	ldr	r0, [pc, #416]	@ (8008378 <rxSessionUpdate+0x1d4>)
 80081d6:	f000 fd69 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <rxSessionUpdate+0x4a>
 80081e0:	4b67      	ldr	r3, [pc, #412]	@ (8008380 <rxSessionUpdate+0x1dc>)
 80081e2:	4a64      	ldr	r2, [pc, #400]	@ (8008374 <rxSessionUpdate+0x1d0>)
 80081e4:	f240 3139 	movw	r1, #825	@ 0x339
 80081e8:	4863      	ldr	r0, [pc, #396]	@ (8008378 <rxSessionUpdate+0x1d4>)
 80081ea:	f000 fd5f 	bl	8008cac <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <rxSessionUpdate+0x5e>
 80081f4:	4b63      	ldr	r3, [pc, #396]	@ (8008384 <rxSessionUpdate+0x1e0>)
 80081f6:	4a5f      	ldr	r2, [pc, #380]	@ (8008374 <rxSessionUpdate+0x1d0>)
 80081f8:	f240 313a 	movw	r1, #826	@ 0x33a
 80081fc:	485e      	ldr	r0, [pc, #376]	@ (8008378 <rxSessionUpdate+0x1d4>)
 80081fe:	f000 fd55 	bl	8008cac <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	7d9b      	ldrb	r3, [r3, #22]
 8008206:	2b1f      	cmp	r3, #31
 8008208:	d906      	bls.n	8008218 <rxSessionUpdate+0x74>
 800820a:	4b5f      	ldr	r3, [pc, #380]	@ (8008388 <rxSessionUpdate+0x1e4>)
 800820c:	4a59      	ldr	r2, [pc, #356]	@ (8008374 <rxSessionUpdate+0x1d0>)
 800820e:	f240 313b 	movw	r1, #827	@ 0x33b
 8008212:	4859      	ldr	r0, [pc, #356]	@ (8008378 <rxSessionUpdate+0x1d4>)
 8008214:	f000 fd4a 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7b9b      	ldrb	r3, [r3, #14]
 800821c:	2b1f      	cmp	r3, #31
 800821e:	d906      	bls.n	800822e <rxSessionUpdate+0x8a>
 8008220:	4b5a      	ldr	r3, [pc, #360]	@ (800838c <rxSessionUpdate+0x1e8>)
 8008222:	4a54      	ldr	r2, [pc, #336]	@ (8008374 <rxSessionUpdate+0x1d0>)
 8008224:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8008228:	4853      	ldr	r0, [pc, #332]	@ (8008378 <rxSessionUpdate+0x1d4>)
 800822a:	f000 fd3f 	bl	8008cac <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823a:	4290      	cmp	r0, r2
 800823c:	eb71 0303 	sbcs.w	r3, r1, r3
 8008240:	d20f      	bcs.n	8008262 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	1a84      	subs	r4, r0, r2
 8008250:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8008254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008258:	42a2      	cmp	r2, r4
 800825a:	41ab      	sbcs	r3, r5
 800825c:	d201      	bcs.n	8008262 <rxSessionUpdate+0xbe>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <rxSessionUpdate+0xc0>
 8008262:	2300      	movs	r3, #0
 8008264:	75bb      	strb	r3, [r7, #22]
 8008266:	7dbb      	ldrb	r3, [r7, #22]
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	7d9a      	ldrb	r2, [r3, #22]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	7b9b      	ldrb	r3, [r3, #14]
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7ff fcf9 	bl	8007c70 <rxComputeTransferIDDifference>
 800827e:	4603      	mov	r3, r0
 8008280:	2b01      	cmp	r3, #1
 8008282:	bf8c      	ite	hi
 8008284:	2301      	movhi	r3, #1
 8008286:	2300      	movls	r3, #0
 8008288:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800828a:	7dbb      	ldrb	r3, [r7, #22]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <rxSessionUpdate+0x104>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	7ddb      	ldrb	r3, [r3, #23]
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	429a      	cmp	r2, r3
 8008298:	d108      	bne.n	80082ac <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 80082a2:	7d7b      	ldrb	r3, [r7, #21]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <rxSessionUpdate+0x10a>
 80082ac:	2300      	movs	r3, #0
 80082ae:	753b      	strb	r3, [r7, #20]
 80082b0:	7d3b      	ldrb	r3, [r7, #20]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 80082b8:	7d3b      	ldrb	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d013      	beq.n	80082e6 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2200      	movs	r2, #0
 80082c2:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082d0:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7b9a      	ldrb	r2, [r3, #14]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2201      	movs	r2, #1
 80082de:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 80082ea:	7d3b      	ldrb	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <rxSessionUpdate+0x164>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7bdb      	ldrb	r3, [r3, #15]
 80082f4:	f083 0301 	eor.w	r3, r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fde3 	bl	8007ecc <rxSessionRestart>
 8008306:	e02c      	b.n	8008362 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	7ddb      	ldrb	r3, [r3, #23]
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	429a      	cmp	r2, r3
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7c5a      	ldrb	r2, [r3, #17]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7e1b      	ldrb	r3, [r3, #24]
 8008320:	429a      	cmp	r2, r3
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7b9a      	ldrb	r2, [r3, #14]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	7d9b      	ldrb	r3, [r3, #22]
 8008332:	429a      	cmp	r2, r3
 8008334:	bf0c      	ite	eq
 8008336:	2301      	moveq	r3, #1
 8008338:	2300      	movne	r3, #0
 800833a:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 800833c:	7cfb      	ldrb	r3, [r7, #19]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00f      	beq.n	8008362 <rxSessionUpdate+0x1be>
 8008342:	7cbb      	ldrb	r3, [r7, #18]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <rxSessionUpdate+0x1be>
 8008348:	7c7b      	ldrb	r3, [r7, #17]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800834e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff fdfd 	bl	8007f58 <rxSessionAcceptFrame>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8008362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bdb0      	pop	{r4, r5, r7, pc}
 800836e:	bf00      	nop
 8008370:	0800a008 	.word	0x0800a008
 8008374:	0800ac80 	.word	0x0800ac80
 8008378:	08009e44 	.word	0x08009e44
 800837c:	0800a364 	.word	0x0800a364
 8008380:	0800a29c 	.word	0x0800a29c
 8008384:	0800a318 	.word	0x0800a318
 8008388:	0800a4e0 	.word	0x0800a4e0
 800838c:	0800a438 	.word	0x0800a438

08008390 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8008390:	b5b0      	push	{r4, r5, r7, lr}
 8008392:	b08c      	sub	sp, #48	@ 0x30
 8008394:	af04      	add	r7, sp, #16
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <rxAcceptFrame+0x22>
 80083a4:	4b85      	ldr	r3, [pc, #532]	@ (80085bc <rxAcceptFrame+0x22c>)
 80083a6:	4a86      	ldr	r2, [pc, #536]	@ (80085c0 <rxAcceptFrame+0x230>)
 80083a8:	f44f 715a 	mov.w	r1, #872	@ 0x368
 80083ac:	4885      	ldr	r0, [pc, #532]	@ (80085c4 <rxAcceptFrame+0x234>)
 80083ae:	f000 fc7d 	bl	8008cac <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <rxAcceptFrame+0x36>
 80083b8:	4b83      	ldr	r3, [pc, #524]	@ (80085c8 <rxAcceptFrame+0x238>)
 80083ba:	4a81      	ldr	r2, [pc, #516]	@ (80085c0 <rxAcceptFrame+0x230>)
 80083bc:	f240 3169 	movw	r1, #873	@ 0x369
 80083c0:	4880      	ldr	r0, [pc, #512]	@ (80085c4 <rxAcceptFrame+0x234>)
 80083c2:	f000 fc73 	bl	8008cac <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	8b9a      	ldrh	r2, [r3, #28]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	895b      	ldrh	r3, [r3, #10]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d006      	beq.n	80083e0 <rxAcceptFrame+0x50>
 80083d2:	4b7e      	ldr	r3, [pc, #504]	@ (80085cc <rxAcceptFrame+0x23c>)
 80083d4:	4a7a      	ldr	r2, [pc, #488]	@ (80085c0 <rxAcceptFrame+0x230>)
 80083d6:	f240 316a 	movw	r1, #874	@ 0x36a
 80083da:	487a      	ldr	r0, [pc, #488]	@ (80085c4 <rxAcceptFrame+0x234>)
 80083dc:	f000 fc66 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <rxAcceptFrame+0x64>
 80083e6:	4b7a      	ldr	r3, [pc, #488]	@ (80085d0 <rxAcceptFrame+0x240>)
 80083e8:	4a75      	ldr	r2, [pc, #468]	@ (80085c0 <rxAcceptFrame+0x230>)
 80083ea:	f240 316b 	movw	r1, #875	@ 0x36b
 80083ee:	4875      	ldr	r0, [pc, #468]	@ (80085c4 <rxAcceptFrame+0x234>)
 80083f0:	f000 fc5c 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <rxAcceptFrame+0x7a>
 80083fc:	4b75      	ldr	r3, [pc, #468]	@ (80085d4 <rxAcceptFrame+0x244>)
 80083fe:	4a70      	ldr	r2, [pc, #448]	@ (80085c0 <rxAcceptFrame+0x230>)
 8008400:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8008404:	486f      	ldr	r0, [pc, #444]	@ (80085c4 <rxAcceptFrame+0x234>)
 8008406:	f000 fc51 	bl	8008cac <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7b9b      	ldrb	r3, [r3, #14]
 800840e:	2b1f      	cmp	r3, #31
 8008410:	d906      	bls.n	8008420 <rxAcceptFrame+0x90>
 8008412:	4b71      	ldr	r3, [pc, #452]	@ (80085d8 <rxAcceptFrame+0x248>)
 8008414:	4a6a      	ldr	r2, [pc, #424]	@ (80085c0 <rxAcceptFrame+0x230>)
 8008416:	f240 316d 	movw	r1, #877	@ 0x36d
 800841a:	486a      	ldr	r0, [pc, #424]	@ (80085c4 <rxAcceptFrame+0x234>)
 800841c:	f000 fc46 	bl	8008cac <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7b5b      	ldrb	r3, [r3, #13]
 8008424:	2bff      	cmp	r3, #255	@ 0xff
 8008426:	d00c      	beq.n	8008442 <rxAcceptFrame+0xb2>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	791a      	ldrb	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7b5b      	ldrb	r3, [r3, #13]
 8008430:	429a      	cmp	r2, r3
 8008432:	d006      	beq.n	8008442 <rxAcceptFrame+0xb2>
 8008434:	4b69      	ldr	r3, [pc, #420]	@ (80085dc <rxAcceptFrame+0x24c>)
 8008436:	4a62      	ldr	r2, [pc, #392]	@ (80085c0 <rxAcceptFrame+0x230>)
 8008438:	f240 316e 	movw	r1, #878	@ 0x36e
 800843c:	4861      	ldr	r0, [pc, #388]	@ (80085c4 <rxAcceptFrame+0x234>)
 800843e:	f000 fc35 	bl	8008cac <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <rxAcceptFrame+0xc6>
 8008448:	4b65      	ldr	r3, [pc, #404]	@ (80085e0 <rxAcceptFrame+0x250>)
 800844a:	4a5d      	ldr	r2, [pc, #372]	@ (80085c0 <rxAcceptFrame+0x230>)
 800844c:	f240 316f 	movw	r1, #879	@ 0x36f
 8008450:	485c      	ldr	r0, [pc, #368]	@ (80085c4 <rxAcceptFrame+0x234>)
 8008452:	f000 fc2b 	bl	8008cac <__assert_func>

    int8_t out = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7b1b      	ldrb	r3, [r3, #12]
 800845e:	b25b      	sxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	db6c      	blt.n	800853e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7b1b      	ldrb	r3, [r3, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	3308      	adds	r3, #8
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d134      	bne.n	80084e0 <rxAcceptFrame+0x150>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	7bdb      	ldrb	r3, [r3, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d030      	beq.n	80084e0 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2120      	movs	r1, #32
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	4798      	blx	r3
 8008488:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7b1b      	ldrb	r3, [r3, #12]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	3308      	adds	r3, #8
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01d      	beq.n	80084dc <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	6939      	ldr	r1, [r7, #16]
 80084a8:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2200      	movs	r2, #0
 80084b6:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084c4:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7b9a      	ldrb	r2, [r3, #14]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2201      	movs	r2, #1
 80084d8:	761a      	strb	r2, [r3, #24]
 80084da:	e001      	b.n	80084e0 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 80084dc:	23fd      	movs	r3, #253	@ 0xfd
 80084de:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7b1b      	ldrb	r3, [r3, #12]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	3308      	adds	r3, #8
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d05e      	beq.n	80085b0 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 80084f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d006      	beq.n	8008508 <rxAcceptFrame+0x178>
 80084fa:	4b3a      	ldr	r3, [pc, #232]	@ (80085e4 <rxAcceptFrame+0x254>)
 80084fc:	4a30      	ldr	r2, [pc, #192]	@ (80085c0 <rxAcceptFrame+0x230>)
 80084fe:	f240 318e 	movw	r1, #910	@ 0x38e
 8008502:	4830      	ldr	r0, [pc, #192]	@ (80085c4 <rxAcceptFrame+0x234>)
 8008504:	f000 fbd2 	bl	8008cac <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7b1b      	ldrb	r3, [r3, #12]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	3308      	adds	r3, #8
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	6989      	ldr	r1, [r1, #24]
 8008520:	78fd      	ldrb	r5, [r7, #3]
 8008522:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008524:	9003      	str	r0, [sp, #12]
 8008526:	9102      	str	r1, [sp, #8]
 8008528:	e9cd 2300 	strd	r2, r3, [sp]
 800852c:	462b      	mov	r3, r5
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4621      	mov	r1, r4
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff fe36 	bl	80081a4 <rxSessionUpdate>
 8008538:	4603      	mov	r3, r0
 800853a:	77fb      	strb	r3, [r7, #31]
 800853c:	e038      	b.n	80085b0 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7b1b      	ldrb	r3, [r3, #12]
 8008542:	2bff      	cmp	r3, #255	@ 0xff
 8008544:	d006      	beq.n	8008554 <rxAcceptFrame+0x1c4>
 8008546:	4b28      	ldr	r3, [pc, #160]	@ (80085e8 <rxAcceptFrame+0x258>)
 8008548:	4a1d      	ldr	r2, [pc, #116]	@ (80085c0 <rxAcceptFrame+0x230>)
 800854a:	f240 319a 	movw	r1, #922	@ 0x39a
 800854e:	481d      	ldr	r0, [pc, #116]	@ (80085c4 <rxAcceptFrame+0x234>)
 8008550:	f000 fbac 	bl	8008cac <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695a      	ldr	r2, [r3, #20]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 800855c:	4293      	cmp	r3, r2
 800855e:	bf28      	it	cs
 8008560:	4613      	movcs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	4798      	blx	r3
 800856e:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01a      	beq.n	80085ac <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff fb32 	bl	8007be4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008588:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	4619      	mov	r1, r3
 80085a0:	6978      	ldr	r0, [r7, #20]
 80085a2:	f000 fe72 	bl	800928a <memcpy>
            out = 1;
 80085a6:	2301      	movs	r3, #1
 80085a8:	77fb      	strb	r3, [r7, #31]
 80085aa:	e001      	b.n	80085b0 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 80085ac:	23fd      	movs	r3, #253	@ 0xfd
 80085ae:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80085b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bdb0      	pop	{r4, r5, r7, pc}
 80085bc:	0800a008 	.word	0x0800a008
 80085c0:	0800ac70 	.word	0x0800ac70
 80085c4:	08009e44 	.word	0x08009e44
 80085c8:	0800a508 	.word	0x0800a508
 80085cc:	0800a524 	.word	0x0800a524
 80085d0:	0800a29c 	.word	0x0800a29c
 80085d4:	0800a2f8 	.word	0x0800a2f8
 80085d8:	0800a438 	.word	0x0800a438
 80085dc:	0800a54c 	.word	0x0800a54c
 80085e0:	0800a318 	.word	0x0800a318
 80085e4:	0800a5a4 	.word	0x0800a5a4
 80085e8:	0800a5b0 	.word	0x0800a5b0

080085ec <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	8b9b      	ldrh	r3, [r3, #28]
 8008600:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8008602:	89fa      	ldrh	r2, [r7, #14]
 8008604:	89bb      	ldrh	r3, [r7, #12]
 8008606:	429a      	cmp	r2, r3
 8008608:	d00a      	beq.n	8008620 <rxSubscriptionPredicateOnPortID+0x34>
 800860a:	89fa      	ldrh	r2, [r7, #14]
 800860c:	89bb      	ldrh	r3, [r7, #12]
 800860e:	429a      	cmp	r2, r3
 8008610:	bf8c      	ite	hi
 8008612:	2301      	movhi	r3, #1
 8008614:	2300      	movls	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <rxSubscriptionPredicateOnPortID+0x44>)
 800861c:	569b      	ldrsb	r3, [r3, r2]
 800861e:	e000      	b.n	8008622 <rxSubscriptionPredicateOnPortID+0x36>
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	0800ac5c 	.word	0x0800ac5c

08008634 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	331c      	adds	r3, #28
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff ffd1 	bl	80085ec <rxSubscriptionPredicateOnPortID>
 800864a:	4603      	mov	r3, r0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8008654:	b5b0      	push	{r4, r5, r7, lr}
 8008656:	b08c      	sub	sp, #48	@ 0x30
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <canardInit+0x20>
 8008666:	4b16      	ldr	r3, [pc, #88]	@ (80086c0 <canardInit+0x6c>)
 8008668:	4a16      	ldr	r2, [pc, #88]	@ (80086c4 <canardInit+0x70>)
 800866a:	f240 31d6 	movw	r1, #982	@ 0x3d6
 800866e:	4816      	ldr	r0, [pc, #88]	@ (80086c8 <canardInit+0x74>)
 8008670:	f000 fb1c 	bl	8008cac <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <canardInit+0x34>
 800867a:	4b14      	ldr	r3, [pc, #80]	@ (80086cc <canardInit+0x78>)
 800867c:	4a11      	ldr	r2, [pc, #68]	@ (80086c4 <canardInit+0x70>)
 800867e:	f240 31d7 	movw	r1, #983	@ 0x3d7
 8008682:	4811      	ldr	r0, [pc, #68]	@ (80086c8 <canardInit+0x74>)
 8008684:	f000 fb12 	bl	8008cac <__assert_func>
    const CanardInstance out = {
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	23ff      	movs	r3, #255	@ 0xff
 800868e:	763b      	strb	r3, [r7, #24]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	623b      	str	r3, [r7, #32]
 8008698:	2300      	movs	r3, #0
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
 800869c:	2300      	movs	r3, #0
 800869e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086a0:	2300      	movs	r3, #0
 80086a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	461d      	mov	r5, r3
 80086a8:	f107 0414 	add.w	r4, r7, #20
 80086ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80086b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	3730      	adds	r7, #48	@ 0x30
 80086bc:	46bd      	mov	sp, r7
 80086be:	bdb0      	pop	{r4, r5, r7, pc}
 80086c0:	0800a5d0 	.word	0x0800a5d0
 80086c4:	0800aae4 	.word	0x0800aae4
 80086c8:	08009e44 	.word	0x08009e44
 80086cc:	0800a5f0 	.word	0x0800a5f0

080086d0 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 80086d0:	b4b0      	push	{r4, r5, r7}
 80086d2:	b08b      	sub	sp, #44	@ 0x2c
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	2300      	movs	r3, #0
 80086ea:	623b      	str	r3, [r7, #32]
 80086ec:	2300      	movs	r3, #0
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	461d      	mov	r5, r3
 80086f4:	f107 0414 	add.w	r4, r7, #20
 80086f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	602b      	str	r3, [r5, #0]
}
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	372c      	adds	r7, #44	@ 0x2c
 8008704:	46bd      	mov	sp, r7
 8008706:	bcb0      	pop	{r4, r5, r7}
 8008708:	4770      	bx	lr
	...

0800870c <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08e      	sub	sp, #56	@ 0x38
 8008710:	af06      	add	r7, sp, #24
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800871a:	f06f 0301 	mvn.w	r3, #1
 800871e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d062      	beq.n	80087ec <canardTxPush+0xe0>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d05f      	beq.n	80087ec <canardTxPush+0xe0>
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d05c      	beq.n	80087ec <canardTxPush+0xe0>
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <canardTxPush+0x32>
 8008738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d156      	bne.n	80087ec <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fc02 	bl	8006f4c <adjustPresentationLayerMTU>
 8008748:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	791a      	ldrb	r2, [r3, #4]
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	4613      	mov	r3, r2
 8008754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875a:	f7fe fc27 	bl	8006fac <txMakeCANID>
 800875e:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db40      	blt.n	80087e8 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8008766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	429a      	cmp	r2, r3
 800876c:	d81c      	bhi.n	80087a8 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800876e:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8008770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008772:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8008774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008776:	9103      	str	r1, [sp, #12]
 8008778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800877a:	9102      	str	r1, [sp, #8]
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7fe fdda 	bl	8007340 <txPushSingleFrame>
 800878c:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	db2b      	blt.n	80087ec <canardTxPush+0xe0>
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d028      	beq.n	80087ec <canardTxPush+0xe0>
 800879a:	4b1c      	ldr	r3, [pc, #112]	@ (800880c <canardTxPush+0x100>)
 800879c:	4a1c      	ldr	r2, [pc, #112]	@ (8008810 <canardTxPush+0x104>)
 800879e:	f240 4105 	movw	r1, #1029	@ 0x405
 80087a2:	481c      	ldr	r0, [pc, #112]	@ (8008814 <canardTxPush+0x108>)
 80087a4:	f000 fa82 	bl	8008cac <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80087a8:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80087aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087ac:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80087ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087b0:	9105      	str	r1, [sp, #20]
 80087b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b4:	9104      	str	r1, [sp, #16]
 80087b6:	9203      	str	r2, [sp, #12]
 80087b8:	9302      	str	r3, [sp, #8]
 80087ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087be:	e9cd 2300 	strd	r2, r3, [sp]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7fe ffd4 	bl	8007774 <txPushMultiFrame>
 80087cc:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db0b      	blt.n	80087ec <canardTxPush+0xe0>
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	dc08      	bgt.n	80087ec <canardTxPush+0xe0>
 80087da:	4b0f      	ldr	r3, [pc, #60]	@ (8008818 <canardTxPush+0x10c>)
 80087dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008810 <canardTxPush+0x104>)
 80087de:	f240 4111 	movw	r1, #1041	@ 0x411
 80087e2:	480c      	ldr	r0, [pc, #48]	@ (8008814 <canardTxPush+0x108>)
 80087e4:	f000 fa62 	bl	8008cac <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <canardTxPush+0xf4>
 80087f2:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <canardTxPush+0x110>)
 80087f4:	4a06      	ldr	r2, [pc, #24]	@ (8008810 <canardTxPush+0x104>)
 80087f6:	f240 4119 	movw	r1, #1049	@ 0x419
 80087fa:	4806      	ldr	r0, [pc, #24]	@ (8008814 <canardTxPush+0x108>)
 80087fc:	f000 fa56 	bl	8008cac <__assert_func>
    return out;
 8008800:	69fb      	ldr	r3, [r7, #28]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	0800a140 	.word	0x0800a140
 8008810:	0800aaf0 	.word	0x0800aaf0
 8008814:	08009e44 	.word	0x08009e44
 8008818:	0800a284 	.word	0x0800a284
 800881c:	0800a60c 	.word	0x0800a60c

08008820 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f7fd ff1d 	bl	8006678 <cavlFindExtremum>
 800883e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d010      	beq.n	8008880 <canardTxPop+0x36>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00d      	beq.n	8008880 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	330c      	adds	r3, #12
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe f957 	bl	8006b24 <cavlRemove>
        que->size--;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	1e5a      	subs	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	609a      	str	r2, [r3, #8]
    }
    return out;
 8008880:	68fb      	ldr	r3, [r7, #12]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b090      	sub	sp, #64	@ 0x40
 8008890:	af02      	add	r7, sp, #8
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8008898:	23fe      	movs	r3, #254	@ 0xfe
 800889a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d068      	beq.n	8008976 <canardRxAccept+0xea>
 80088a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d065      	beq.n	8008976 <canardRxAccept+0xea>
 80088aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d062      	beq.n	8008976 <canardRxAccept+0xea>
 80088b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b8:	d25d      	bcs.n	8008976 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80088ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088bc:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80088c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d155      	bne.n	8008976 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	2220      	movs	r2, #32
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fc09 	bl	80090ea <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 80088d8:	f107 0310 	add.w	r3, r7, #16
 80088dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088e2:	f7ff f83b 	bl	800795c <rxTryParseFrame>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d041      	beq.n	8008970 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 80088ec:	7f7b      	ldrb	r3, [r7, #29]
 80088ee:	2bff      	cmp	r3, #255	@ 0xff
 80088f0:	d004      	beq.n	80088fc <canardRxAccept+0x70>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	791a      	ldrb	r2, [r3, #4]
 80088f6:	7f7b      	ldrb	r3, [r7, #29]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d135      	bne.n	8008968 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 80088fc:	7e7b      	ldrb	r3, [r7, #25]
 80088fe:	3304      	adds	r3, #4
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	18d0      	adds	r0, r2, r3
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	f103 010a 	add.w	r1, r3, #10
 800890e:	2300      	movs	r3, #0
 8008910:	4a21      	ldr	r2, [pc, #132]	@ (8008998 <canardRxAccept+0x10c>)
 8008912:	f7fe f889 	bl	8006a28 <cavlSearch>
 8008916:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 8008918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 800891e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008922:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01a      	beq.n	8008960 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	8b9a      	ldrh	r2, [r3, #28]
 800892e:	8b7b      	ldrh	r3, [r7, #26]
 8008930:	429a      	cmp	r2, r3
 8008932:	d006      	beq.n	8008942 <canardRxAccept+0xb6>
 8008934:	4b19      	ldr	r3, [pc, #100]	@ (800899c <canardRxAccept+0x110>)
 8008936:	4a1a      	ldr	r2, [pc, #104]	@ (80089a0 <canardRxAccept+0x114>)
 8008938:	f240 415a 	movw	r1, #1114	@ 0x45a
 800893c:	4819      	ldr	r0, [pc, #100]	@ (80089a4 <canardRxAccept+0x118>)
 800893e:	f000 f9b5 	bl	8008cac <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 8008942:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8008946:	f107 0210 	add.w	r2, r7, #16
 800894a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	460b      	mov	r3, r1
 8008950:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fd1c 	bl	8008390 <rxAcceptFrame>
 8008958:	4603      	mov	r3, r0
 800895a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800895e:	e00a      	b.n	8008976 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8008966:	e006      	b.n	8008976 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8008968:	2300      	movs	r3, #0
 800896a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800896e:	e002      	b.n	8008976 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 8008976:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800897a:	2b01      	cmp	r3, #1
 800897c:	dd06      	ble.n	800898c <canardRxAccept+0x100>
 800897e:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <canardRxAccept+0x11c>)
 8008980:	4a07      	ldr	r2, [pc, #28]	@ (80089a0 <canardRxAccept+0x114>)
 8008982:	f240 416c 	movw	r1, #1132	@ 0x46c
 8008986:	4807      	ldr	r0, [pc, #28]	@ (80089a4 <canardRxAccept+0x118>)
 8008988:	f000 f990 	bl	8008cac <__assert_func>
    return out;
 800898c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008990:	4618      	mov	r0, r3
 8008992:	3738      	adds	r7, #56	@ 0x38
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	080085ed 	.word	0x080085ed
 800899c:	0800a618 	.word	0x0800a618
 80089a0:	0800ac4c 	.word	0x0800ac4c
 80089a4:	08009e44 	.word	0x08009e44
 80089a8:	0800a638 	.word	0x0800a638

080089ac <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	607b      	str	r3, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	72fb      	strb	r3, [r7, #11]
 80089ba:	4613      	mov	r3, r2
 80089bc:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80089be:	23fe      	movs	r3, #254	@ 0xfe
 80089c0:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d04a      	beq.n	8008a62 <canardRxSubscribe+0xb6>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d047      	beq.n	8008a62 <canardRxSubscribe+0xb6>
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d844      	bhi.n	8008a62 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 80089d8:	893a      	ldrh	r2, [r7, #8]
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	4619      	mov	r1, r3
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f850 	bl	8008a84 <canardRxUnsubscribe>
 80089e4:	4603      	mov	r3, r0
 80089e6:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 80089e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db38      	blt.n	8008a62 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 80089f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8008a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a02:	893a      	ldrh	r2, [r7, #8]
 8008a04:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	e009      	b.n	8008a20 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	3308      	adds	r3, #8
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	2200      	movs	r2, #0
 8008a18:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a24:	d9f2      	bls.n	8008a0c <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	18d0      	adds	r0, r2, r3
 8008a30:	4b0f      	ldr	r3, [pc, #60]	@ (8008a70 <canardRxSubscribe+0xc4>)
 8008a32:	4a10      	ldr	r2, [pc, #64]	@ (8008a74 <canardRxSubscribe+0xc8>)
 8008a34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a36:	f7fd fff7 	bl	8006a28 <cavlSearch>
 8008a3a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d006      	beq.n	8008a52 <canardRxSubscribe+0xa6>
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <canardRxSubscribe+0xcc>)
 8008a46:	4a0d      	ldr	r2, [pc, #52]	@ (8008a7c <canardRxSubscribe+0xd0>)
 8008a48:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 8008a4c:	480c      	ldr	r0, [pc, #48]	@ (8008a80 <canardRxSubscribe+0xd4>)
 8008a4e:	f000 f92d 	bl	8008cac <__assert_func>
            out = (out > 0) ? 0 : 1;
 8008a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfd4      	ite	le
 8008a5a:	2301      	movle	r3, #1
 8008a5c:	2300      	movgt	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8008a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	08006d89 	.word	0x08006d89
 8008a74:	08008635 	.word	0x08008635
 8008a78:	0800a644 	.word	0x0800a644
 8008a7c:	0800ad14 	.word	0x0800ad14
 8008a80:	08009e44 	.word	0x08009e44

08008a84 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
 8008a90:	4613      	mov	r3, r2
 8008a92:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8008a94:	23fe      	movs	r3, #254	@ 0xfe
 8008a96:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d05f      	beq.n	8008b62 <canardRxUnsubscribe+0xde>
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d85c      	bhi.n	8008b62 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8008aa8:	883b      	ldrh	r3, [r7, #0]
 8008aaa:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	18d0      	adds	r0, r2, r3
 8008ab6:	f107 010e 	add.w	r1, r7, #14
 8008aba:	2300      	movs	r3, #0
 8008abc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b70 <canardRxUnsubscribe+0xec>)
 8008abe:	f7fd ffb3 	bl	8006a28 <cavlSearch>
 8008ac2:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d049      	beq.n	8008b5e <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	3304      	adds	r3, #4
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe f823 	bl	8006b24 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	8b9b      	ldrh	r3, [r3, #28]
 8008ae2:	883a      	ldrh	r2, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d006      	beq.n	8008af6 <canardRxUnsubscribe+0x72>
 8008ae8:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <canardRxUnsubscribe+0xf0>)
 8008aea:	4a23      	ldr	r2, [pc, #140]	@ (8008b78 <canardRxUnsubscribe+0xf4>)
 8008aec:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 8008af0:	4822      	ldr	r0, [pc, #136]	@ (8008b7c <canardRxUnsubscribe+0xf8>)
 8008af2:	f000 f8db 	bl	8008cac <__assert_func>
            out = 1;
 8008af6:	2301      	movs	r3, #1
 8008af8:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8008afa:	2300      	movs	r3, #0
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	e02a      	b.n	8008b56 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	6939      	ldr	r1, [r7, #16]
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <canardRxUnsubscribe+0xa0>
 8008b14:	6939      	ldr	r1, [r7, #16]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	e000      	b.n	8008b26 <canardRxUnsubscribe+0xa2>
 8008b24:	2300      	movs	r3, #0
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	6939      	ldr	r1, [r7, #16]
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	3308      	adds	r3, #8
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	3308      	adds	r3, #8
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b5a:	d9d1      	bls.n	8008b00 <canardRxUnsubscribe+0x7c>
 8008b5c:	e001      	b.n	8008b62 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8008b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	080085ed 	.word	0x080085ed
 8008b74:	0800a664 	.word	0x0800a664
 8008b78:	0800ad28 	.word	0x0800ad28
 8008b7c:	08009e44 	.word	0x08009e44

08008b80 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 8008b8c:	f107 0308 	add.w	r3, r7, #8
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 8008b9c:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <canardMakeFilterForSubject+0x3c>)
 8008b9e:	60fb      	str	r3, [r7, #12]

    return out;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	021fff80 	.word	0x021fff80

08008bc0 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 8008bcc:	f107 0308 	add.w	r3, r7, #8
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	01db      	lsls	r3, r3, #7
 8008bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008bde:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <canardMakeFilterForServices+0x40>)
 8008be2:	60fb      	str	r3, [r7, #12]

    return out;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f107 0308 	add.w	r3, r7, #8
 8008bec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bf0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	02803f80 	.word	0x02803f80

08008c04 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 8008c10:	f107 0310 	add.w	r3, r7, #16
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	401a      	ands	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6819      	ldr	r1, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	404b      	eors	r3, r1
 8008c2e:	43db      	mvns	r3, r3
 8008c30:	4013      	ands	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]

    return out;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	461a      	mov	r2, r3
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <_ZdlPvj>:
 8008c5a:	f000 b814 	b.w	8008c86 <_ZdlPv>

08008c5e <_Znwj>:
 8008c5e:	2801      	cmp	r0, #1
 8008c60:	bf38      	it	cc
 8008c62:	2001      	movcc	r0, #1
 8008c64:	b510      	push	{r4, lr}
 8008c66:	4604      	mov	r4, r0
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f84f 	bl	8008d0c <malloc>
 8008c6e:	b100      	cbz	r0, 8008c72 <_Znwj+0x14>
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	f000 f80b 	bl	8008c8c <_ZSt15get_new_handlerv>
 8008c76:	b908      	cbnz	r0, 8008c7c <_Znwj+0x1e>
 8008c78:	f000 f810 	bl	8008c9c <abort>
 8008c7c:	4780      	blx	r0
 8008c7e:	e7f3      	b.n	8008c68 <_Znwj+0xa>

08008c80 <_ZSt25__throw_bad_function_callv>:
 8008c80:	b508      	push	{r3, lr}
 8008c82:	f000 f80b 	bl	8008c9c <abort>

08008c86 <_ZdlPv>:
 8008c86:	f000 b849 	b.w	8008d1c <free>
	...

08008c8c <_ZSt15get_new_handlerv>:
 8008c8c:	4b02      	ldr	r3, [pc, #8]	@ (8008c98 <_ZSt15get_new_handlerv+0xc>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	f3bf 8f5b 	dmb	ish
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200001d8 	.word	0x200001d8

08008c9c <abort>:
 8008c9c:	b508      	push	{r3, lr}
 8008c9e:	2006      	movs	r0, #6
 8008ca0:	f000 fa54 	bl	800914c <raise>
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7fb f982 	bl	8003fae <_exit>
	...

08008cac <__assert_func>:
 8008cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cae:	4614      	mov	r4, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4b09      	ldr	r3, [pc, #36]	@ (8008cd8 <__assert_func+0x2c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	68d8      	ldr	r0, [r3, #12]
 8008cba:	b954      	cbnz	r4, 8008cd2 <__assert_func+0x26>
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <__assert_func+0x30>)
 8008cbe:	461c      	mov	r4, r3
 8008cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cc4:	9100      	str	r1, [sp, #0]
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	4905      	ldr	r1, [pc, #20]	@ (8008ce0 <__assert_func+0x34>)
 8008cca:	f000 f981 	bl	8008fd0 <fiprintf>
 8008cce:	f7ff ffe5 	bl	8008c9c <abort>
 8008cd2:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__assert_func+0x38>)
 8008cd4:	e7f4      	b.n	8008cc0 <__assert_func+0x14>
 8008cd6:	bf00      	nop
 8008cd8:	20000018 	.word	0x20000018
 8008cdc:	0800ad77 	.word	0x0800ad77
 8008ce0:	0800ad49 	.word	0x0800ad49
 8008ce4:	0800ad3c 	.word	0x0800ad3c

08008ce8 <exit>:
 8008ce8:	b508      	push	{r3, lr}
 8008cea:	4b06      	ldr	r3, [pc, #24]	@ (8008d04 <exit+0x1c>)
 8008cec:	4604      	mov	r4, r0
 8008cee:	b113      	cbz	r3, 8008cf6 <exit+0xe>
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f3af 8000 	nop.w
 8008cf6:	4b04      	ldr	r3, [pc, #16]	@ (8008d08 <exit+0x20>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <exit+0x16>
 8008cfc:	4798      	blx	r3
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f7fb f955 	bl	8003fae <_exit>
 8008d04:	00000000 	.word	0x00000000
 8008d08:	2000031c 	.word	0x2000031c

08008d0c <malloc>:
 8008d0c:	4b02      	ldr	r3, [pc, #8]	@ (8008d18 <malloc+0xc>)
 8008d0e:	4601      	mov	r1, r0
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f000 b82d 	b.w	8008d70 <_malloc_r>
 8008d16:	bf00      	nop
 8008d18:	20000018 	.word	0x20000018

08008d1c <free>:
 8008d1c:	4b02      	ldr	r3, [pc, #8]	@ (8008d28 <free+0xc>)
 8008d1e:	4601      	mov	r1, r0
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f000 bac1 	b.w	80092a8 <_free_r>
 8008d26:	bf00      	nop
 8008d28:	20000018 	.word	0x20000018

08008d2c <sbrk_aligned>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d6c <sbrk_aligned+0x40>)
 8008d30:	460c      	mov	r4, r1
 8008d32:	6831      	ldr	r1, [r6, #0]
 8008d34:	4605      	mov	r5, r0
 8008d36:	b911      	cbnz	r1, 8008d3e <sbrk_aligned+0x12>
 8008d38:	f000 fa58 	bl	80091ec <_sbrk_r>
 8008d3c:	6030      	str	r0, [r6, #0]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 fa53 	bl	80091ec <_sbrk_r>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	d103      	bne.n	8008d52 <sbrk_aligned+0x26>
 8008d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d4e:	4620      	mov	r0, r4
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	1cc4      	adds	r4, r0, #3
 8008d54:	f024 0403 	bic.w	r4, r4, #3
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d0f8      	beq.n	8008d4e <sbrk_aligned+0x22>
 8008d5c:	1a21      	subs	r1, r4, r0
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 fa44 	bl	80091ec <_sbrk_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d1f2      	bne.n	8008d4e <sbrk_aligned+0x22>
 8008d68:	e7ef      	b.n	8008d4a <sbrk_aligned+0x1e>
 8008d6a:	bf00      	nop
 8008d6c:	200001dc 	.word	0x200001dc

08008d70 <_malloc_r>:
 8008d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d74:	1ccd      	adds	r5, r1, #3
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	4606      	mov	r6, r0
 8008d86:	db01      	blt.n	8008d8c <_malloc_r+0x1c>
 8008d88:	42a9      	cmp	r1, r5
 8008d8a:	d904      	bls.n	8008d96 <_malloc_r+0x26>
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	2000      	movs	r0, #0
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e6c <_malloc_r+0xfc>
 8008d9a:	f000 f869 	bl	8008e70 <__malloc_lock>
 8008d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008da2:	461c      	mov	r4, r3
 8008da4:	bb44      	cbnz	r4, 8008df8 <_malloc_r+0x88>
 8008da6:	4629      	mov	r1, r5
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff ffbf 	bl	8008d2c <sbrk_aligned>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	4604      	mov	r4, r0
 8008db2:	d158      	bne.n	8008e66 <_malloc_r+0xf6>
 8008db4:	f8d8 4000 	ldr.w	r4, [r8]
 8008db8:	4627      	mov	r7, r4
 8008dba:	2f00      	cmp	r7, #0
 8008dbc:	d143      	bne.n	8008e46 <_malloc_r+0xd6>
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	d04b      	beq.n	8008e5a <_malloc_r+0xea>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	eb04 0903 	add.w	r9, r4, r3
 8008dcc:	f000 fa0e 	bl	80091ec <_sbrk_r>
 8008dd0:	4581      	cmp	r9, r0
 8008dd2:	d142      	bne.n	8008e5a <_malloc_r+0xea>
 8008dd4:	6821      	ldr	r1, [r4, #0]
 8008dd6:	1a6d      	subs	r5, r5, r1
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ffa6 	bl	8008d2c <sbrk_aligned>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d03a      	beq.n	8008e5a <_malloc_r+0xea>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	442b      	add	r3, r5
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	f8d8 3000 	ldr.w	r3, [r8]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	bb62      	cbnz	r2, 8008e4c <_malloc_r+0xdc>
 8008df2:	f8c8 7000 	str.w	r7, [r8]
 8008df6:	e00f      	b.n	8008e18 <_malloc_r+0xa8>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	1b52      	subs	r2, r2, r5
 8008dfc:	d420      	bmi.n	8008e40 <_malloc_r+0xd0>
 8008dfe:	2a0b      	cmp	r2, #11
 8008e00:	d917      	bls.n	8008e32 <_malloc_r+0xc2>
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	6025      	str	r5, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	6059      	strne	r1, [r3, #4]
 8008e0c:	6863      	ldr	r3, [r4, #4]
 8008e0e:	bf08      	it	eq
 8008e10:	f8c8 1000 	streq.w	r1, [r8]
 8008e14:	5162      	str	r2, [r4, r5]
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 f82f 	bl	8008e7c <__malloc_unlock>
 8008e1e:	f104 000b 	add.w	r0, r4, #11
 8008e22:	1d23      	adds	r3, r4, #4
 8008e24:	f020 0007 	bic.w	r0, r0, #7
 8008e28:	1ac2      	subs	r2, r0, r3
 8008e2a:	bf1c      	itt	ne
 8008e2c:	1a1b      	subne	r3, r3, r0
 8008e2e:	50a3      	strne	r3, [r4, r2]
 8008e30:	e7af      	b.n	8008d92 <_malloc_r+0x22>
 8008e32:	6862      	ldr	r2, [r4, #4]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	bf0c      	ite	eq
 8008e38:	f8c8 2000 	streq.w	r2, [r8]
 8008e3c:	605a      	strne	r2, [r3, #4]
 8008e3e:	e7eb      	b.n	8008e18 <_malloc_r+0xa8>
 8008e40:	4623      	mov	r3, r4
 8008e42:	6864      	ldr	r4, [r4, #4]
 8008e44:	e7ae      	b.n	8008da4 <_malloc_r+0x34>
 8008e46:	463c      	mov	r4, r7
 8008e48:	687f      	ldr	r7, [r7, #4]
 8008e4a:	e7b6      	b.n	8008dba <_malloc_r+0x4a>
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d1fb      	bne.n	8008e4c <_malloc_r+0xdc>
 8008e54:	2300      	movs	r3, #0
 8008e56:	6053      	str	r3, [r2, #4]
 8008e58:	e7de      	b.n	8008e18 <_malloc_r+0xa8>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f80c 	bl	8008e7c <__malloc_unlock>
 8008e64:	e794      	b.n	8008d90 <_malloc_r+0x20>
 8008e66:	6005      	str	r5, [r0, #0]
 8008e68:	e7d6      	b.n	8008e18 <_malloc_r+0xa8>
 8008e6a:	bf00      	nop
 8008e6c:	200001e0 	.word	0x200001e0

08008e70 <__malloc_lock>:
 8008e70:	4801      	ldr	r0, [pc, #4]	@ (8008e78 <__malloc_lock+0x8>)
 8008e72:	f000 ba08 	b.w	8009286 <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	20000324 	.word	0x20000324

08008e7c <__malloc_unlock>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	@ (8008e84 <__malloc_unlock+0x8>)
 8008e7e:	f000 ba03 	b.w	8009288 <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	20000324 	.word	0x20000324

08008e88 <std>:
 8008e88:	2300      	movs	r3, #0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6183      	str	r3, [r0, #24]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	305c      	adds	r0, #92	@ 0x5c
 8008ea6:	f000 f920 	bl	80090ea <memset>
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <std+0x58>)
 8008eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <std+0x5c>)
 8008eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <std+0x60>)
 8008eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <std+0x64>)
 8008eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <std+0x68>)
 8008ebc:	6224      	str	r4, [r4, #32]
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d006      	beq.n	8008ed0 <std+0x48>
 8008ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ec6:	4294      	cmp	r4, r2
 8008ec8:	d002      	beq.n	8008ed0 <std+0x48>
 8008eca:	33d0      	adds	r3, #208	@ 0xd0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d105      	bne.n	8008edc <std+0x54>
 8008ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed8:	f000 b9d4 	b.w	8009284 <__retarget_lock_init_recursive>
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	08009031 	.word	0x08009031
 8008ee4:	08009053 	.word	0x08009053
 8008ee8:	0800908b 	.word	0x0800908b
 8008eec:	080090af 	.word	0x080090af
 8008ef0:	200001e4 	.word	0x200001e4

08008ef4 <stdio_exit_handler>:
 8008ef4:	4a02      	ldr	r2, [pc, #8]	@ (8008f00 <stdio_exit_handler+0xc>)
 8008ef6:	4903      	ldr	r1, [pc, #12]	@ (8008f04 <stdio_exit_handler+0x10>)
 8008ef8:	4803      	ldr	r0, [pc, #12]	@ (8008f08 <stdio_exit_handler+0x14>)
 8008efa:	f000 b87b 	b.w	8008ff4 <_fwalk_sglue>
 8008efe:	bf00      	nop
 8008f00:	2000000c 	.word	0x2000000c
 8008f04:	080099e5 	.word	0x080099e5
 8008f08:	2000001c 	.word	0x2000001c

08008f0c <cleanup_stdio>:
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <cleanup_stdio+0x34>)
 8008f10:	4299      	cmp	r1, r3
 8008f12:	b510      	push	{r4, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	d001      	beq.n	8008f1c <cleanup_stdio+0x10>
 8008f18:	f000 fd64 	bl	80099e4 <_fflush_r>
 8008f1c:	68a1      	ldr	r1, [r4, #8]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <cleanup_stdio+0x38>)
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <cleanup_stdio+0x1e>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fd5d 	bl	80099e4 <_fflush_r>
 8008f2a:	68e1      	ldr	r1, [r4, #12]
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <cleanup_stdio+0x3c>)
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d004      	beq.n	8008f3c <cleanup_stdio+0x30>
 8008f32:	4620      	mov	r0, r4
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f000 bd54 	b.w	80099e4 <_fflush_r>
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	200001e4 	.word	0x200001e4
 8008f44:	2000024c 	.word	0x2000024c
 8008f48:	200002b4 	.word	0x200002b4

08008f4c <global_stdio_init.part.0>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <global_stdio_init.part.0+0x30>)
 8008f50:	4c0b      	ldr	r4, [pc, #44]	@ (8008f80 <global_stdio_init.part.0+0x34>)
 8008f52:	4a0c      	ldr	r2, [pc, #48]	@ (8008f84 <global_stdio_init.part.0+0x38>)
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	4620      	mov	r0, r4
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2104      	movs	r1, #4
 8008f5c:	f7ff ff94 	bl	8008e88 <std>
 8008f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f64:	2201      	movs	r2, #1
 8008f66:	2109      	movs	r1, #9
 8008f68:	f7ff ff8e 	bl	8008e88 <std>
 8008f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f70:	2202      	movs	r2, #2
 8008f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f76:	2112      	movs	r1, #18
 8008f78:	f7ff bf86 	b.w	8008e88 <std>
 8008f7c:	2000031c 	.word	0x2000031c
 8008f80:	200001e4 	.word	0x200001e4
 8008f84:	08008ef5 	.word	0x08008ef5

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	@ (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 b97c 	b.w	8009286 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000325 	.word	0x20000325

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	@ (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 b977 	b.w	8009288 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000325 	.word	0x20000325

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sfp_lock_acquire>
 8008fa8:	6a23      	ldr	r3, [r4, #32]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sfp_lock_release>
 8008fb4:	4b04      	ldr	r3, [pc, #16]	@ (8008fc8 <__sinit+0x28>)
 8008fb6:	6223      	str	r3, [r4, #32]
 8008fb8:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <__sinit+0x2c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f5      	bne.n	8008fac <__sinit+0xc>
 8008fc0:	f7ff ffc4 	bl	8008f4c <global_stdio_init.part.0>
 8008fc4:	e7f2      	b.n	8008fac <__sinit+0xc>
 8008fc6:	bf00      	nop
 8008fc8:	08008f0d 	.word	0x08008f0d
 8008fcc:	2000031c 	.word	0x2000031c

08008fd0 <fiprintf>:
 8008fd0:	b40e      	push	{r1, r2, r3}
 8008fd2:	b503      	push	{r0, r1, lr}
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	ab03      	add	r3, sp, #12
 8008fd8:	4805      	ldr	r0, [pc, #20]	@ (8008ff0 <fiprintf+0x20>)
 8008fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fde:	6800      	ldr	r0, [r0, #0]
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	f000 f9d5 	bl	8009390 <_vfiprintf_r>
 8008fe6:	b002      	add	sp, #8
 8008fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fec:	b003      	add	sp, #12
 8008fee:	4770      	bx	lr
 8008ff0:	20000018 	.word	0x20000018

08008ff4 <_fwalk_sglue>:
 8008ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	4688      	mov	r8, r1
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	2600      	movs	r6, #0
 8009000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009004:	f1b9 0901 	subs.w	r9, r9, #1
 8009008:	d505      	bpl.n	8009016 <_fwalk_sglue+0x22>
 800900a:	6824      	ldr	r4, [r4, #0]
 800900c:	2c00      	cmp	r4, #0
 800900e:	d1f7      	bne.n	8009000 <_fwalk_sglue+0xc>
 8009010:	4630      	mov	r0, r6
 8009012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d907      	bls.n	800902c <_fwalk_sglue+0x38>
 800901c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009020:	3301      	adds	r3, #1
 8009022:	d003      	beq.n	800902c <_fwalk_sglue+0x38>
 8009024:	4629      	mov	r1, r5
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	4306      	orrs	r6, r0
 800902c:	3568      	adds	r5, #104	@ 0x68
 800902e:	e7e9      	b.n	8009004 <_fwalk_sglue+0x10>

08009030 <__sread>:
 8009030:	b510      	push	{r4, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	f000 f8b2 	bl	80091a0 <_read_r>
 800903c:	2800      	cmp	r0, #0
 800903e:	bfab      	itete	ge
 8009040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009042:	89a3      	ldrhlt	r3, [r4, #12]
 8009044:	181b      	addge	r3, r3, r0
 8009046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800904a:	bfac      	ite	ge
 800904c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800904e:	81a3      	strhlt	r3, [r4, #12]
 8009050:	bd10      	pop	{r4, pc}

08009052 <__swrite>:
 8009052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009056:	461f      	mov	r7, r3
 8009058:	898b      	ldrh	r3, [r1, #12]
 800905a:	05db      	lsls	r3, r3, #23
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	4616      	mov	r6, r2
 8009062:	d505      	bpl.n	8009070 <__swrite+0x1e>
 8009064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009068:	2302      	movs	r3, #2
 800906a:	2200      	movs	r2, #0
 800906c:	f000 f886 	bl	800917c <_lseek_r>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	4632      	mov	r2, r6
 800907e:	463b      	mov	r3, r7
 8009080:	4628      	mov	r0, r5
 8009082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009086:	f000 b8c1 	b.w	800920c <_write_r>

0800908a <__sseek>:
 800908a:	b510      	push	{r4, lr}
 800908c:	460c      	mov	r4, r1
 800908e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009092:	f000 f873 	bl	800917c <_lseek_r>
 8009096:	1c43      	adds	r3, r0, #1
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	bf15      	itete	ne
 800909c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800909e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090a6:	81a3      	strheq	r3, [r4, #12]
 80090a8:	bf18      	it	ne
 80090aa:	81a3      	strhne	r3, [r4, #12]
 80090ac:	bd10      	pop	{r4, pc}

080090ae <__sclose>:
 80090ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b2:	f000 b853 	b.w	800915c <_close_r>

080090b6 <memmove>:
 80090b6:	4288      	cmp	r0, r1
 80090b8:	b510      	push	{r4, lr}
 80090ba:	eb01 0402 	add.w	r4, r1, r2
 80090be:	d902      	bls.n	80090c6 <memmove+0x10>
 80090c0:	4284      	cmp	r4, r0
 80090c2:	4623      	mov	r3, r4
 80090c4:	d807      	bhi.n	80090d6 <memmove+0x20>
 80090c6:	1e43      	subs	r3, r0, #1
 80090c8:	42a1      	cmp	r1, r4
 80090ca:	d008      	beq.n	80090de <memmove+0x28>
 80090cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d4:	e7f8      	b.n	80090c8 <memmove+0x12>
 80090d6:	4402      	add	r2, r0
 80090d8:	4601      	mov	r1, r0
 80090da:	428a      	cmp	r2, r1
 80090dc:	d100      	bne.n	80090e0 <memmove+0x2a>
 80090de:	bd10      	pop	{r4, pc}
 80090e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090e8:	e7f7      	b.n	80090da <memmove+0x24>

080090ea <memset>:
 80090ea:	4402      	add	r2, r0
 80090ec:	4603      	mov	r3, r0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d100      	bne.n	80090f4 <memset+0xa>
 80090f2:	4770      	bx	lr
 80090f4:	f803 1b01 	strb.w	r1, [r3], #1
 80090f8:	e7f9      	b.n	80090ee <memset+0x4>

080090fa <_raise_r>:
 80090fa:	291f      	cmp	r1, #31
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4605      	mov	r5, r0
 8009100:	460c      	mov	r4, r1
 8009102:	d904      	bls.n	800910e <_raise_r+0x14>
 8009104:	2316      	movs	r3, #22
 8009106:	6003      	str	r3, [r0, #0]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	bd38      	pop	{r3, r4, r5, pc}
 800910e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009110:	b112      	cbz	r2, 8009118 <_raise_r+0x1e>
 8009112:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009116:	b94b      	cbnz	r3, 800912c <_raise_r+0x32>
 8009118:	4628      	mov	r0, r5
 800911a:	f000 f865 	bl	80091e8 <_getpid_r>
 800911e:	4622      	mov	r2, r4
 8009120:	4601      	mov	r1, r0
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009128:	f000 b84c 	b.w	80091c4 <_kill_r>
 800912c:	2b01      	cmp	r3, #1
 800912e:	d00a      	beq.n	8009146 <_raise_r+0x4c>
 8009130:	1c59      	adds	r1, r3, #1
 8009132:	d103      	bne.n	800913c <_raise_r+0x42>
 8009134:	2316      	movs	r3, #22
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	2001      	movs	r0, #1
 800913a:	e7e7      	b.n	800910c <_raise_r+0x12>
 800913c:	2100      	movs	r1, #0
 800913e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009142:	4620      	mov	r0, r4
 8009144:	4798      	blx	r3
 8009146:	2000      	movs	r0, #0
 8009148:	e7e0      	b.n	800910c <_raise_r+0x12>
	...

0800914c <raise>:
 800914c:	4b02      	ldr	r3, [pc, #8]	@ (8009158 <raise+0xc>)
 800914e:	4601      	mov	r1, r0
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	f7ff bfd2 	b.w	80090fa <_raise_r>
 8009156:	bf00      	nop
 8009158:	20000018 	.word	0x20000018

0800915c <_close_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	@ (8009178 <_close_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7fa ff65 	bl	8004036 <_close>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_close_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_close_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000320 	.word	0x20000320

0800917c <_lseek_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	@ (800919c <_lseek_r+0x20>)
 8009180:	4604      	mov	r4, r0
 8009182:	4608      	mov	r0, r1
 8009184:	4611      	mov	r1, r2
 8009186:	2200      	movs	r2, #0
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7fa ff7a 	bl	8004084 <_lseek>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_lseek_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_lseek_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000320 	.word	0x20000320

080091a0 <_read_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d07      	ldr	r5, [pc, #28]	@ (80091c0 <_read_r+0x20>)
 80091a4:	4604      	mov	r4, r0
 80091a6:	4608      	mov	r0, r1
 80091a8:	4611      	mov	r1, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7fa ff08 	bl	8003fc4 <_read>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_read_r+0x1e>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_read_r+0x1e>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000320 	.word	0x20000320

080091c4 <_kill_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	@ (80091e4 <_kill_r+0x20>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	f7fa fedc 	bl	8003f8e <_kill>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	d102      	bne.n	80091e0 <_kill_r+0x1c>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	b103      	cbz	r3, 80091e0 <_kill_r+0x1c>
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	bd38      	pop	{r3, r4, r5, pc}
 80091e2:	bf00      	nop
 80091e4:	20000320 	.word	0x20000320

080091e8 <_getpid_r>:
 80091e8:	f7fa bec9 	b.w	8003f7e <_getpid>

080091ec <_sbrk_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d06      	ldr	r5, [pc, #24]	@ (8009208 <_sbrk_r+0x1c>)
 80091f0:	2300      	movs	r3, #0
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	f7fa ff52 	bl	80040a0 <_sbrk>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_sbrk_r+0x1a>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_sbrk_r+0x1a>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20000320 	.word	0x20000320

0800920c <_write_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d07      	ldr	r5, [pc, #28]	@ (800922c <_write_r+0x20>)
 8009210:	4604      	mov	r4, r0
 8009212:	4608      	mov	r0, r1
 8009214:	4611      	mov	r1, r2
 8009216:	2200      	movs	r2, #0
 8009218:	602a      	str	r2, [r5, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	f7fa feef 	bl	8003ffe <_write>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_write_r+0x1e>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_write_r+0x1e>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000320 	.word	0x20000320

08009230 <__errno>:
 8009230:	4b01      	ldr	r3, [pc, #4]	@ (8009238 <__errno+0x8>)
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	20000018 	.word	0x20000018

0800923c <__libc_init_array>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4d0d      	ldr	r5, [pc, #52]	@ (8009274 <__libc_init_array+0x38>)
 8009240:	4c0d      	ldr	r4, [pc, #52]	@ (8009278 <__libc_init_array+0x3c>)
 8009242:	1b64      	subs	r4, r4, r5
 8009244:	10a4      	asrs	r4, r4, #2
 8009246:	2600      	movs	r6, #0
 8009248:	42a6      	cmp	r6, r4
 800924a:	d109      	bne.n	8009260 <__libc_init_array+0x24>
 800924c:	4d0b      	ldr	r5, [pc, #44]	@ (800927c <__libc_init_array+0x40>)
 800924e:	4c0c      	ldr	r4, [pc, #48]	@ (8009280 <__libc_init_array+0x44>)
 8009250:	f000 fd08 	bl	8009c64 <_init>
 8009254:	1b64      	subs	r4, r4, r5
 8009256:	10a4      	asrs	r4, r4, #2
 8009258:	2600      	movs	r6, #0
 800925a:	42a6      	cmp	r6, r4
 800925c:	d105      	bne.n	800926a <__libc_init_array+0x2e>
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	f855 3b04 	ldr.w	r3, [r5], #4
 8009264:	4798      	blx	r3
 8009266:	3601      	adds	r6, #1
 8009268:	e7ee      	b.n	8009248 <__libc_init_array+0xc>
 800926a:	f855 3b04 	ldr.w	r3, [r5], #4
 800926e:	4798      	blx	r3
 8009270:	3601      	adds	r6, #1
 8009272:	e7f2      	b.n	800925a <__libc_init_array+0x1e>
 8009274:	0800adb4 	.word	0x0800adb4
 8009278:	0800adb4 	.word	0x0800adb4
 800927c:	0800adb4 	.word	0x0800adb4
 8009280:	0800adc0 	.word	0x0800adc0

08009284 <__retarget_lock_init_recursive>:
 8009284:	4770      	bx	lr

08009286 <__retarget_lock_acquire_recursive>:
 8009286:	4770      	bx	lr

08009288 <__retarget_lock_release_recursive>:
 8009288:	4770      	bx	lr

0800928a <memcpy>:
 800928a:	440a      	add	r2, r1
 800928c:	4291      	cmp	r1, r2
 800928e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009292:	d100      	bne.n	8009296 <memcpy+0xc>
 8009294:	4770      	bx	lr
 8009296:	b510      	push	{r4, lr}
 8009298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800929c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092a0:	4291      	cmp	r1, r2
 80092a2:	d1f9      	bne.n	8009298 <memcpy+0xe>
 80092a4:	bd10      	pop	{r4, pc}
	...

080092a8 <_free_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4605      	mov	r5, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d041      	beq.n	8009334 <_free_r+0x8c>
 80092b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b4:	1f0c      	subs	r4, r1, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	18e4      	addlt	r4, r4, r3
 80092bc:	f7ff fdd8 	bl	8008e70 <__malloc_lock>
 80092c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009338 <_free_r+0x90>)
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	b933      	cbnz	r3, 80092d4 <_free_r+0x2c>
 80092c6:	6063      	str	r3, [r4, #4]
 80092c8:	6014      	str	r4, [r2, #0]
 80092ca:	4628      	mov	r0, r5
 80092cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d0:	f7ff bdd4 	b.w	8008e7c <__malloc_unlock>
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	d908      	bls.n	80092ea <_free_r+0x42>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	1821      	adds	r1, r4, r0
 80092dc:	428b      	cmp	r3, r1
 80092de:	bf01      	itttt	eq
 80092e0:	6819      	ldreq	r1, [r3, #0]
 80092e2:	685b      	ldreq	r3, [r3, #4]
 80092e4:	1809      	addeq	r1, r1, r0
 80092e6:	6021      	streq	r1, [r4, #0]
 80092e8:	e7ed      	b.n	80092c6 <_free_r+0x1e>
 80092ea:	461a      	mov	r2, r3
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	b10b      	cbz	r3, 80092f4 <_free_r+0x4c>
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	d9fa      	bls.n	80092ea <_free_r+0x42>
 80092f4:	6811      	ldr	r1, [r2, #0]
 80092f6:	1850      	adds	r0, r2, r1
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d10b      	bne.n	8009314 <_free_r+0x6c>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	4401      	add	r1, r0
 8009300:	1850      	adds	r0, r2, r1
 8009302:	4283      	cmp	r3, r0
 8009304:	6011      	str	r1, [r2, #0]
 8009306:	d1e0      	bne.n	80092ca <_free_r+0x22>
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	6053      	str	r3, [r2, #4]
 800930e:	4408      	add	r0, r1
 8009310:	6010      	str	r0, [r2, #0]
 8009312:	e7da      	b.n	80092ca <_free_r+0x22>
 8009314:	d902      	bls.n	800931c <_free_r+0x74>
 8009316:	230c      	movs	r3, #12
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	e7d6      	b.n	80092ca <_free_r+0x22>
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	1821      	adds	r1, r4, r0
 8009320:	428b      	cmp	r3, r1
 8009322:	bf04      	itt	eq
 8009324:	6819      	ldreq	r1, [r3, #0]
 8009326:	685b      	ldreq	r3, [r3, #4]
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	bf04      	itt	eq
 800932c:	1809      	addeq	r1, r1, r0
 800932e:	6021      	streq	r1, [r4, #0]
 8009330:	6054      	str	r4, [r2, #4]
 8009332:	e7ca      	b.n	80092ca <_free_r+0x22>
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	200001e0 	.word	0x200001e0

0800933c <__sfputc_r>:
 800933c:	6893      	ldr	r3, [r2, #8]
 800933e:	3b01      	subs	r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	b410      	push	{r4}
 8009344:	6093      	str	r3, [r2, #8]
 8009346:	da08      	bge.n	800935a <__sfputc_r+0x1e>
 8009348:	6994      	ldr	r4, [r2, #24]
 800934a:	42a3      	cmp	r3, r4
 800934c:	db01      	blt.n	8009352 <__sfputc_r+0x16>
 800934e:	290a      	cmp	r1, #10
 8009350:	d103      	bne.n	800935a <__sfputc_r+0x1e>
 8009352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009356:	f000 bb6d 	b.w	8009a34 <__swbuf_r>
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	1c58      	adds	r0, r3, #1
 800935e:	6010      	str	r0, [r2, #0]
 8009360:	7019      	strb	r1, [r3, #0]
 8009362:	4608      	mov	r0, r1
 8009364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009368:	4770      	bx	lr

0800936a <__sfputs_r>:
 800936a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	4614      	mov	r4, r2
 8009372:	18d5      	adds	r5, r2, r3
 8009374:	42ac      	cmp	r4, r5
 8009376:	d101      	bne.n	800937c <__sfputs_r+0x12>
 8009378:	2000      	movs	r0, #0
 800937a:	e007      	b.n	800938c <__sfputs_r+0x22>
 800937c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009380:	463a      	mov	r2, r7
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ffda 	bl	800933c <__sfputc_r>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d1f3      	bne.n	8009374 <__sfputs_r+0xa>
 800938c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009390 <_vfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	460d      	mov	r5, r1
 8009396:	b09d      	sub	sp, #116	@ 0x74
 8009398:	4614      	mov	r4, r2
 800939a:	4698      	mov	r8, r3
 800939c:	4606      	mov	r6, r0
 800939e:	b118      	cbz	r0, 80093a8 <_vfiprintf_r+0x18>
 80093a0:	6a03      	ldr	r3, [r0, #32]
 80093a2:	b90b      	cbnz	r3, 80093a8 <_vfiprintf_r+0x18>
 80093a4:	f7ff fdfc 	bl	8008fa0 <__sinit>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b6:	f7ff ff66 	bl	8009286 <__retarget_lock_acquire_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	071b      	lsls	r3, r3, #28
 80093be:	d501      	bpl.n	80093c4 <_vfiprintf_r+0x34>
 80093c0:	692b      	ldr	r3, [r5, #16]
 80093c2:	b99b      	cbnz	r3, 80093ec <_vfiprintf_r+0x5c>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 fb72 	bl	8009ab0 <__swsetup_r>
 80093cc:	b170      	cbz	r0, 80093ec <_vfiprintf_r+0x5c>
 80093ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d0:	07dc      	lsls	r4, r3, #31
 80093d2:	d504      	bpl.n	80093de <_vfiprintf_r+0x4e>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	b01d      	add	sp, #116	@ 0x74
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	0598      	lsls	r0, r3, #22
 80093e2:	d4f7      	bmi.n	80093d4 <_vfiprintf_r+0x44>
 80093e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093e6:	f7ff ff4f 	bl	8009288 <__retarget_lock_release_recursive>
 80093ea:	e7f3      	b.n	80093d4 <_vfiprintf_r+0x44>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f0:	2320      	movs	r3, #32
 80093f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093fa:	2330      	movs	r3, #48	@ 0x30
 80093fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095ac <_vfiprintf_r+0x21c>
 8009400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009404:	f04f 0901 	mov.w	r9, #1
 8009408:	4623      	mov	r3, r4
 800940a:	469a      	mov	sl, r3
 800940c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009410:	b10a      	cbz	r2, 8009416 <_vfiprintf_r+0x86>
 8009412:	2a25      	cmp	r2, #37	@ 0x25
 8009414:	d1f9      	bne.n	800940a <_vfiprintf_r+0x7a>
 8009416:	ebba 0b04 	subs.w	fp, sl, r4
 800941a:	d00b      	beq.n	8009434 <_vfiprintf_r+0xa4>
 800941c:	465b      	mov	r3, fp
 800941e:	4622      	mov	r2, r4
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ffa1 	bl	800936a <__sfputs_r>
 8009428:	3001      	adds	r0, #1
 800942a:	f000 80a7 	beq.w	800957c <_vfiprintf_r+0x1ec>
 800942e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009430:	445a      	add	r2, fp
 8009432:	9209      	str	r2, [sp, #36]	@ 0x24
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 809f 	beq.w	800957c <_vfiprintf_r+0x1ec>
 800943e:	2300      	movs	r3, #0
 8009440:	f04f 32ff 	mov.w	r2, #4294967295
 8009444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009448:	f10a 0a01 	add.w	sl, sl, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009454:	931a      	str	r3, [sp, #104]	@ 0x68
 8009456:	4654      	mov	r4, sl
 8009458:	2205      	movs	r2, #5
 800945a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945e:	4853      	ldr	r0, [pc, #332]	@ (80095ac <_vfiprintf_r+0x21c>)
 8009460:	f7f6 fede 	bl	8000220 <memchr>
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	b9d8      	cbnz	r0, 80094a0 <_vfiprintf_r+0x110>
 8009468:	06d1      	lsls	r1, r2, #27
 800946a:	bf44      	itt	mi
 800946c:	2320      	movmi	r3, #32
 800946e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009472:	0713      	lsls	r3, r2, #28
 8009474:	bf44      	itt	mi
 8009476:	232b      	movmi	r3, #43	@ 0x2b
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b2a      	cmp	r3, #42	@ 0x2a
 8009482:	d015      	beq.n	80094b0 <_vfiprintf_r+0x120>
 8009484:	9a07      	ldr	r2, [sp, #28]
 8009486:	4654      	mov	r4, sl
 8009488:	2000      	movs	r0, #0
 800948a:	f04f 0c0a 	mov.w	ip, #10
 800948e:	4621      	mov	r1, r4
 8009490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009494:	3b30      	subs	r3, #48	@ 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d94b      	bls.n	8009532 <_vfiprintf_r+0x1a2>
 800949a:	b1b0      	cbz	r0, 80094ca <_vfiprintf_r+0x13a>
 800949c:	9207      	str	r2, [sp, #28]
 800949e:	e014      	b.n	80094ca <_vfiprintf_r+0x13a>
 80094a0:	eba0 0308 	sub.w	r3, r0, r8
 80094a4:	fa09 f303 	lsl.w	r3, r9, r3
 80094a8:	4313      	orrs	r3, r2
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	46a2      	mov	sl, r4
 80094ae:	e7d2      	b.n	8009456 <_vfiprintf_r+0xc6>
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	1d19      	adds	r1, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	9103      	str	r1, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfbb      	ittet	lt
 80094bc:	425b      	neglt	r3, r3
 80094be:	f042 0202 	orrlt.w	r2, r2, #2
 80094c2:	9307      	strge	r3, [sp, #28]
 80094c4:	9307      	strlt	r3, [sp, #28]
 80094c6:	bfb8      	it	lt
 80094c8:	9204      	strlt	r2, [sp, #16]
 80094ca:	7823      	ldrb	r3, [r4, #0]
 80094cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ce:	d10a      	bne.n	80094e6 <_vfiprintf_r+0x156>
 80094d0:	7863      	ldrb	r3, [r4, #1]
 80094d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d4:	d132      	bne.n	800953c <_vfiprintf_r+0x1ac>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	1d1a      	adds	r2, r3, #4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	9203      	str	r2, [sp, #12]
 80094de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094e2:	3402      	adds	r4, #2
 80094e4:	9305      	str	r3, [sp, #20]
 80094e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095bc <_vfiprintf_r+0x22c>
 80094ea:	7821      	ldrb	r1, [r4, #0]
 80094ec:	2203      	movs	r2, #3
 80094ee:	4650      	mov	r0, sl
 80094f0:	f7f6 fe96 	bl	8000220 <memchr>
 80094f4:	b138      	cbz	r0, 8009506 <_vfiprintf_r+0x176>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	eba0 000a 	sub.w	r0, r0, sl
 80094fc:	2240      	movs	r2, #64	@ 0x40
 80094fe:	4082      	lsls	r2, r0
 8009500:	4313      	orrs	r3, r2
 8009502:	3401      	adds	r4, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950a:	4829      	ldr	r0, [pc, #164]	@ (80095b0 <_vfiprintf_r+0x220>)
 800950c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009510:	2206      	movs	r2, #6
 8009512:	f7f6 fe85 	bl	8000220 <memchr>
 8009516:	2800      	cmp	r0, #0
 8009518:	d03f      	beq.n	800959a <_vfiprintf_r+0x20a>
 800951a:	4b26      	ldr	r3, [pc, #152]	@ (80095b4 <_vfiprintf_r+0x224>)
 800951c:	bb1b      	cbnz	r3, 8009566 <_vfiprintf_r+0x1d6>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	3307      	adds	r3, #7
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	3308      	adds	r3, #8
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952c:	443b      	add	r3, r7
 800952e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009530:	e76a      	b.n	8009408 <_vfiprintf_r+0x78>
 8009532:	fb0c 3202 	mla	r2, ip, r2, r3
 8009536:	460c      	mov	r4, r1
 8009538:	2001      	movs	r0, #1
 800953a:	e7a8      	b.n	800948e <_vfiprintf_r+0xfe>
 800953c:	2300      	movs	r3, #0
 800953e:	3401      	adds	r4, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4619      	mov	r1, r3
 8009544:	f04f 0c0a 	mov.w	ip, #10
 8009548:	4620      	mov	r0, r4
 800954a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954e:	3a30      	subs	r2, #48	@ 0x30
 8009550:	2a09      	cmp	r2, #9
 8009552:	d903      	bls.n	800955c <_vfiprintf_r+0x1cc>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0c6      	beq.n	80094e6 <_vfiprintf_r+0x156>
 8009558:	9105      	str	r1, [sp, #20]
 800955a:	e7c4      	b.n	80094e6 <_vfiprintf_r+0x156>
 800955c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009560:	4604      	mov	r4, r0
 8009562:	2301      	movs	r3, #1
 8009564:	e7f0      	b.n	8009548 <_vfiprintf_r+0x1b8>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b12      	ldr	r3, [pc, #72]	@ (80095b8 <_vfiprintf_r+0x228>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4630      	mov	r0, r6
 8009572:	f3af 8000 	nop.w
 8009576:	4607      	mov	r7, r0
 8009578:	1c78      	adds	r0, r7, #1
 800957a:	d1d6      	bne.n	800952a <_vfiprintf_r+0x19a>
 800957c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	d405      	bmi.n	800958e <_vfiprintf_r+0x1fe>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d402      	bmi.n	800958e <_vfiprintf_r+0x1fe>
 8009588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800958a:	f7ff fe7d 	bl	8009288 <__retarget_lock_release_recursive>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	065b      	lsls	r3, r3, #25
 8009592:	f53f af1f 	bmi.w	80093d4 <_vfiprintf_r+0x44>
 8009596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009598:	e71e      	b.n	80093d8 <_vfiprintf_r+0x48>
 800959a:	ab03      	add	r3, sp, #12
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	462a      	mov	r2, r5
 80095a0:	4b05      	ldr	r3, [pc, #20]	@ (80095b8 <_vfiprintf_r+0x228>)
 80095a2:	a904      	add	r1, sp, #16
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 f879 	bl	800969c <_printf_i>
 80095aa:	e7e4      	b.n	8009576 <_vfiprintf_r+0x1e6>
 80095ac:	0800ad78 	.word	0x0800ad78
 80095b0:	0800ad82 	.word	0x0800ad82
 80095b4:	00000000 	.word	0x00000000
 80095b8:	0800936b 	.word	0x0800936b
 80095bc:	0800ad7e 	.word	0x0800ad7e

080095c0 <_printf_common>:
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	4616      	mov	r6, r2
 80095c6:	4698      	mov	r8, r3
 80095c8:	688a      	ldr	r2, [r1, #8]
 80095ca:	690b      	ldr	r3, [r1, #16]
 80095cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095d0:	4293      	cmp	r3, r2
 80095d2:	bfb8      	it	lt
 80095d4:	4613      	movlt	r3, r2
 80095d6:	6033      	str	r3, [r6, #0]
 80095d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095dc:	4607      	mov	r7, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b10a      	cbz	r2, 80095e6 <_printf_common+0x26>
 80095e2:	3301      	adds	r3, #1
 80095e4:	6033      	str	r3, [r6, #0]
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	0699      	lsls	r1, r3, #26
 80095ea:	bf42      	ittt	mi
 80095ec:	6833      	ldrmi	r3, [r6, #0]
 80095ee:	3302      	addmi	r3, #2
 80095f0:	6033      	strmi	r3, [r6, #0]
 80095f2:	6825      	ldr	r5, [r4, #0]
 80095f4:	f015 0506 	ands.w	r5, r5, #6
 80095f8:	d106      	bne.n	8009608 <_printf_common+0x48>
 80095fa:	f104 0a19 	add.w	sl, r4, #25
 80095fe:	68e3      	ldr	r3, [r4, #12]
 8009600:	6832      	ldr	r2, [r6, #0]
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	42ab      	cmp	r3, r5
 8009606:	dc26      	bgt.n	8009656 <_printf_common+0x96>
 8009608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	3b00      	subs	r3, #0
 8009610:	bf18      	it	ne
 8009612:	2301      	movne	r3, #1
 8009614:	0692      	lsls	r2, r2, #26
 8009616:	d42b      	bmi.n	8009670 <_printf_common+0xb0>
 8009618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800961c:	4641      	mov	r1, r8
 800961e:	4638      	mov	r0, r7
 8009620:	47c8      	blx	r9
 8009622:	3001      	adds	r0, #1
 8009624:	d01e      	beq.n	8009664 <_printf_common+0xa4>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	6922      	ldr	r2, [r4, #16]
 800962a:	f003 0306 	and.w	r3, r3, #6
 800962e:	2b04      	cmp	r3, #4
 8009630:	bf02      	ittt	eq
 8009632:	68e5      	ldreq	r5, [r4, #12]
 8009634:	6833      	ldreq	r3, [r6, #0]
 8009636:	1aed      	subeq	r5, r5, r3
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	bf0c      	ite	eq
 800963c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009640:	2500      	movne	r5, #0
 8009642:	4293      	cmp	r3, r2
 8009644:	bfc4      	itt	gt
 8009646:	1a9b      	subgt	r3, r3, r2
 8009648:	18ed      	addgt	r5, r5, r3
 800964a:	2600      	movs	r6, #0
 800964c:	341a      	adds	r4, #26
 800964e:	42b5      	cmp	r5, r6
 8009650:	d11a      	bne.n	8009688 <_printf_common+0xc8>
 8009652:	2000      	movs	r0, #0
 8009654:	e008      	b.n	8009668 <_printf_common+0xa8>
 8009656:	2301      	movs	r3, #1
 8009658:	4652      	mov	r2, sl
 800965a:	4641      	mov	r1, r8
 800965c:	4638      	mov	r0, r7
 800965e:	47c8      	blx	r9
 8009660:	3001      	adds	r0, #1
 8009662:	d103      	bne.n	800966c <_printf_common+0xac>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966c:	3501      	adds	r5, #1
 800966e:	e7c6      	b.n	80095fe <_printf_common+0x3e>
 8009670:	18e1      	adds	r1, r4, r3
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	2030      	movs	r0, #48	@ 0x30
 8009676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800967a:	4422      	add	r2, r4
 800967c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009684:	3302      	adds	r3, #2
 8009686:	e7c7      	b.n	8009618 <_printf_common+0x58>
 8009688:	2301      	movs	r3, #1
 800968a:	4622      	mov	r2, r4
 800968c:	4641      	mov	r1, r8
 800968e:	4638      	mov	r0, r7
 8009690:	47c8      	blx	r9
 8009692:	3001      	adds	r0, #1
 8009694:	d0e6      	beq.n	8009664 <_printf_common+0xa4>
 8009696:	3601      	adds	r6, #1
 8009698:	e7d9      	b.n	800964e <_printf_common+0x8e>
	...

0800969c <_printf_i>:
 800969c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a0:	7e0f      	ldrb	r7, [r1, #24]
 80096a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096a4:	2f78      	cmp	r7, #120	@ 0x78
 80096a6:	4691      	mov	r9, r2
 80096a8:	4680      	mov	r8, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	469a      	mov	sl, r3
 80096ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096b2:	d807      	bhi.n	80096c4 <_printf_i+0x28>
 80096b4:	2f62      	cmp	r7, #98	@ 0x62
 80096b6:	d80a      	bhi.n	80096ce <_printf_i+0x32>
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	f000 80d2 	beq.w	8009862 <_printf_i+0x1c6>
 80096be:	2f58      	cmp	r7, #88	@ 0x58
 80096c0:	f000 80b9 	beq.w	8009836 <_printf_i+0x19a>
 80096c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096cc:	e03a      	b.n	8009744 <_printf_i+0xa8>
 80096ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096d2:	2b15      	cmp	r3, #21
 80096d4:	d8f6      	bhi.n	80096c4 <_printf_i+0x28>
 80096d6:	a101      	add	r1, pc, #4	@ (adr r1, 80096dc <_printf_i+0x40>)
 80096d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009749 	.word	0x08009749
 80096e4:	080096c5 	.word	0x080096c5
 80096e8:	080096c5 	.word	0x080096c5
 80096ec:	080096c5 	.word	0x080096c5
 80096f0:	080096c5 	.word	0x080096c5
 80096f4:	08009749 	.word	0x08009749
 80096f8:	080096c5 	.word	0x080096c5
 80096fc:	080096c5 	.word	0x080096c5
 8009700:	080096c5 	.word	0x080096c5
 8009704:	080096c5 	.word	0x080096c5
 8009708:	08009849 	.word	0x08009849
 800970c:	08009773 	.word	0x08009773
 8009710:	08009803 	.word	0x08009803
 8009714:	080096c5 	.word	0x080096c5
 8009718:	080096c5 	.word	0x080096c5
 800971c:	0800986b 	.word	0x0800986b
 8009720:	080096c5 	.word	0x080096c5
 8009724:	08009773 	.word	0x08009773
 8009728:	080096c5 	.word	0x080096c5
 800972c:	080096c5 	.word	0x080096c5
 8009730:	0800980b 	.word	0x0800980b
 8009734:	6833      	ldr	r3, [r6, #0]
 8009736:	1d1a      	adds	r2, r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6032      	str	r2, [r6, #0]
 800973c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009744:	2301      	movs	r3, #1
 8009746:	e09d      	b.n	8009884 <_printf_i+0x1e8>
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	6820      	ldr	r0, [r4, #0]
 800974c:	1d19      	adds	r1, r3, #4
 800974e:	6031      	str	r1, [r6, #0]
 8009750:	0606      	lsls	r6, r0, #24
 8009752:	d501      	bpl.n	8009758 <_printf_i+0xbc>
 8009754:	681d      	ldr	r5, [r3, #0]
 8009756:	e003      	b.n	8009760 <_printf_i+0xc4>
 8009758:	0645      	lsls	r5, r0, #25
 800975a:	d5fb      	bpl.n	8009754 <_printf_i+0xb8>
 800975c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009760:	2d00      	cmp	r5, #0
 8009762:	da03      	bge.n	800976c <_printf_i+0xd0>
 8009764:	232d      	movs	r3, #45	@ 0x2d
 8009766:	426d      	negs	r5, r5
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800976c:	4859      	ldr	r0, [pc, #356]	@ (80098d4 <_printf_i+0x238>)
 800976e:	230a      	movs	r3, #10
 8009770:	e011      	b.n	8009796 <_printf_i+0xfa>
 8009772:	6821      	ldr	r1, [r4, #0]
 8009774:	6833      	ldr	r3, [r6, #0]
 8009776:	0608      	lsls	r0, r1, #24
 8009778:	f853 5b04 	ldr.w	r5, [r3], #4
 800977c:	d402      	bmi.n	8009784 <_printf_i+0xe8>
 800977e:	0649      	lsls	r1, r1, #25
 8009780:	bf48      	it	mi
 8009782:	b2ad      	uxthmi	r5, r5
 8009784:	2f6f      	cmp	r7, #111	@ 0x6f
 8009786:	4853      	ldr	r0, [pc, #332]	@ (80098d4 <_printf_i+0x238>)
 8009788:	6033      	str	r3, [r6, #0]
 800978a:	bf14      	ite	ne
 800978c:	230a      	movne	r3, #10
 800978e:	2308      	moveq	r3, #8
 8009790:	2100      	movs	r1, #0
 8009792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009796:	6866      	ldr	r6, [r4, #4]
 8009798:	60a6      	str	r6, [r4, #8]
 800979a:	2e00      	cmp	r6, #0
 800979c:	bfa2      	ittt	ge
 800979e:	6821      	ldrge	r1, [r4, #0]
 80097a0:	f021 0104 	bicge.w	r1, r1, #4
 80097a4:	6021      	strge	r1, [r4, #0]
 80097a6:	b90d      	cbnz	r5, 80097ac <_printf_i+0x110>
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	d04b      	beq.n	8009844 <_printf_i+0x1a8>
 80097ac:	4616      	mov	r6, r2
 80097ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80097b2:	fb03 5711 	mls	r7, r3, r1, r5
 80097b6:	5dc7      	ldrb	r7, [r0, r7]
 80097b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097bc:	462f      	mov	r7, r5
 80097be:	42bb      	cmp	r3, r7
 80097c0:	460d      	mov	r5, r1
 80097c2:	d9f4      	bls.n	80097ae <_printf_i+0x112>
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d10b      	bne.n	80097e0 <_printf_i+0x144>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	07df      	lsls	r7, r3, #31
 80097cc:	d508      	bpl.n	80097e0 <_printf_i+0x144>
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	bfde      	ittt	le
 80097d6:	2330      	movle	r3, #48	@ 0x30
 80097d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097e0:	1b92      	subs	r2, r2, r6
 80097e2:	6122      	str	r2, [r4, #16]
 80097e4:	f8cd a000 	str.w	sl, [sp]
 80097e8:	464b      	mov	r3, r9
 80097ea:	aa03      	add	r2, sp, #12
 80097ec:	4621      	mov	r1, r4
 80097ee:	4640      	mov	r0, r8
 80097f0:	f7ff fee6 	bl	80095c0 <_printf_common>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d14a      	bne.n	800988e <_printf_i+0x1f2>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b004      	add	sp, #16
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	4833      	ldr	r0, [pc, #204]	@ (80098d8 <_printf_i+0x23c>)
 800980c:	2778      	movs	r7, #120	@ 0x78
 800980e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	6831      	ldr	r1, [r6, #0]
 8009816:	061f      	lsls	r7, r3, #24
 8009818:	f851 5b04 	ldr.w	r5, [r1], #4
 800981c:	d402      	bmi.n	8009824 <_printf_i+0x188>
 800981e:	065f      	lsls	r7, r3, #25
 8009820:	bf48      	it	mi
 8009822:	b2ad      	uxthmi	r5, r5
 8009824:	6031      	str	r1, [r6, #0]
 8009826:	07d9      	lsls	r1, r3, #31
 8009828:	bf44      	itt	mi
 800982a:	f043 0320 	orrmi.w	r3, r3, #32
 800982e:	6023      	strmi	r3, [r4, #0]
 8009830:	b11d      	cbz	r5, 800983a <_printf_i+0x19e>
 8009832:	2310      	movs	r3, #16
 8009834:	e7ac      	b.n	8009790 <_printf_i+0xf4>
 8009836:	4827      	ldr	r0, [pc, #156]	@ (80098d4 <_printf_i+0x238>)
 8009838:	e7e9      	b.n	800980e <_printf_i+0x172>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	f023 0320 	bic.w	r3, r3, #32
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	e7f6      	b.n	8009832 <_printf_i+0x196>
 8009844:	4616      	mov	r6, r2
 8009846:	e7bd      	b.n	80097c4 <_printf_i+0x128>
 8009848:	6833      	ldr	r3, [r6, #0]
 800984a:	6825      	ldr	r5, [r4, #0]
 800984c:	6961      	ldr	r1, [r4, #20]
 800984e:	1d18      	adds	r0, r3, #4
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	062e      	lsls	r6, r5, #24
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	d501      	bpl.n	800985c <_printf_i+0x1c0>
 8009858:	6019      	str	r1, [r3, #0]
 800985a:	e002      	b.n	8009862 <_printf_i+0x1c6>
 800985c:	0668      	lsls	r0, r5, #25
 800985e:	d5fb      	bpl.n	8009858 <_printf_i+0x1bc>
 8009860:	8019      	strh	r1, [r3, #0]
 8009862:	2300      	movs	r3, #0
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	4616      	mov	r6, r2
 8009868:	e7bc      	b.n	80097e4 <_printf_i+0x148>
 800986a:	6833      	ldr	r3, [r6, #0]
 800986c:	1d1a      	adds	r2, r3, #4
 800986e:	6032      	str	r2, [r6, #0]
 8009870:	681e      	ldr	r6, [r3, #0]
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	2100      	movs	r1, #0
 8009876:	4630      	mov	r0, r6
 8009878:	f7f6 fcd2 	bl	8000220 <memchr>
 800987c:	b108      	cbz	r0, 8009882 <_printf_i+0x1e6>
 800987e:	1b80      	subs	r0, r0, r6
 8009880:	6060      	str	r0, [r4, #4]
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	2300      	movs	r3, #0
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800988c:	e7aa      	b.n	80097e4 <_printf_i+0x148>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	4632      	mov	r2, r6
 8009892:	4649      	mov	r1, r9
 8009894:	4640      	mov	r0, r8
 8009896:	47d0      	blx	sl
 8009898:	3001      	adds	r0, #1
 800989a:	d0ad      	beq.n	80097f8 <_printf_i+0x15c>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	d413      	bmi.n	80098ca <_printf_i+0x22e>
 80098a2:	68e0      	ldr	r0, [r4, #12]
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	4298      	cmp	r0, r3
 80098a8:	bfb8      	it	lt
 80098aa:	4618      	movlt	r0, r3
 80098ac:	e7a6      	b.n	80097fc <_printf_i+0x160>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4632      	mov	r2, r6
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d09d      	beq.n	80097f8 <_printf_i+0x15c>
 80098bc:	3501      	adds	r5, #1
 80098be:	68e3      	ldr	r3, [r4, #12]
 80098c0:	9903      	ldr	r1, [sp, #12]
 80098c2:	1a5b      	subs	r3, r3, r1
 80098c4:	42ab      	cmp	r3, r5
 80098c6:	dcf2      	bgt.n	80098ae <_printf_i+0x212>
 80098c8:	e7eb      	b.n	80098a2 <_printf_i+0x206>
 80098ca:	2500      	movs	r5, #0
 80098cc:	f104 0619 	add.w	r6, r4, #25
 80098d0:	e7f5      	b.n	80098be <_printf_i+0x222>
 80098d2:	bf00      	nop
 80098d4:	0800ad89 	.word	0x0800ad89
 80098d8:	0800ad9a 	.word	0x0800ad9a

080098dc <__sflush_r>:
 80098dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	0716      	lsls	r6, r2, #28
 80098e6:	4605      	mov	r5, r0
 80098e8:	460c      	mov	r4, r1
 80098ea:	d454      	bmi.n	8009996 <__sflush_r+0xba>
 80098ec:	684b      	ldr	r3, [r1, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc02      	bgt.n	80098f8 <__sflush_r+0x1c>
 80098f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd48      	ble.n	800998a <__sflush_r+0xae>
 80098f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	d045      	beq.n	800998a <__sflush_r+0xae>
 80098fe:	2300      	movs	r3, #0
 8009900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009904:	682f      	ldr	r7, [r5, #0]
 8009906:	6a21      	ldr	r1, [r4, #32]
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	d030      	beq.n	800996e <__sflush_r+0x92>
 800990c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	0759      	lsls	r1, r3, #29
 8009912:	d505      	bpl.n	8009920 <__sflush_r+0x44>
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800991a:	b10b      	cbz	r3, 8009920 <__sflush_r+0x44>
 800991c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	2300      	movs	r3, #0
 8009922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009924:	6a21      	ldr	r1, [r4, #32]
 8009926:	4628      	mov	r0, r5
 8009928:	47b0      	blx	r6
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	d106      	bne.n	800993e <__sflush_r+0x62>
 8009930:	6829      	ldr	r1, [r5, #0]
 8009932:	291d      	cmp	r1, #29
 8009934:	d82b      	bhi.n	800998e <__sflush_r+0xb2>
 8009936:	4a2a      	ldr	r2, [pc, #168]	@ (80099e0 <__sflush_r+0x104>)
 8009938:	410a      	asrs	r2, r1
 800993a:	07d6      	lsls	r6, r2, #31
 800993c:	d427      	bmi.n	800998e <__sflush_r+0xb2>
 800993e:	2200      	movs	r2, #0
 8009940:	6062      	str	r2, [r4, #4]
 8009942:	04d9      	lsls	r1, r3, #19
 8009944:	6922      	ldr	r2, [r4, #16]
 8009946:	6022      	str	r2, [r4, #0]
 8009948:	d504      	bpl.n	8009954 <__sflush_r+0x78>
 800994a:	1c42      	adds	r2, r0, #1
 800994c:	d101      	bne.n	8009952 <__sflush_r+0x76>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	b903      	cbnz	r3, 8009954 <__sflush_r+0x78>
 8009952:	6560      	str	r0, [r4, #84]	@ 0x54
 8009954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009956:	602f      	str	r7, [r5, #0]
 8009958:	b1b9      	cbz	r1, 800998a <__sflush_r+0xae>
 800995a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800995e:	4299      	cmp	r1, r3
 8009960:	d002      	beq.n	8009968 <__sflush_r+0x8c>
 8009962:	4628      	mov	r0, r5
 8009964:	f7ff fca0 	bl	80092a8 <_free_r>
 8009968:	2300      	movs	r3, #0
 800996a:	6363      	str	r3, [r4, #52]	@ 0x34
 800996c:	e00d      	b.n	800998a <__sflush_r+0xae>
 800996e:	2301      	movs	r3, #1
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	4602      	mov	r2, r0
 8009976:	1c50      	adds	r0, r2, #1
 8009978:	d1c9      	bne.n	800990e <__sflush_r+0x32>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0c6      	beq.n	800990e <__sflush_r+0x32>
 8009980:	2b1d      	cmp	r3, #29
 8009982:	d001      	beq.n	8009988 <__sflush_r+0xac>
 8009984:	2b16      	cmp	r3, #22
 8009986:	d11e      	bne.n	80099c6 <__sflush_r+0xea>
 8009988:	602f      	str	r7, [r5, #0]
 800998a:	2000      	movs	r0, #0
 800998c:	e022      	b.n	80099d4 <__sflush_r+0xf8>
 800998e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009992:	b21b      	sxth	r3, r3
 8009994:	e01b      	b.n	80099ce <__sflush_r+0xf2>
 8009996:	690f      	ldr	r7, [r1, #16]
 8009998:	2f00      	cmp	r7, #0
 800999a:	d0f6      	beq.n	800998a <__sflush_r+0xae>
 800999c:	0793      	lsls	r3, r2, #30
 800999e:	680e      	ldr	r6, [r1, #0]
 80099a0:	bf08      	it	eq
 80099a2:	694b      	ldreq	r3, [r1, #20]
 80099a4:	600f      	str	r7, [r1, #0]
 80099a6:	bf18      	it	ne
 80099a8:	2300      	movne	r3, #0
 80099aa:	eba6 0807 	sub.w	r8, r6, r7
 80099ae:	608b      	str	r3, [r1, #8]
 80099b0:	f1b8 0f00 	cmp.w	r8, #0
 80099b4:	dde9      	ble.n	800998a <__sflush_r+0xae>
 80099b6:	6a21      	ldr	r1, [r4, #32]
 80099b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ba:	4643      	mov	r3, r8
 80099bc:	463a      	mov	r2, r7
 80099be:	4628      	mov	r0, r5
 80099c0:	47b0      	blx	r6
 80099c2:	2800      	cmp	r0, #0
 80099c4:	dc08      	bgt.n	80099d8 <__sflush_r+0xfc>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	4407      	add	r7, r0
 80099da:	eba8 0800 	sub.w	r8, r8, r0
 80099de:	e7e7      	b.n	80099b0 <__sflush_r+0xd4>
 80099e0:	dfbffffe 	.word	0xdfbffffe

080099e4 <_fflush_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	690b      	ldr	r3, [r1, #16]
 80099e8:	4605      	mov	r5, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	b913      	cbnz	r3, 80099f4 <_fflush_r+0x10>
 80099ee:	2500      	movs	r5, #0
 80099f0:	4628      	mov	r0, r5
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	b118      	cbz	r0, 80099fe <_fflush_r+0x1a>
 80099f6:	6a03      	ldr	r3, [r0, #32]
 80099f8:	b90b      	cbnz	r3, 80099fe <_fflush_r+0x1a>
 80099fa:	f7ff fad1 	bl	8008fa0 <__sinit>
 80099fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f3      	beq.n	80099ee <_fflush_r+0xa>
 8009a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a08:	07d0      	lsls	r0, r2, #31
 8009a0a:	d404      	bmi.n	8009a16 <_fflush_r+0x32>
 8009a0c:	0599      	lsls	r1, r3, #22
 8009a0e:	d402      	bmi.n	8009a16 <_fflush_r+0x32>
 8009a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a12:	f7ff fc38 	bl	8009286 <__retarget_lock_acquire_recursive>
 8009a16:	4628      	mov	r0, r5
 8009a18:	4621      	mov	r1, r4
 8009a1a:	f7ff ff5f 	bl	80098dc <__sflush_r>
 8009a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a20:	07da      	lsls	r2, r3, #31
 8009a22:	4605      	mov	r5, r0
 8009a24:	d4e4      	bmi.n	80099f0 <_fflush_r+0xc>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	059b      	lsls	r3, r3, #22
 8009a2a:	d4e1      	bmi.n	80099f0 <_fflush_r+0xc>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a2e:	f7ff fc2b 	bl	8009288 <__retarget_lock_release_recursive>
 8009a32:	e7dd      	b.n	80099f0 <_fflush_r+0xc>

08009a34 <__swbuf_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	460e      	mov	r6, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b118      	cbz	r0, 8009a46 <__swbuf_r+0x12>
 8009a3e:	6a03      	ldr	r3, [r0, #32]
 8009a40:	b90b      	cbnz	r3, 8009a46 <__swbuf_r+0x12>
 8009a42:	f7ff faad 	bl	8008fa0 <__sinit>
 8009a46:	69a3      	ldr	r3, [r4, #24]
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	071a      	lsls	r2, r3, #28
 8009a4e:	d501      	bpl.n	8009a54 <__swbuf_r+0x20>
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	b943      	cbnz	r3, 8009a66 <__swbuf_r+0x32>
 8009a54:	4621      	mov	r1, r4
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 f82a 	bl	8009ab0 <__swsetup_r>
 8009a5c:	b118      	cbz	r0, 8009a66 <__swbuf_r+0x32>
 8009a5e:	f04f 37ff 	mov.w	r7, #4294967295
 8009a62:	4638      	mov	r0, r7
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	6922      	ldr	r2, [r4, #16]
 8009a6a:	1a98      	subs	r0, r3, r2
 8009a6c:	6963      	ldr	r3, [r4, #20]
 8009a6e:	b2f6      	uxtb	r6, r6
 8009a70:	4283      	cmp	r3, r0
 8009a72:	4637      	mov	r7, r6
 8009a74:	dc05      	bgt.n	8009a82 <__swbuf_r+0x4e>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f7ff ffb3 	bl	80099e4 <_fflush_r>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d1ed      	bne.n	8009a5e <__swbuf_r+0x2a>
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	6022      	str	r2, [r4, #0]
 8009a8e:	701e      	strb	r6, [r3, #0]
 8009a90:	6962      	ldr	r2, [r4, #20]
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d004      	beq.n	8009aa2 <__swbuf_r+0x6e>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	07db      	lsls	r3, r3, #31
 8009a9c:	d5e1      	bpl.n	8009a62 <__swbuf_r+0x2e>
 8009a9e:	2e0a      	cmp	r6, #10
 8009aa0:	d1df      	bne.n	8009a62 <__swbuf_r+0x2e>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f7ff ff9d 	bl	80099e4 <_fflush_r>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0d9      	beq.n	8009a62 <__swbuf_r+0x2e>
 8009aae:	e7d6      	b.n	8009a5e <__swbuf_r+0x2a>

08009ab0 <__swsetup_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4b29      	ldr	r3, [pc, #164]	@ (8009b58 <__swsetup_r+0xa8>)
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	460c      	mov	r4, r1
 8009aba:	b118      	cbz	r0, 8009ac4 <__swsetup_r+0x14>
 8009abc:	6a03      	ldr	r3, [r0, #32]
 8009abe:	b90b      	cbnz	r3, 8009ac4 <__swsetup_r+0x14>
 8009ac0:	f7ff fa6e 	bl	8008fa0 <__sinit>
 8009ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac8:	0719      	lsls	r1, r3, #28
 8009aca:	d422      	bmi.n	8009b12 <__swsetup_r+0x62>
 8009acc:	06da      	lsls	r2, r3, #27
 8009ace:	d407      	bmi.n	8009ae0 <__swsetup_r+0x30>
 8009ad0:	2209      	movs	r2, #9
 8009ad2:	602a      	str	r2, [r5, #0]
 8009ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	e033      	b.n	8009b48 <__swsetup_r+0x98>
 8009ae0:	0758      	lsls	r0, r3, #29
 8009ae2:	d512      	bpl.n	8009b0a <__swsetup_r+0x5a>
 8009ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ae6:	b141      	cbz	r1, 8009afa <__swsetup_r+0x4a>
 8009ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aec:	4299      	cmp	r1, r3
 8009aee:	d002      	beq.n	8009af6 <__swsetup_r+0x46>
 8009af0:	4628      	mov	r0, r5
 8009af2:	f7ff fbd9 	bl	80092a8 <_free_r>
 8009af6:	2300      	movs	r3, #0
 8009af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	2300      	movs	r3, #0
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f043 0308 	orr.w	r3, r3, #8
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	b94b      	cbnz	r3, 8009b2a <__swsetup_r+0x7a>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b20:	d003      	beq.n	8009b2a <__swsetup_r+0x7a>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f83f 	bl	8009ba8 <__smakebuf_r>
 8009b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2e:	f013 0201 	ands.w	r2, r3, #1
 8009b32:	d00a      	beq.n	8009b4a <__swsetup_r+0x9a>
 8009b34:	2200      	movs	r2, #0
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	6962      	ldr	r2, [r4, #20]
 8009b3a:	4252      	negs	r2, r2
 8009b3c:	61a2      	str	r2, [r4, #24]
 8009b3e:	6922      	ldr	r2, [r4, #16]
 8009b40:	b942      	cbnz	r2, 8009b54 <__swsetup_r+0xa4>
 8009b42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b46:	d1c5      	bne.n	8009ad4 <__swsetup_r+0x24>
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	0799      	lsls	r1, r3, #30
 8009b4c:	bf58      	it	pl
 8009b4e:	6962      	ldrpl	r2, [r4, #20]
 8009b50:	60a2      	str	r2, [r4, #8]
 8009b52:	e7f4      	b.n	8009b3e <__swsetup_r+0x8e>
 8009b54:	2000      	movs	r0, #0
 8009b56:	e7f7      	b.n	8009b48 <__swsetup_r+0x98>
 8009b58:	20000018 	.word	0x20000018

08009b5c <__swhatbuf_r>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	460c      	mov	r4, r1
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	2900      	cmp	r1, #0
 8009b66:	b096      	sub	sp, #88	@ 0x58
 8009b68:	4615      	mov	r5, r2
 8009b6a:	461e      	mov	r6, r3
 8009b6c:	da0d      	bge.n	8009b8a <__swhatbuf_r+0x2e>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b74:	f04f 0100 	mov.w	r1, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2340      	movne	r3, #64	@ 0x40
 8009b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b80:	2000      	movs	r0, #0
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	b016      	add	sp, #88	@ 0x58
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	466a      	mov	r2, sp
 8009b8c:	f000 f848 	bl	8009c20 <_fstat_r>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dbec      	blt.n	8009b6e <__swhatbuf_r+0x12>
 8009b94:	9901      	ldr	r1, [sp, #4]
 8009b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b9e:	4259      	negs	r1, r3
 8009ba0:	4159      	adcs	r1, r3
 8009ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ba6:	e7eb      	b.n	8009b80 <__swhatbuf_r+0x24>

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b003      	add	sp, #12
 8009bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffc8 	bl	8009b5c <__swhatbuf_r>
 8009bcc:	9f00      	ldr	r7, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff f8cc 	bl	8008d70 <_malloc_r>
 8009bd8:	b948      	cbnz	r0, 8009bee <__smakebuf_r+0x46>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	059a      	lsls	r2, r3, #22
 8009be0:	d4ee      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	f043 0302 	orr.w	r3, r3, #2
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	e7e2      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	6020      	str	r0, [r4, #0]
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bfe:	b15b      	cbz	r3, 8009c18 <__smakebuf_r+0x70>
 8009c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 f81d 	bl	8009c44 <_isatty_r>
 8009c0a:	b128      	cbz	r0, 8009c18 <__smakebuf_r+0x70>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f023 0303 	bic.w	r3, r3, #3
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	81a3      	strh	r3, [r4, #12]
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	431d      	orrs	r5, r3
 8009c1c:	81a5      	strh	r5, [r4, #12]
 8009c1e:	e7cf      	b.n	8009bc0 <__smakebuf_r+0x18>

08009c20 <_fstat_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	@ (8009c40 <_fstat_r+0x20>)
 8009c24:	2300      	movs	r3, #0
 8009c26:	4604      	mov	r4, r0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f7fa fa0e 	bl	800404e <_fstat>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d102      	bne.n	8009c3c <_fstat_r+0x1c>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	b103      	cbz	r3, 8009c3c <_fstat_r+0x1c>
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000320 	.word	0x20000320

08009c44 <_isatty_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d06      	ldr	r5, [pc, #24]	@ (8009c60 <_isatty_r+0x1c>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7fa fa0d 	bl	800406e <_isatty>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_isatty_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_isatty_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20000320 	.word	0x20000320

08009c64 <_init>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr

08009c70 <_fini>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	bf00      	nop
 8009c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c76:	bc08      	pop	{r3}
 8009c78:	469e      	mov	lr, r3
 8009c7a:	4770      	bx	lr
